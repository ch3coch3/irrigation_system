
final project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08005a10  08005a10  00015a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd8  08005dd8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de0  08005de0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  2000001c  08005e04  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08005e04  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018071  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330f  00000000  00000000  000380bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ff8  00000000  00000000  0003da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163ab  00000000  00000000  00043a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2d77  00000000  00000000  00059deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cb62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f8  00000000  00000000  0013cbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059f8 	.word	0x080059f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080059f8 	.word	0x080059f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <delay_us>:
#include "delay.h"

void delay_us(uint16_t us){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <delay_us+0x30>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 80004da:	bf00      	nop
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <delay_us+0x30>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3f9      	bcc.n	80004dc <delay_us+0x14>
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	200007c4 	.word	0x200007c4

080004fc <enc28j60ReadOp>:
//
//#define enc28j60_rx() enc28j60_rxtx(0xff)
//#define enc28j60_tx(data) enc28j60_rxtx(data)

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	460a      	mov	r2, r1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	4613      	mov	r3, r2
 800050a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiData[2];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	4819      	ldr	r0, [pc, #100]	; (8000578 <enc28j60ReadOp+0x7c>)
 8000512:	f002 fc1b 	bl	8002d4c <HAL_GPIO_WritePin>
	spiData[0] = (op| (address & ADDR_MASK));
 8000516:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800051a:	f003 031f 	and.w	r3, r3, #31
 800051e:	b25a      	sxtb	r2, r3
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
 800052c:	f107 010c 	add.w	r1, r7, #12
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	2201      	movs	r2, #1
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <enc28j60ReadOp+0x80>)
 8000536:	f003 f952 	bl	80037de <HAL_SPI_Transmit>
	if(address & 0x80)
 800053a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800053e:	2b00      	cmp	r3, #0
 8000540:	da07      	bge.n	8000552 <enc28j60ReadOp+0x56>
	{
		//HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
		HAL_SPI_Receive(&hspi1, &spiData[1], 1, 100);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	1c59      	adds	r1, r3, #1
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	2201      	movs	r2, #1
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <enc28j60ReadOp+0x80>)
 800054e:	f003 fa82 	bl	8003a56 <HAL_SPI_Receive>
	}
	HAL_SPI_Receive(&hspi1, &spiData[1], 1, 100);
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	1c59      	adds	r1, r3, #1
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <enc28j60ReadOp+0x80>)
 800055e:	f003 fa7a 	bl	8003a56 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <enc28j60ReadOp+0x7c>)
 8000568:	f002 fbf0 	bl	8002d4c <HAL_GPIO_WritePin>

	return spiData[1];
 800056c:	7b7b      	ldrb	r3, [r7, #13]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40020c00 	.word	0x40020c00
 800057c:	20000860 	.word	0x20000860

08000580 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	460b      	mov	r3, r1
 800058c:	71bb      	strb	r3, [r7, #6]
 800058e:	4613      	mov	r3, r2
 8000590:	717b      	strb	r3, [r7, #5]
	uint8_t spiData[2];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	4810      	ldr	r0, [pc, #64]	; (80005d8 <enc28j60WriteOp+0x58>)
 8000598:	f002 fbd8 	bl	8002d4c <HAL_GPIO_WritePin>
	spiData[0] = (op| (address & ADDR_MASK)); //((oper<<5)&0xE0)|(addr & ADDR_MASK);
 800059c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005a0:	f003 031f 	and.w	r3, r3, #31
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	733b      	strb	r3, [r7, #12]
	spiData[1] = data;
 80005b2:	797b      	ldrb	r3, [r7, #5]
 80005b4:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, spiData, 2, 100);
 80005b6:	f107 010c 	add.w	r1, r7, #12
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	2202      	movs	r2, #2
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <enc28j60WriteOp+0x5c>)
 80005c0:	f003 f90d 	bl	80037de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <enc28j60WriteOp+0x58>)
 80005ca:	f002 fbbf 	bl	8002d4c <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	20000860 	.word	0x20000860

080005e0 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	80fb      	strh	r3, [r7, #6]
		uint8_t spiData[2];
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <enc28j60ReadBuffer+0x48>)
 80005f2:	f002 fbab 	bl	8002d4c <HAL_GPIO_WritePin>
		spiData[0] = ENC28J60_READ_BUF_MEM;
 80005f6:	233a      	movs	r3, #58	; 0x3a
 80005f8:	733b      	strb	r3, [r7, #12]
//		enc28j60_select();
		HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
 80005fa:	f107 010c 	add.w	r1, r7, #12
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <enc28j60ReadBuffer+0x4c>)
 8000604:	f003 f8eb 	bl	80037de <HAL_SPI_Transmit>
//		enc28j60_tx(ENC28J60_READ_BUF_MEM);
//		while(len--)
//		{
			 HAL_SPI_Receive(&hspi1, data, len, 100);
 8000608:	88fa      	ldrh	r2, [r7, #6]
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	6839      	ldr	r1, [r7, #0]
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <enc28j60ReadBuffer+0x4c>)
 8000610:	f003 fa21 	bl	8003a56 <HAL_SPI_Receive>
//		}
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <enc28j60ReadBuffer+0x48>)
 800061a:	f002 fb97 	bl	8002d4c <HAL_GPIO_WritePin>
//		enc28j60_release();
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020c00 	.word	0x40020c00
 800062c:	20000860 	.word	0x20000860

08000630 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	80fb      	strh	r3, [r7, #6]
		uint8_t spiData[2];
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <enc28j60WriteBuffer+0x48>)
 8000642:	f002 fb83 	bl	8002d4c <HAL_GPIO_WritePin>
//		enc28j60_select();
		spiData[0] = ENC28J60_WRITE_BUF_MEM;
 8000646:	237a      	movs	r3, #122	; 0x7a
 8000648:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <enc28j60WriteBuffer+0x4c>)
 8000654:	f003 f8c3 	bl	80037de <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, len, 100);
 8000658:	88fa      	ldrh	r2, [r7, #6]
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	6839      	ldr	r1, [r7, #0]
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <enc28j60WriteBuffer+0x4c>)
 8000660:	f003 f8bd 	bl	80037de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <enc28j60WriteBuffer+0x48>)
 800066a:	f002 fb6f 	bl	8002d4c <HAL_GPIO_WritePin>
//			HAL_SPI_Transmit(&hspi1, data++, len, 100);
////			enc28j60_tx(*(data++));
//		}
//		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
//		enc28j60_release();
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020c00 	.word	0x40020c00
 800067c:	20000860 	.word	0x20000860

08000680 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <enc28j60SetBank+0x4c>)
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	4293      	cmp	r3, r2
 8000696:	d015      	beq.n	80006c4 <enc28j60SetBank+0x44>
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 8000698:	2203      	movs	r2, #3
 800069a:	211f      	movs	r1, #31
 800069c:	20a0      	movs	r0, #160	; 0xa0
 800069e:	f7ff ff6f 	bl	8000580 <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	115b      	asrs	r3, r3, #5
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	211f      	movs	r1, #31
 80006b2:	2080      	movs	r0, #128	; 0x80
 80006b4:	f7ff ff64 	bl	8000580 <enc28j60WriteOp>
                Enc28j60Bank = (address & BANK_MASK);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <enc28j60SetBank+0x4c>)
 80006c2:	701a      	strb	r2, [r3, #0]
        }
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000038 	.word	0x20000038

080006d0 <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
        // set the bank
        enc28j60SetBank(address);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffcf 	bl	8000680 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4619      	mov	r1, r3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ff08 	bl	80004fc <enc28j60ReadOp>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <enc28j60Write>:

void enc28j60Write(uint8_t address, uint8_t data)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	460a      	mov	r2, r1
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	4613      	mov	r3, r2
 8000704:	71bb      	strb	r3, [r7, #6]
        // set the bank
        enc28j60SetBank(address);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffb9 	bl	8000680 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 800070e:	79ba      	ldrb	r2, [r7, #6]
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4619      	mov	r1, r3
 8000714:	2040      	movs	r0, #64	; 0x40
 8000716:	f7ff ff33 	bl	8000580 <enc28j60WriteOp>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <enc28j60PhyWrite>:

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	460a      	mov	r2, r1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	4613      	mov	r3, r2
 8000730:	80bb      	strh	r3, [r7, #4]
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4619      	mov	r1, r3
 8000736:	20d4      	movs	r0, #212	; 0xd4
 8000738:	f7ff ffdd 	bl	80006f6 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
 800073c:	88bb      	ldrh	r3, [r7, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	20d6      	movs	r0, #214	; 0xd6
 8000744:	f7ff ffd7 	bl	80006f6 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
 8000748:	88bb      	ldrh	r3, [r7, #4]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	20d7      	movs	r0, #215	; 0xd7
 8000754:	f7ff ffcf 	bl	80006f6 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8000758:	e002      	b.n	8000760 <enc28j60PhyWrite+0x3e>
                //delayMicroseconds(15);
        	delay_us(15);
 800075a:	200f      	movs	r0, #15
 800075c:	f7ff feb4 	bl	80004c8 <delay_us>
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8000760:	20ea      	movs	r0, #234	; 0xea
 8000762:	f7ff ffb5 	bl	80006d0 <enc28j60Read>
 8000766:	4603      	mov	r3, r0
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1f4      	bne.n	800075a <enc28j60PhyWrite+0x38>

        }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	2075      	movs	r0, #117	; 0x75
 8000790:	f7ff ffb1 	bl	80006f6 <enc28j60Write>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4856      	ldr	r0, [pc, #344]	; (8000904 <enc28j60Init+0x168>)
 80007aa:	f002 facf 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f001 fc5c 	bl	800206c <HAL_Delay>
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 80007b4:	22ff      	movs	r2, #255	; 0xff
 80007b6:	2100      	movs	r1, #0
 80007b8:	20ff      	movs	r0, #255	; 0xff
 80007ba:	f7ff fee1 	bl	8000580 <enc28j60WriteOp>
	HAL_Delay(50);
 80007be:	2032      	movs	r0, #50	; 0x32
 80007c0:	f001 fc54 	bl	800206c <HAL_Delay>

	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	NextPacketPtr = RXSTART_INIT;
 80007c4:	4b50      	ldr	r3, [pc, #320]	; (8000908 <enc28j60Init+0x16c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	801a      	strh	r2, [r3, #0]
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2008      	movs	r0, #8
 80007ce:	f7ff ff92 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2009      	movs	r0, #9
 80007d6:	f7ff ff8e 	bl	80006f6 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 80007da:	2100      	movs	r1, #0
 80007dc:	200c      	movs	r0, #12
 80007de:	f7ff ff8a 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 80007e2:	2100      	movs	r1, #0
 80007e4:	200d      	movs	r0, #13
 80007e6:	f7ff ff86 	bl	80006f6 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	200a      	movs	r0, #10
 80007ee:	f7ff ff82 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 80007f2:	2119      	movs	r1, #25
 80007f4:	200b      	movs	r0, #11
 80007f6:	f7ff ff7e 	bl	80006f6 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 80007fa:	21ff      	movs	r1, #255	; 0xff
 80007fc:	2004      	movs	r0, #4
 80007fe:	f7ff ff7a 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 8000802:	2119      	movs	r1, #25
 8000804:	2005      	movs	r0, #5
 8000806:	f7ff ff76 	bl	80006f6 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	2006      	movs	r0, #6
 800080e:	f7ff ff72 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 8000812:	211f      	movs	r1, #31
 8000814:	2007      	movs	r0, #7
 8000816:	f7ff ff6e 	bl	80006f6 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
 800081a:	21b0      	movs	r1, #176	; 0xb0
 800081c:	2038      	movs	r0, #56	; 0x38
 800081e:	f7ff ff6a 	bl	80006f6 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
 8000822:	213f      	movs	r1, #63	; 0x3f
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f7ff ff66 	bl	80006f6 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
 800082a:	2130      	movs	r1, #48	; 0x30
 800082c:	2029      	movs	r0, #41	; 0x29
 800082e:	f7ff ff62 	bl	80006f6 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
 8000832:	21f9      	movs	r1, #249	; 0xf9
 8000834:	2030      	movs	r0, #48	; 0x30
 8000836:	f7ff ff5e 	bl	80006f6 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
 800083a:	21f7      	movs	r1, #247	; 0xf7
 800083c:	2031      	movs	r0, #49	; 0x31
 800083e:	f7ff ff5a 	bl	80006f6 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8000842:	210d      	movs	r1, #13
 8000844:	20c0      	movs	r0, #192	; 0xc0
 8000846:	f7ff ff56 	bl	80006f6 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
 800084a:	2100      	movs	r1, #0
 800084c:	20c1      	movs	r0, #193	; 0xc1
 800084e:	f7ff ff52 	bl	80006f6 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 8000852:	2232      	movs	r2, #50	; 0x32
 8000854:	21c2      	movs	r1, #194	; 0xc2
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	f7ff fe92 	bl	8000580 <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
 800085c:	2112      	movs	r1, #18
 800085e:	20c6      	movs	r0, #198	; 0xc6
 8000860:	f7ff ff49 	bl	80006f6 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
 8000864:	210c      	movs	r1, #12
 8000866:	20c7      	movs	r0, #199	; 0xc7
 8000868:	f7ff ff45 	bl	80006f6 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
 800086c:	2112      	movs	r1, #18
 800086e:	20c4      	movs	r0, #196	; 0xc4
 8000870:	f7ff ff41 	bl	80006f6 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);
 8000874:	21dc      	movs	r1, #220	; 0xdc
 8000876:	20ca      	movs	r0, #202	; 0xca
 8000878:	f7ff ff3d 	bl	80006f6 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 800087c:	2105      	movs	r1, #5
 800087e:	20cb      	movs	r0, #203	; 0xcb
 8000880:	f7ff ff39 	bl	80006f6 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	20e4      	movs	r0, #228	; 0xe4
 800088c:	f7ff ff33 	bl	80006f6 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3301      	adds	r3, #1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	20e5      	movs	r0, #229	; 0xe5
 800089a:	f7ff ff2c 	bl	80006f6 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3302      	adds	r3, #2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	20e2      	movs	r0, #226	; 0xe2
 80008a8:	f7ff ff25 	bl	80006f6 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3303      	adds	r3, #3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	20e3      	movs	r0, #227	; 0xe3
 80008b6:	f7ff ff1e 	bl	80006f6 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3304      	adds	r3, #4
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	20e0      	movs	r0, #224	; 0xe0
 80008c4:	f7ff ff17 	bl	80006f6 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3305      	adds	r3, #5
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	20e1      	movs	r0, #225	; 0xe1
 80008d2:	f7ff ff10 	bl	80006f6 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	2010      	movs	r0, #16
 80008dc:	f7ff ff21 	bl	8000722 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
 80008e0:	201f      	movs	r0, #31
 80008e2:	f7ff fecd 	bl	8000680 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 80008e6:	22c0      	movs	r2, #192	; 0xc0
 80008e8:	211b      	movs	r1, #27
 80008ea:	2080      	movs	r0, #128	; 0x80
 80008ec:	f7ff fe48 	bl	8000580 <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 80008f0:	2204      	movs	r2, #4
 80008f2:	211f      	movs	r1, #31
 80008f4:	2080      	movs	r0, #128	; 0x80
 80008f6:	f7ff fe43 	bl	8000580 <enc28j60WriteOp>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020c00 	.word	0x40020c00
 8000908:	2000003a 	.word	0x2000003a

0800090c <enc28j60PacketSend>:
{
	return(enc28j60Read(EREVID));
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	80fb      	strh	r3, [r7, #6]
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 8000918:	21ff      	movs	r1, #255	; 0xff
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff feeb 	bl	80006f6 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 8000920:	2119      	movs	r1, #25
 8000922:	2003      	movs	r0, #3
 8000924:	f7ff fee7 	bl	80006f6 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3b01      	subs	r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	2006      	movs	r0, #6
 8000934:	f7ff fedf 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 800093e:	331f      	adds	r3, #31
 8000940:	121b      	asrs	r3, r3, #8
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	2007      	movs	r0, #7
 8000948:	f7ff fed5 	bl	80006f6 <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	207a      	movs	r0, #122	; 0x7a
 8000952:	f7ff fe15 	bl	8000580 <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	6839      	ldr	r1, [r7, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe68 	bl	8000630 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8000960:	2208      	movs	r2, #8
 8000962:	211f      	movs	r1, #31
 8000964:	2080      	movs	r0, #128	; 0x80
 8000966:	f7ff fe0b 	bl	8000580 <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
 800096a:	201c      	movs	r0, #28
 800096c:	f7ff feb0 	bl	80006d0 <enc28j60Read>
 8000970:	4603      	mov	r3, r0
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <enc28j60PacketSend+0x78>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 800097a:	2208      	movs	r2, #8
 800097c:	211f      	movs	r1, #31
 800097e:	20a0      	movs	r0, #160	; 0xa0
 8000980:	f7ff fdfe 	bl	8000580 <enc28j60WriteOp>
        }
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	80fb      	strh	r3, [r7, #6]
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
 8000998:	2039      	movs	r0, #57	; 0x39
 800099a:	f7ff fe99 	bl	80006d0 <enc28j60Read>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <enc28j60PacketReceive+0x1c>
		return(0);
 80009a4:	2300      	movs	r3, #0
 80009a6:	e077      	b.n	8000a98 <enc28j60PacketReceive+0x10c>
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
 80009a8:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fea0 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fe97 	bl	80006f6 <enc28j60Write>
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	203a      	movs	r0, #58	; 0x3a
 80009cc:	f7ff fd96 	bl	80004fc <enc28j60ReadOp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 80009d6:	801a      	strh	r2, [r3, #0]
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 80009d8:	2100      	movs	r1, #0
 80009da:	203a      	movs	r0, #58	; 0x3a
 80009dc:	f7ff fd8e 	bl	80004fc <enc28j60ReadOp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 80009f4:	801a      	strh	r2, [r3, #0]
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	203a      	movs	r0, #58	; 0x3a
 80009fa:	f7ff fd7f 	bl	80004fc <enc28j60ReadOp>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 8000a02:	2100      	movs	r1, #0
 8000a04:	203a      	movs	r0, #58	; 0x3a
 8000a06:	f7ff fd79 	bl	80004fc <enc28j60ReadOp>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	81fb      	strh	r3, [r7, #14]
        len-=4; //remove the CRC count
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	3b04      	subs	r3, #4
 8000a1e:	81fb      	strh	r3, [r7, #14]
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	203a      	movs	r0, #58	; 0x3a
 8000a24:	f7ff fd6a 	bl	80004fc <enc28j60ReadOp>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	81bb      	strh	r3, [r7, #12]
	rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	203a      	movs	r0, #58	; 0x3a
 8000a30:	f7ff fd64 	bl	80004fc <enc28j60ReadOp>
 8000a34:	4603      	mov	r3, r0
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	81bb      	strh	r3, [r7, #12]
	// limit retrieve length
        if (len>maxlen-1){
 8000a44:	88fa      	ldrh	r2, [r7, #6]
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d802      	bhi.n	8000a52 <enc28j60PacketReceive+0xc6>
                len=maxlen-1;
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	81fb      	strh	r3, [r7, #14]
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
 8000a52:	89bb      	ldrh	r3, [r7, #12]
 8000a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <enc28j60PacketReceive+0xd6>
                // invalid
                len=0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	81fb      	strh	r3, [r7, #14]
 8000a60:	e004      	b.n	8000a6c <enc28j60PacketReceive+0xe0>
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
 8000a62:	89fb      	ldrh	r3, [r7, #14]
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fdba 	bl	80005e0 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	200c      	movs	r0, #12
 8000a76:	f7ff fe3e 	bl	80006f6 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <enc28j60PacketReceive+0x114>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4619      	mov	r1, r3
 8000a86:	200d      	movs	r0, #13
 8000a88:	f7ff fe35 	bl	80006f6 <enc28j60Write>
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8000a8c:	2240      	movs	r2, #64	; 0x40
 8000a8e:	211e      	movs	r1, #30
 8000a90:	2080      	movs	r0, #128	; 0x80
 8000a92:	f7ff fd75 	bl	8000580 <enc28j60WriteOp>
	return(len);
 8000a96:	89fb      	ldrh	r3, [r7, #14]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000003a 	.word	0x2000003a

08000aa4 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	707b      	strb	r3, [r7, #1]
        // type 0=ip
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
 8000ab8:	787b      	ldrb	r3, [r7, #1]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d107      	bne.n	8000ace <checksum+0x2a>
                sum+=IP_PROTO_UDP_V; // protocol udp
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3311      	adds	r3, #17
 8000ac2:	60fb      	str	r3, [r7, #12]
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8000ac4:	887a      	ldrh	r2, [r7, #2]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4413      	add	r3, r2
 8000aca:	3b08      	subs	r3, #8
 8000acc:	60fb      	str	r3, [r7, #12]
        }
        if(type==2){
 8000ace:	787b      	ldrb	r3, [r7, #1]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d119      	bne.n	8000b08 <checksum+0x64>
                sum+=IP_PROTO_TCP_V;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3306      	adds	r3, #6
 8000ad8:	60fb      	str	r3, [r7, #12]
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8000ada:	887a      	ldrh	r2, [r7, #2]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	60fb      	str	r3, [r7, #12]
        }
        // build the sum of 16bit words
        while(len >1){
 8000ae4:	e010      	b.n	8000b08 <checksum+0x64>
                sum += 0xFFFF & (*buf<<8|*(buf+1));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	3201      	adds	r2, #1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
                buf+=2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3302      	adds	r3, #2
 8000b00:	607b      	str	r3, [r7, #4]
                len-=2;
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	3b02      	subs	r3, #2
 8000b06:	807b      	strh	r3, [r7, #2]
        while(len >1){
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d8eb      	bhi.n	8000ae6 <checksum+0x42>
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00d      	beq.n	8000b30 <checksum+0x8c>
                sum += (0xFF & *buf)<<8;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 8000b22:	e005      	b.n	8000b30 <checksum+0x8c>
                sum = (sum & 0xFFFF)+(sum >> 16);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	0c1b      	lsrs	r3, r3, #16
 8000b2c:	4413      	add	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
        while (sum>>16){
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	0c1b      	lsrs	r3, r3, #16
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f5      	bne.n	8000b24 <checksum+0x80>
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	b29b      	uxth	r3, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	4613      	mov	r3, r2
 8000b58:	71fb      	strb	r3, [r7, #7]
        uint8_t i=0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75fb      	strb	r3, [r7, #23]
        wwwport=wwwp;
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <init_ip_arp_udp_tcp+0x64>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	7013      	strb	r3, [r2, #0]
        while(i<4){
 8000b64:	e009      	b.n	8000b7a <init_ip_arp_udp_tcp+0x2e>
                ipaddr[i]=myip[i];
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	441a      	add	r2, r3
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	7811      	ldrb	r1, [r2, #0]
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <init_ip_arp_udp_tcp+0x68>)
 8000b72:	54d1      	strb	r1, [r2, r3]
                i++;
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	3301      	adds	r3, #1
 8000b78:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d9f2      	bls.n	8000b66 <init_ip_arp_udp_tcp+0x1a>
        }
        i=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8000b84:	e009      	b.n	8000b9a <init_ip_arp_udp_tcp+0x4e>
                macaddr[i]=mymac[i];
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	441a      	add	r2, r3
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	7811      	ldrb	r1, [r2, #0]
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <init_ip_arp_udp_tcp+0x6c>)
 8000b92:	54d1      	strb	r1, [r2, r3]
                i++;
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	3301      	adds	r3, #1
 8000b98:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	2b05      	cmp	r3, #5
 8000b9e:	d9f2      	bls.n	8000b86 <init_ip_arp_udp_tcp+0x3a>
        }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000044 	.word	0x20000044
 8000bb8:	2000003c 	.word	0x2000003c

08000bbc <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
        //
        if (len<41){
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	2b28      	cmp	r3, #40	; 0x28
 8000bd0:	d801      	bhi.n	8000bd6 <eth_type_is_arp_and_my_ip+0x1a>
                return(0);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e01f      	b.n	8000c16 <eth_type_is_arp_and_my_ip+0x5a>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	330c      	adds	r3, #12
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d104      	bne.n	8000bea <eth_type_is_arp_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	330d      	adds	r3, #13
 8000be4:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d011      	beq.n	8000c0e <eth_type_is_arp_and_my_ip+0x52>
                return(0);
 8000bea:	2300      	movs	r3, #0
 8000bec:	e013      	b.n	8000c16 <eth_type_is_arp_and_my_ip+0x5a>
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	3326      	adds	r3, #38	; 0x26
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4909      	ldr	r1, [pc, #36]	; (8000c24 <eth_type_is_arp_and_my_ip+0x68>)
 8000bfe:	5ccb      	ldrb	r3, [r1, r3]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d001      	beq.n	8000c08 <eth_type_is_arp_and_my_ip+0x4c>
                        return(0);
 8000c04:	2300      	movs	r3, #0
 8000c06:	e006      	b.n	8000c16 <eth_type_is_arp_and_my_ip+0x5a>
                }
                i++;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d9ec      	bls.n	8000bee <eth_type_is_arp_and_my_ip+0x32>
        }
        return(1);
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000044 	.word	0x20000044

08000c28 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
        //eth+ip+udp header is 42
        if (len<42){
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	2b29      	cmp	r3, #41	; 0x29
 8000c3c:	d801      	bhi.n	8000c42 <eth_type_is_ip_and_my_ip+0x1a>
                return(0);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e026      	b.n	8000c90 <eth_type_is_ip_and_my_ip+0x68>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V ||
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	330c      	adds	r3, #12
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d104      	bne.n	8000c56 <eth_type_is_ip_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	330d      	adds	r3, #13
 8000c50:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V ||
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <eth_type_is_ip_and_my_ip+0x32>
                return(0);
 8000c56:	2300      	movs	r3, #0
 8000c58:	e01a      	b.n	8000c90 <eth_type_is_ip_and_my_ip+0x68>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	330e      	adds	r3, #14
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b45      	cmp	r3, #69	; 0x45
 8000c62:	d011      	beq.n	8000c88 <eth_type_is_ip_and_my_ip+0x60>
                // must be IP V4 and 20 byte header
                return(0);
 8000c64:	2300      	movs	r3, #0
 8000c66:	e013      	b.n	8000c90 <eth_type_is_ip_and_my_ip+0x68>
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	331e      	adds	r3, #30
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4909      	ldr	r1, [pc, #36]	; (8000c9c <eth_type_is_ip_and_my_ip+0x74>)
 8000c78:	5ccb      	ldrb	r3, [r1, r3]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d001      	beq.n	8000c82 <eth_type_is_ip_and_my_ip+0x5a>
                        return(0);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e006      	b.n	8000c90 <eth_type_is_ip_and_my_ip+0x68>
                }
                i++;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	3301      	adds	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d9ec      	bls.n	8000c68 <eth_type_is_ip_and_my_ip+0x40>
        }
        return(1);
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000044 	.word	0x20000044

08000ca0 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8000cac:	e015      	b.n	8000cda <make_eth+0x3a>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3306      	adds	r3, #6
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	441a      	add	r2, r3
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	440b      	add	r3, r1
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	3306      	adds	r3, #6
 8000cc8:	4619      	mov	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	440b      	add	r3, r1
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <make_eth+0x50>)
 8000cd0:	5c8a      	ldrb	r2, [r1, r2]
 8000cd2:	701a      	strb	r2, [r3, #0]
                i++;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d9e6      	bls.n	8000cae <make_eth+0xe>
        }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000003c 	.word	0x2000003c

08000cf4 <fill_ip_hdr_checksum>:
		buf[ ETH_TYPE_L_P ] = ETHTYPE_IP_L_V;
}


void fill_ip_hdr_checksum(uint8_t *buf)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3318      	adds	r3, #24
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=0;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3319      	adds	r3, #25
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P]=0x40; // don't fragment
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3314      	adds	r3, #20
 8000d10:	2240      	movs	r2, #64	; 0x40
 8000d12:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3315      	adds	r3, #21
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
        buf[IP_TTL_P]=64; // ttl
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3316      	adds	r3, #22
 8000d20:	2240      	movs	r2, #64	; 0x40
 8000d22:	701a      	strb	r2, [r3, #0]
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	330e      	adds	r3, #14
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2114      	movs	r1, #20
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff feb9 	bl	8000aa4 <checksum>
 8000d32:	4603      	mov	r3, r0
 8000d34:	81fb      	strh	r3, [r7, #14]
        buf[IP_CHECKSUM_P]=ck>>8;
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3318      	adds	r3, #24
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3319      	adds	r3, #25
 8000d48:	89fa      	ldrh	r2, [r7, #14]
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	701a      	strb	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <make_ip>:
}


// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000d64:	e017      	b.n	8000d96 <make_ip+0x3e>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	331a      	adds	r3, #26
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	441a      	add	r2, r3
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	331e      	adds	r3, #30
 8000d74:	4619      	mov	r1, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	440b      	add	r3, r1
 8000d7a:	7812      	ldrb	r2, [r2, #0]
 8000d7c:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	331a      	adds	r3, #26
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	440b      	add	r3, r1
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <make_ip+0x54>)
 8000d8c:	5c8a      	ldrb	r2, [r1, r2]
 8000d8e:	701a      	strb	r2, [r3, #0]
                i++;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	3301      	adds	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d9e4      	bls.n	8000d66 <make_ip+0xe>
        }
        fill_ip_hdr_checksum(buf);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ffa9 	bl	8000cf4 <fill_ip_hdr_checksum>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000044 	.word	0x20000044

08000db0 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	807b      	strh	r3, [r7, #2]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	707b      	strb	r3, [r7, #1]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	703b      	strb	r3, [r7, #0]
        uint8_t i=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
        uint8_t tseq;
        while(i<2){
 8000dce:	e015      	b.n	8000dfc <make_tcphead+0x4c>
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3322      	adds	r3, #34	; 0x22
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	441a      	add	r2, r3
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	3324      	adds	r3, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	440b      	add	r3, r1
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	701a      	strb	r2, [r3, #0]
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	3322      	adds	r3, #34	; 0x22
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
                i++;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
        while(i<2){
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d9e6      	bls.n	8000dd0 <make_tcphead+0x20>
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3323      	adds	r3, #35	; 0x23
 8000e06:	4a3c      	ldr	r2, [pc, #240]	; (8000ef8 <make_tcphead+0x148>)
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
        i=4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	73fb      	strb	r3, [r7, #15]
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 8000e10:	e02b      	b.n	8000e6a <make_tcphead+0xba>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3325      	adds	r3, #37	; 0x25
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	4413      	add	r3, r2
 8000e22:	807b      	strh	r3, [r7, #2]
                tseq=buf[TCP_SEQACK_H_P+i-1];
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	3329      	adds	r3, #41	; 0x29
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	73bb      	strb	r3, [r7, #14]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	3329      	adds	r3, #41	; 0x29
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	887a      	ldrh	r2, [r7, #2]
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
                if (cp_seq){
 8000e3e:	783b      	ldrb	r3, [r7, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <make_tcphead+0xa2>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	3325      	adds	r3, #37	; 0x25
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	7bba      	ldrb	r2, [r7, #14]
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e005      	b.n	8000e5e <make_tcphead+0xae>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3325      	adds	r3, #37	; 0x25
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
                }
                rel_ack_num=rel_ack_num>>8;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	807b      	strh	r3, [r7, #2]
                i--;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
        while(i>0){
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1d0      	bne.n	8000e12 <make_tcphead+0x62>
        }
        if (cp_seq==0){
 8000e70:	783b      	ldrb	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <make_tcphead+0xf4>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3326      	adds	r3, #38	; 0x26
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
                buf[TCP_SEQ_H_P+1]= 0;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3327      	adds	r3, #39	; 0x27
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
                // we step only the second byte, this allows us to send packts
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3328      	adds	r3, #40	; 0x28
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <make_tcphead+0x14c>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	701a      	strb	r2, [r3, #0]
                buf[TCP_SEQ_H_P+3]= 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3329      	adds	r3, #41	; 0x29
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <make_tcphead+0x14c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <make_tcphead+0x14c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3332      	adds	r3, #50	; 0x32
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3333      	adds	r3, #51	; 0x33
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d014      	beq.n	8000ee4 <make_tcphead+0x134>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3336      	adds	r3, #54	; 0x36
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
                buf[TCP_OPTIONS_P+1]=4;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3337      	adds	r3, #55	; 0x37
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	701a      	strb	r2, [r3, #0]
                buf[TCP_OPTIONS_P+2]=0x05;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3338      	adds	r3, #56	; 0x38
 8000ece:	2205      	movs	r2, #5
 8000ed0:	701a      	strb	r2, [r3, #0]
                buf[TCP_OPTIONS_P+3]=0x80;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3339      	adds	r3, #57	; 0x39
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	701a      	strb	r2, [r3, #0]
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	332e      	adds	r3, #46	; 0x2e
 8000ede:	2260      	movs	r2, #96	; 0x60
 8000ee0:	701a      	strb	r2, [r3, #0]
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
        }
}
 8000ee2:	e003      	b.n	8000eec <make_tcphead+0x13c>
                buf[TCP_HEADER_LEN_P]=0x50;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	332e      	adds	r3, #46	; 0x2e
 8000ee8:	2250      	movs	r2, #80	; 0x50
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000001 	.word	0x20000001

08000f00 <make_arp_answer_from_request>:




void make_arp_answer_from_request(uint8_t *buf)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
        //
        make_eth(buf);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fec7 	bl	8000ca0 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3314      	adds	r3, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3315      	adds	r3, #21
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
        // fill the mac addresses:
        while(i<6){
 8000f22:	e017      	b.n	8000f54 <make_arp_answer_from_request+0x54>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	3316      	adds	r3, #22
 8000f28:	461a      	mov	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3320      	adds	r3, #32
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	440b      	add	r3, r1
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3316      	adds	r3, #22
 8000f42:	4619      	mov	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	440b      	add	r3, r1
 8000f48:	4917      	ldr	r1, [pc, #92]	; (8000fa8 <make_arp_answer_from_request+0xa8>)
 8000f4a:	5c8a      	ldrb	r2, [r1, r2]
 8000f4c:	701a      	strb	r2, [r3, #0]
                i++;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d9e4      	bls.n	8000f24 <make_arp_answer_from_request+0x24>
        }
        i=0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000f5e:	e017      	b.n	8000f90 <make_arp_answer_from_request+0x90>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	331c      	adds	r3, #28
 8000f64:	461a      	mov	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	441a      	add	r2, r3
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3326      	adds	r3, #38	; 0x26
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	440b      	add	r3, r1
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	331c      	adds	r3, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	440b      	add	r3, r1
 8000f84:	4909      	ldr	r1, [pc, #36]	; (8000fac <make_arp_answer_from_request+0xac>)
 8000f86:	5c8a      	ldrb	r2, [r1, r2]
 8000f88:	701a      	strb	r2, [r3, #0]
                i++;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d9e4      	bls.n	8000f60 <make_arp_answer_from_request+0x60>
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	202a      	movs	r0, #42	; 0x2a
 8000f9a:	f7ff fcb7 	bl	800090c <enc28j60PacketSend>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000003c 	.word	0x2000003c
 8000fac:	20000044 	.word	0x20000044

08000fb0 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
        make_eth(buf);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fe6f 	bl	8000ca0 <make_eth>
        make_ip(buf);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fec8 	bl	8000d58 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3322      	adds	r3, #34	; 0x22
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3324      	adds	r3, #36	; 0x24
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2bf7      	cmp	r3, #247	; 0xf7
 8000fd8:	d905      	bls.n	8000fe6 <make_echo_reply_from_request+0x36>
                buf[ICMP_CHECKSUM_P+1]++;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3325      	adds	r3, #37	; 0x25
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	3201      	adds	r2, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3324      	adds	r3, #36	; 0x24
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3324      	adds	r3, #36	; 0x24
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
        //
        enc28j60PacketSend(len,buf);
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc86 	bl	800090c <enc28j60PacketSend>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <make_tcp_synack_from_syn>:
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

void make_tcp_synack_from_syn(uint8_t *buf)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        make_eth(buf);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fe45 	bl	8000ca0 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3310      	adds	r3, #16
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3311      	adds	r3, #17
 8001022:	222c      	movs	r2, #44	; 0x2c
 8001024:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fe96 	bl	8000d58 <make_ip>
        buf[TCP_FLAG_P]=TCP_FLAGS_SYNACK_V;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	332f      	adds	r3, #47	; 0x2f
 8001030:	2212      	movs	r2, #18
 8001032:	701a      	strb	r2, [r3, #0]
        make_tcphead(buf,1,1,0);
 8001034:	2300      	movs	r3, #0
 8001036:	2201      	movs	r2, #1
 8001038:	2101      	movs	r1, #1
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff feb8 	bl	8000db0 <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	331a      	adds	r3, #26
 8001044:	2202      	movs	r2, #2
 8001046:	2120      	movs	r1, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fd2b 	bl	8000aa4 <checksum>
 800104e:	4603      	mov	r3, r0
 8001050:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	b29a      	uxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3332      	adds	r3, #50	; 0x32
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3333      	adds	r3, #51	; 0x33
 8001064:	89fa      	ldrh	r2, [r7, #14]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	203a      	movs	r0, #58	; 0x3a
 800106e:	f7ff fc4d 	bl	800090c <enc28j60PacketSend>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <get_tcp_data_pointer>:

// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
        if (info_data_len){
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <get_tcp_data_pointer+0x28>)
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <get_tcp_data_pointer+0x1c>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <get_tcp_data_pointer+0x2c>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	b29b      	uxth	r3, r3
 8001092:	3322      	adds	r3, #34	; 0x22
 8001094:	b29b      	uxth	r3, r3
 8001096:	e000      	b.n	800109a <get_tcp_data_pointer+0x1e>
        }else{
                return(0);
 8001098:	2300      	movs	r3, #0
        }
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	2000004a 	.word	0x2000004a
 80010a8:	20000048 	.word	0x20000048

080010ac <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
        info_data_len=(buf[IP_TOTLEN_H_P]<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3310      	adds	r3, #16
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3311      	adds	r3, #17
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <init_len_info+0x80>)
 80010cc:	801a      	strh	r2, [r3, #0]
        info_data_len-=IP_HEADER_LEN;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <init_len_info+0x80>)
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b14      	subs	r3, #20
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <init_len_info+0x80>)
 80010de:	801a      	strh	r2, [r3, #0]
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	332e      	adds	r3, #46	; 0x2e
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <init_len_info+0x84>)
 80010f4:	801a      	strh	r2, [r3, #0]
        info_data_len-=info_hdr_len;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <init_len_info+0x80>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <init_len_info+0x84>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	b29b      	uxth	r3, r3
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <init_len_info+0x80>)
 800110e:	801a      	strh	r2, [r3, #0]
        if (info_data_len<=0){
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <init_len_info+0x80>)
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	dc02      	bgt.n	8001120 <init_len_info+0x74>
                info_data_len=0;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <init_len_info+0x80>)
 800111c:	2200      	movs	r2, #0
 800111e:	801a      	strh	r2, [r3, #0]
        }
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	2000004a 	.word	0x2000004a
 8001130:	20000048 	.word	0x20000048

08001134 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	460b      	mov	r3, r1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	817b      	strh	r3, [r7, #10]
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
 8001142:	e00d      	b.n	8001160 <fill_tcp_data+0x2c>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	3336      	adds	r3, #54	; 0x36
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	701a      	strb	r2, [r3, #0]
                pos++;
 8001154:	897b      	ldrh	r3, [r7, #10]
 8001156:	3301      	adds	r3, #1
 8001158:	817b      	strh	r3, [r7, #10]
                s++;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
        while (*s) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ed      	bne.n	8001144 <fill_tcp_data+0x10>
        }
        return(pos);
 8001168:	897b      	ldrh	r3, [r7, #10]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
        uint16_t j;
        make_eth(buf);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fd8d 	bl	8000ca0 <make_eth>
        // fill the header:
        buf[TCP_FLAG_P]=TCP_FLAG_ACK_V;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	332f      	adds	r3, #47	; 0x2f
 800118a:	2210      	movs	r2, #16
 800118c:	701a      	strb	r2, [r3, #0]
        if (info_data_len==0){
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <make_tcp_ack_from_any+0x9c>)
 8001190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <make_tcp_ack_from_any+0x2e>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
 8001198:	2301      	movs	r3, #1
 800119a:	2200      	movs	r2, #0
 800119c:	2101      	movs	r1, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe06 	bl	8000db0 <make_tcphead>
 80011a4:	e008      	b.n	80011b8 <make_tcp_ack_from_any+0x40>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <make_tcp_ack_from_any+0x9c>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	2301      	movs	r3, #1
 80011b0:	2200      	movs	r2, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fdfc 	bl	8000db0 <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options)
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 80011b8:	2328      	movs	r3, #40	; 0x28
 80011ba:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3310      	adds	r3, #16
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3311      	adds	r3, #17
 80011ce:	89fa      	ldrh	r2, [r7, #14]
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fdbf 	bl	8000d58 <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	331a      	adds	r3, #26
 80011de:	2202      	movs	r2, #2
 80011e0:	211c      	movs	r1, #28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fc5e 	bl	8000aa4 <checksum>
 80011e8:	4603      	mov	r3, r0
 80011ea:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3332      	adds	r3, #50	; 0x32
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3333      	adds	r3, #51	; 0x33
 80011fe:	89fa      	ldrh	r2, [r7, #14]
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	2036      	movs	r0, #54	; 0x36
 8001208:	f7ff fb80 	bl	800090c <enc28j60PacketSend>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000004a 	.word	0x2000004a

08001218 <make_tcp_ack_with_data_single>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data_single(uint8_t *buf,uint16_t dlen)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAG_P]=TCP_FLAG_ACK_V|TCP_FLAG_PUSH_V|TCP_FLAG_FIN_V;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	332f      	adds	r3, #47	; 0x2f
 8001228:	2219      	movs	r2, #25
 800122a:	701a      	strb	r2, [r3, #0]

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	3328      	adds	r3, #40	; 0x28
 8001230:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3310      	adds	r3, #16
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3311      	adds	r3, #17
 8001244:	89fa      	ldrh	r2, [r7, #14]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]
        fill_ip_hdr_checksum(buf);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fd52 	bl	8000cf4 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3332      	adds	r3, #50	; 0x32
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3333      	adds	r3, #51	; 0x33
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f103 001a 	add.w	r0, r3, #26
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	331c      	adds	r3, #28
 800126a:	b29b      	uxth	r3, r3
 800126c:	2202      	movs	r2, #2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc18 	bl	8000aa4 <checksum>
 8001274:	4603      	mov	r3, r0
 8001276:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	b29a      	uxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3332      	adds	r3, #50	; 0x32
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3333      	adds	r3, #51	; 0x33
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	3336      	adds	r3, #54	; 0x36
 8001294:	b29b      	uxth	r3, r3
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fb37 	bl	800090c <enc28j60PacketSend>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f000 fe9c 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f828 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f000 fa04 	bl	80016c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b8:	f000 f914 	bl	80014e4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012bc:	f000 f88a 	bl	80013d4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80012c0:	f000 f9d4 	bl	800166c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80012c4:	f000 f8d8 	bl	8001478 <MX_SPI1_Init>
  MX_TIM3_Init();
 80012c8:	f000 f982 	bl	80015d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <main+0x48>)
 80012ce:	f002 fff5 	bl	80042bc <HAL_TIM_Base_Start>
  setup_server(mac, ip, port);
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <main+0x4c>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <main+0x50>)
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <main+0x54>)
 80012dc:	f000 fcf0 	bl	8001cc0 <setup_server>

  memset(&writeValue,0,sizeof(writeValue));
 80012e0:	223c      	movs	r2, #60	; 0x3c
 80012e2:	2100      	movs	r1, #0
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <main+0x58>)
 80012e6:	f004 fb6d 	bl	80059c4 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  server();
 80012ea:	f000 fa95 	bl	8001818 <server>
 80012ee:	e7fc      	b.n	80012ea <main+0x42>
 80012f0:	200007c4 	.word	0x200007c4
 80012f4:	20000002 	.word	0x20000002
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000004 	.word	0x20000004
 8001300:	20000784 	.word	0x20000784

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	2230      	movs	r2, #48	; 0x30
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fb56 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <SystemClock_Config+0xc8>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a26      	ldr	r2, [pc, #152]	; (80013cc <SystemClock_Config+0xc8>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <SystemClock_Config+0xc8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <SystemClock_Config+0xcc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <SystemClock_Config+0xcc>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <SystemClock_Config+0xcc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001374:	2308      	movs	r3, #8
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001378:	2390      	movs	r3, #144	; 0x90
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001380:	2304      	movs	r3, #4
 8001382:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fcf9 	bl	8002d80 <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001394:	f000 fa76 	bl	8001884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001398:	230f      	movs	r3, #15
 800139a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	2302      	movs	r3, #2
 800139e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2102      	movs	r1, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 ff5b 	bl	8003270 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013c0:	f000 fa60 	bl	8001884 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3750      	adds	r7, #80	; 0x50
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_ADC1_Init+0x98>)
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <MX_ADC1_Init+0x9c>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC1_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_ADC1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_ADC1_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_ADC1_Init+0x98>)
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_ADC1_Init+0xa0>)
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_ADC1_Init+0x98>)
 8001420:	2201      	movs	r2, #1
 8001422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_ADC1_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_ADC1_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001432:	480e      	ldr	r0, [pc, #56]	; (800146c <MX_ADC1_Init+0x98>)
 8001434:	f000 fe3e 	bl	80020b4 <HAL_ADC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800143e:	f000 fa21 	bl	8001884 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001442:	2301      	movs	r3, #1
 8001444:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_ADC1_Init+0x98>)
 8001454:	f000 ffd4 	bl	8002400 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800145e:	f000 fa11 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000810 	.word	0x20000810
 8001470:	40012000 	.word	0x40012000
 8001474:	0f000001 	.word	0x0f000001

08001478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_SPI1_Init+0x64>)
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <MX_SPI1_Init+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_SPI1_Init+0x64>)
 8001484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_SPI1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_SPI1_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_SPI1_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_SPI1_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_SPI1_Init+0x64>)
 80014a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_SPI1_Init+0x64>)
 80014ac:	2208      	movs	r2, #8
 80014ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_SPI1_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_SPI1_Init+0x64>)
 80014c4:	220a      	movs	r2, #10
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_SPI1_Init+0x64>)
 80014ca:	f002 f8ff 	bl	80036cc <HAL_SPI_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014d4:	f000 f9d6 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000860 	.word	0x20000860
 80014e0:	40013000 	.word	0x40013000

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_TIM2_Init+0xe8>)
 8001516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 800151c:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <MX_TIM2_Init+0xe8>)
 800151e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001522:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <MX_TIM2_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <MX_TIM2_Init+0xe8>)
 800152c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001530:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <MX_TIM2_Init+0xe8>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_TIM2_Init+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153e:	4823      	ldr	r0, [pc, #140]	; (80015cc <MX_TIM2_Init+0xe8>)
 8001540:	f002 fe6c 	bl	800421c <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800154a:	f000 f99b 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001558:	4619      	mov	r1, r3
 800155a:	481c      	ldr	r0, [pc, #112]	; (80015cc <MX_TIM2_Init+0xe8>)
 800155c:	f003 f9a6 	bl	80048ac <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001566:	f000 f98d 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <MX_TIM2_Init+0xe8>)
 800156c:	f002 ff7e 	bl	800446c <HAL_TIM_PWM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001576:	f000 f985 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4619      	mov	r1, r3
 8001588:	4810      	ldr	r0, [pc, #64]	; (80015cc <MX_TIM2_Init+0xe8>)
 800158a:	f003 fd65 	bl	8005058 <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001594:	f000 f976 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_TIM2_Init+0xe8>)
 80015b0:	f003 f8be 	bl	8004730 <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015ba:	f000 f963 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <MX_TIM2_Init+0xe8>)
 80015c0:	f000 fa5e 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 80015c4:	bf00      	nop
 80015c6:	3738      	adds	r7, #56	; 0x38
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200008b8 	.word	0x200008b8

080015d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM3_Init+0x94>)
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <MX_TIM3_Init+0x98>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_TIM3_Init+0x94>)
 80015f4:	2247      	movs	r2, #71	; 0x47
 80015f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM3_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_TIM3_Init+0x94>)
 8001600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001604:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_TIM3_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_TIM3_Init+0x94>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <MX_TIM3_Init+0x94>)
 8001614:	f002 fe02 	bl	800421c <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800161e:	f000 f931 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM3_Init+0x94>)
 8001630:	f003 f93c 	bl	80048ac <HAL_TIM_ConfigClockSource>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800163a:	f000 f923 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_TIM3_Init+0x94>)
 800164c:	f003 fd04 	bl	8005058 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001656:	f000 f915 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200007c4 	.word	0x200007c4
 8001668:	40000400 	.word	0x40000400

0800166c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_USART3_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 80016a4:	f003 fd68 	bl	8005178 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f8e9 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000740 	.word	0x20000740
 80016bc:	40004800 	.word	0x40004800

080016c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <MX_GPIO_Init+0xf8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <MX_GPIO_Init+0xf8>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <MX_GPIO_Init+0xf8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <MX_GPIO_Init+0xf8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <MX_GPIO_Init+0xf8>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <MX_GPIO_Init+0xf8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MX_GPIO_Init+0xf8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <MX_GPIO_Init+0xf8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2110      	movs	r1, #16
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <MX_GPIO_Init+0xfc>)
 8001768:	f001 faf0 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2181      	movs	r1, #129	; 0x81
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_GPIO_Init+0x100>)
 8001772:	f001 faeb 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001776:	2310      	movs	r3, #16
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <MX_GPIO_Init+0xfc>)
 800178e:	f001 f941 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001792:	2381      	movs	r3, #129	; 0x81
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_GPIO_Init+0x100>)
 80017aa:	f001 f933 	bl	8002a14 <HAL_GPIO_Init>

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <HAL_ADC_ConvCpltCallback>:
	  HAL_ADC_Start_IT(&hadc1);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fdf5 	bl	80023bc <HAL_ADC_GetValue>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_ADC_ConvCpltCallback+0x4c>)
 80017d8:	801a      	strh	r2, [r3, #0]
	if( adc_value < 2800 && adc_value >10){
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_ADC_ConvCpltCallback+0x4c>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80017e2:	d207      	bcs.n	80017f4 <HAL_ADC_ConvCpltCallback+0x30>
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_ADC_ConvCpltCallback+0x4c>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	2b0a      	cmp	r3, #10
 80017ea:	d903      	bls.n	80017f4 <HAL_ADC_ConvCpltCallback+0x30>
		flag = 1;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_ADC_ConvCpltCallback+0x50>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
	}
	else if(adc_value > 3100){
		flag = 2;
	}
}
 80017f2:	e008      	b.n	8001806 <HAL_ADC_ConvCpltCallback+0x42>
	else if(adc_value > 3100){
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_ADC_ConvCpltCallback+0x4c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d902      	bls.n	8001806 <HAL_ADC_ConvCpltCallback+0x42>
		flag = 2;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_ADC_ConvCpltCallback+0x50>)
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000080c 	.word	0x2000080c
 8001814:	2000004c 	.word	0x2000004c

08001818 <server>:

	  respond_single();
}


void server(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	request = serviceRequest();
 800181c:	f000 fa9e 	bl	8001d5c <serviceRequest>
 8001820:	4603      	mov	r3, r0
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <server+0x38>)
 8001824:	6013      	str	r3, [r2, #0]
//	gerarHtml();
//	if(request != NULL){
//		gerarHtml();
//	}
	if(request != NULL){
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <server+0x38>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10a      	bne.n	8001844 <server+0x2c>
	}
	else{
		print_text("<H1>Arduino</H1>");
 800182e:	4809      	ldr	r0, [pc, #36]	; (8001854 <server+0x3c>)
 8001830:	f000 fb72 	bl	8001f18 <print_text>
		print_text("<H2>");
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <server+0x40>)
 8001836:	f000 fb6f 	bl	8001f18 <print_text>
		print_text("</H2>");
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <server+0x44>)
 800183c:	f000 fb6c 	bl	8001f18 <print_text>
		respond_single();
 8001840:	f000 fb94 	bl	8001f6c <respond_single>
//		gerarHtml();
	}
	HAL_Delay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f000 fc11 	bl	800206c <HAL_Delay>
//
//		}
//
//	}
//	Delayms(100);
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000085c 	.word	0x2000085c
 8001854:	08005d44 	.word	0x08005d44
 8001858:	08005d58 	.word	0x08005d58
 800185c:	08005d60 	.word	0x08005d60

08001860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001872:	f000 fbdb 	bl	800202c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40001000 	.word	0x40001000

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_ADC_MspInit+0x8c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12f      	bne.n	8001962 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_ADC_MspInit+0x90>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_ADC_MspInit+0x90>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800193a:	2302      	movs	r3, #2
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	2303      	movs	r3, #3
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <HAL_ADC_MspInit+0x94>)
 800194e:	f001 f861 	bl	8002a14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2012      	movs	r0, #18
 8001958:	f001 f832 	bl	80029c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800195c:	2012      	movs	r0, #18
 800195e:	f001 f84b 	bl	80029f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40012000 	.word	0x40012000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a19      	ldr	r2, [pc, #100]	; (80019fc <HAL_SPI_MspInit+0x84>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12b      	bne.n	80019f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_SPI_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019d2:	23e0      	movs	r3, #224	; 0xe0
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e2:	2305      	movs	r3, #5
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_SPI_MspInit+0x8c>)
 80019ee:	f001 f811 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40013000 	.word	0x40013000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d116      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_TIM_Base_MspInit+0x70>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_TIM_Base_MspInit+0x70>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_TIM_Base_MspInit+0x70>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f000 ffc0 	bl	80029c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f000 ffd9 	bl	80029f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a46:	e012      	b.n	8001a6e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0x74>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_TIM_Base_MspInit+0x70>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_TIM_Base_MspInit+0x70>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_TIM_Base_MspInit+0x70>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40000400 	.word	0x40000400

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d11d      	bne.n	8001ade <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001ada:	f000 ff9b 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000

08001af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12c      	bne.n	8001b6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b68:	f000 ff54 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40004800 	.word	0x40004800
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020400 	.word	0x40020400

08001b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	2036      	movs	r0, #54	; 0x36
 8001b96:	f000 ff13 	bl	80029c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b9a:	2036      	movs	r0, #54	; 0x36
 8001b9c:	f000 ff2c 	bl	80029f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <HAL_InitTick+0xa4>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_InitTick+0xa4>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_InitTick+0xa4>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bbc:	f107 0210 	add.w	r2, r7, #16
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fd4e 	bl	8003668 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bcc:	f001 fd24 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <HAL_InitTick+0xa8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	3b01      	subs	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_InitTick+0xac>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <HAL_InitTick+0xb0>)
 8001be8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_InitTick+0xac>)
 8001bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_InitTick+0xac>)
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_InitTick+0xac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_InitTick+0xac>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c04:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_InitTick+0xac>)
 8001c06:	f002 fb09 	bl	800421c <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d104      	bne.n	8001c1a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c10:	4806      	ldr	r0, [pc, #24]	; (8001c2c <HAL_InitTick+0xac>)
 8001c12:	f002 fbbb 	bl	800438c <HAL_TIM_Base_Start_IT>
 8001c16:	4603      	mov	r3, r0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3730      	adds	r7, #48	; 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	20000900 	.word	0x20000900
 8001c30:	40001000 	.word	0x40001000

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <NMI_Handler+0x4>

08001c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <MemManage_Handler+0x4>

08001c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <ADC_IRQHandler+0x10>)
 8001c66:	f000 fa68 	bl	800213a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000810 	.word	0x20000810

08001c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x10>)
 8001c7a:	f002 fc50 	bl	800451e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200008b8 	.word	0x200008b8

08001c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM6_DAC_IRQHandler+0x10>)
 8001c8e:	f002 fc46 	bl	800451e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000900 	.word	0x20000900

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <setup_server>:
/******************************************************************************
 * User API
 ******************************************************************************/

void setup_server(uint8_t macAddress[], uint8_t ipAddress[], uint16_t port)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	80fb      	strh	r3, [r7, #6]
	_port = port;
 8001cce:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <setup_server+0x98>)
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	8013      	strh	r3, [r2, #0]
    enc28j60Init(macAddress);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7fe fd61 	bl	800079c <enc28j60Init>
    enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f7fe fd4d 	bl	800077a <enc28j60clkout>
    HAL_Delay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f000 f9c3 	bl	800206c <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x880);
 8001ce6:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8001cea:	2014      	movs	r0, #20
 8001cec:	f7fe fd19 	bl	8000722 <enc28j60PhyWrite>
	HAL_Delay(500);
 8001cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cf4:	f000 f9ba 	bl	800206c <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x990);
 8001cf8:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8001cfc:	2014      	movs	r0, #20
 8001cfe:	f7fe fd10 	bl	8000722 <enc28j60PhyWrite>
	HAL_Delay(500);
 8001d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d06:	f000 f9b1 	bl	800206c <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x880);
 8001d0a:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8001d0e:	2014      	movs	r0, #20
 8001d10:	f7fe fd07 	bl	8000722 <enc28j60PhyWrite>
	HAL_Delay(500);
 8001d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d18:	f000 f9a8 	bl	800206c <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x990);
 8001d1c:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8001d20:	2014      	movs	r0, #20
 8001d22:	f7fe fcfe 	bl	8000722 <enc28j60PhyWrite>
	HAL_Delay(500);
 8001d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2a:	f000 f99f 	bl	800206c <HAL_Delay>
    enc28j60PhyWrite(PHLCON,0x476);
 8001d2e:	f240 4176 	movw	r1, #1142	; 0x476
 8001d32:	2014      	movs	r0, #20
 8001d34:	f7fe fcf5 	bl	8000722 <enc28j60PhyWrite>
    HAL_Delay(500);
 8001d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d3c:	f000 f996 	bl	800206c <HAL_Delay>
    init_ip_arp_udp_tcp(macAddress, ipAddress, _port);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <setup_server+0x98>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7fe fefe 	bl	8000b4c <init_ip_arp_udp_tcp>
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200007c2 	.word	0x200007c2

08001d5c <serviceRequest>:


char* serviceRequest()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
	uint16_t dat_p;
	plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
 8001d62:	4965      	ldr	r1, [pc, #404]	; (8001ef8 <serviceRequest+0x19c>)
 8001d64:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d68:	f7fe fe10 	bl	800098c <enc28j60PacketReceive>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b62      	ldr	r3, [pc, #392]	; (8001efc <serviceRequest+0x1a0>)
 8001d72:	801a      	strh	r2, [r3, #0]

	/*plen will ne unequal to zero if there is a valid packet (without crc error) */
	if(plen!=0)
 8001d74:	4b61      	ldr	r3, [pc, #388]	; (8001efc <serviceRequest+0x1a0>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80b9 	beq.w	8001ef0 <serviceRequest+0x194>
	{
		// arp is broadcast if unknown but a host may also verify the mac address by sending it to a unicast address.
	    if (eth_type_is_arp_and_my_ip(buf, plen))
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <serviceRequest+0x1a0>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	485c      	ldr	r0, [pc, #368]	; (8001ef8 <serviceRequest+0x19c>)
 8001d86:	f7fe ff19 	bl	8000bbc <eth_type_is_arp_and_my_ip>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <serviceRequest+0x3e>
		{
	      make_arp_answer_from_request(buf);
 8001d90:	4859      	ldr	r0, [pc, #356]	; (8001ef8 <serviceRequest+0x19c>)
 8001d92:	f7ff f8b5 	bl	8000f00 <make_arp_answer_from_request>
	      return 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e0aa      	b.n	8001ef0 <serviceRequest+0x194>
	    }
	    // check if ip packets are for us:
	    if (eth_type_is_ip_and_my_ip(buf, plen) == 0)
 8001d9a:	4b58      	ldr	r3, [pc, #352]	; (8001efc <serviceRequest+0x1a0>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4855      	ldr	r0, [pc, #340]	; (8001ef8 <serviceRequest+0x19c>)
 8001da2:	f7fe ff41 	bl	8000c28 <eth_type_is_ip_and_my_ip>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <serviceRequest+0x54>
	 	{
	      return 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e09f      	b.n	8001ef0 <serviceRequest+0x194>
	    }
	    if (buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
 8001db0:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <serviceRequest+0x19c>)
 8001db2:	7ddb      	ldrb	r3, [r3, #23]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10c      	bne.n	8001dd2 <serviceRequest+0x76>
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <serviceRequest+0x19c>)
 8001dba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d107      	bne.n	8001dd2 <serviceRequest+0x76>
		{
	      make_echo_reply_from_request(buf, plen);
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <serviceRequest+0x1a0>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	484b      	ldr	r0, [pc, #300]	; (8001ef8 <serviceRequest+0x19c>)
 8001dca:	f7ff f8f1 	bl	8000fb0 <make_echo_reply_from_request>
	      return 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e08e      	b.n	8001ef0 <serviceRequest+0x194>
	    }
	    // tcp port www start, compare only the lower byte
	    if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P] == _port)
 8001dd2:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <serviceRequest+0x19c>)
 8001dd4:	7ddb      	ldrb	r3, [r3, #23]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	f040 808a 	bne.w	8001ef0 <serviceRequest+0x194>
 8001ddc:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <serviceRequest+0x19c>)
 8001dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 8084 	bne.w	8001ef0 <serviceRequest+0x194>
 8001de8:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <serviceRequest+0x19c>)
 8001dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <serviceRequest+0x1a4>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d17b      	bne.n	8001ef0 <serviceRequest+0x194>
		{
	    	if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <serviceRequest+0x19c>)
 8001dfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <serviceRequest+0xb4>
			{
	         	make_tcp_synack_from_syn(buf); // make_tcp_synack_from_syn does already send the syn,ack
 8001e06:	483c      	ldr	r0, [pc, #240]	; (8001ef8 <serviceRequest+0x19c>)
 8001e08:	f7ff f8fe 	bl	8001008 <make_tcp_synack_from_syn>
	         	return 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e06f      	b.n	8001ef0 <serviceRequest+0x194>
	      	}
	      	if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <serviceRequest+0x19c>)
 8001e12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d068      	beq.n	8001ef0 <serviceRequest+0x194>
			{
	        	init_len_info(buf); // init some data structures
 8001e1e:	4836      	ldr	r0, [pc, #216]	; (8001ef8 <serviceRequest+0x19c>)
 8001e20:	f7ff f944 	bl	80010ac <init_len_info>
	        	dat_p=get_tcp_data_pointer();
 8001e24:	f7ff f92a 	bl	800107c <get_tcp_data_pointer>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	807b      	strh	r3, [r7, #2]
	        	if (dat_p==0)
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10b      	bne.n	8001e4a <serviceRequest+0xee>
				{ // we can possibly have no data, just ack:
	          		if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <serviceRequest+0x19c>)
 8001e34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <serviceRequest+0xea>
					{
	            		make_tcp_ack_from_any(buf);
 8001e40:	482d      	ldr	r0, [pc, #180]	; (8001ef8 <serviceRequest+0x19c>)
 8001e42:	f7ff f999 	bl	8001178 <make_tcp_ack_from_any>
	          		}
	          		return 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e052      	b.n	8001ef0 <serviceRequest+0x194>
	        	}
	        	//Verfica se n�o recebeu GET
	        	if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0)
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <serviceRequest+0x19c>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	482b      	ldr	r0, [pc, #172]	; (8001f04 <serviceRequest+0x1a8>)
 8001e56:	f003 fdbd 	bl	80059d4 <strncmp>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <serviceRequest+0x130>
				{
	          		// head, post and other methods for possible status codes see:
	            	// http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
	            	plen=fill_tcp_data(buf,0,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>");
 8001e60:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <serviceRequest+0x1ac>)
 8001e62:	2100      	movs	r1, #0
 8001e64:	4824      	ldr	r0, [pc, #144]	; (8001ef8 <serviceRequest+0x19c>)
 8001e66:	f7ff f965 	bl	8001134 <fill_tcp_data>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <serviceRequest+0x1a0>)
 8001e70:	801a      	strh	r2, [r3, #0]
					plen=fill_tcp_data(buf,plen,"<h1>A</h1>");
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <serviceRequest+0x1a0>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <serviceRequest+0x1b0>)
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481f      	ldr	r0, [pc, #124]	; (8001ef8 <serviceRequest+0x19c>)
 8001e7c:	f7ff f95a 	bl	8001134 <fill_tcp_data>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <serviceRequest+0x1a0>)
 8001e86:	801a      	strh	r2, [r3, #0]
					respond_single();
 8001e88:	f000 f870 	bl	8001f6c <respond_single>
	        	}
	        	//Verifica se recebeu GET + request action
	 			if (strncmp("/",(char *)&(buf[dat_p+4]),1)==0) // was "/ " and 2
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <serviceRequest+0x19c>)
 8001e92:	4413      	add	r3, r2
 8001e94:	2201      	movs	r2, #1
 8001e96:	4619      	mov	r1, r3
 8001e98:	481d      	ldr	r0, [pc, #116]	; (8001f10 <serviceRequest+0x1b4>)
 8001e9a:	f003 fd9b 	bl	80059d4 <strncmp>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d125      	bne.n	8001ef0 <serviceRequest+0x194>
				{
					// Copy the request action before we overwrite it with the response
					int i = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
					while (buf[dat_p+5+i] != ' ' && i < STR_BUFFER_SIZE)
 8001ea8:	e00d      	b.n	8001ec6 <serviceRequest+0x16a>
					{
						strbuf[i] = buf[dat_p+5+i];
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	1d5a      	adds	r2, r3, #5
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <serviceRequest+0x19c>)
 8001eb4:	5cd1      	ldrb	r1, [r2, r3]
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <serviceRequest+0x1b8>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	701a      	strb	r2, [r3, #0]
						i++;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
					while (buf[dat_p+5+i] != ' ' && i < STR_BUFFER_SIZE)
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	1d5a      	adds	r2, r3, #5
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <serviceRequest+0x19c>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d002      	beq.n	8001edc <serviceRequest+0x180>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eda:	dde6      	ble.n	8001eaa <serviceRequest+0x14e>
					}
					strbuf[i] = '\0';
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <serviceRequest+0x1b8>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
					//plen=fill_tcp_data(buf,0,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
					//plen=fill_tcp_data(buf,0,"HTTP/1.0 200 OK\r\nContent-Type: application/octet-stream\r\n\r\n");
					plen = 0;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <serviceRequest+0x1a0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	801a      	strh	r2, [r3, #0]
					return (char*)strbuf;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <serviceRequest+0x1b8>)
 8001eee:	e7ff      	b.n	8001ef0 <serviceRequest+0x194>
	         	}
	      }
		}
	}
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000050 	.word	0x20000050
 8001efc:	20000948 	.word	0x20000948
 8001f00:	200007c2 	.word	0x200007c2
 8001f04:	08005d68 	.word	0x08005d68
 8001f08:	08005d70 	.word	0x08005d70
 8001f0c:	08005dac 	.word	0x08005dac
 8001f10:	08005db8 	.word	0x08005db8
 8001f14:	20000630 	.word	0x20000630

08001f18 <print_text>:


void print_text(char* text)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	int j = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  	while (text[j])
 8001f24:	e011      	b.n	8001f4a <print_text+0x32>
	{
    	buf[TCP_CHECKSUM_L_P+3+plen]=text[j++];
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	60fa      	str	r2, [r7, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	441a      	add	r2, r3
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <print_text+0x4c>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	3336      	adds	r3, #54	; 0x36
 8001f38:	7811      	ldrb	r1, [r2, #0]
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <print_text+0x50>)
 8001f3c:	54d1      	strb	r1, [r2, r3]
    	plen++;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <print_text+0x4c>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <print_text+0x4c>)
 8001f48:	801a      	strh	r2, [r3, #0]
  	while (text[j])
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e7      	bne.n	8001f26 <print_text+0xe>
  	}
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	20000948 	.word	0x20000948
 8001f68:	20000050 	.word	0x20000050

08001f6c <respond_single>:
  sprintf(tempString, "%d",number);
  print_text(tempString);
}

void respond_single()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	make_tcp_ack_from_any(buf); // send ack for http get
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <respond_single+0x20>)
 8001f72:	f7ff f901 	bl	8001178 <make_tcp_ack_from_any>
	make_tcp_ack_with_data_single(buf,plen); // send data
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <respond_single+0x24>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <respond_single+0x20>)
 8001f7e:	f7ff f94b 	bl	8001218 <make_tcp_ack_with_data_single>
	plen = 0;
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <respond_single+0x24>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	801a      	strh	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000050 	.word	0x20000050
 8001f90:	20000948 	.word	0x20000948

08001f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f98:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9a:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb0:	4c0b      	ldr	r4, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fbe:	f7ff fe6d 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f003 fcdb 	bl	800597c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc6:	f7ff f96f 	bl	80012a8 <main>
  bx  lr    
 8001fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001fd8:	08005de8 	.word	0x08005de8
  ldr r2, =_sbss
 8001fdc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001fe0:	20000950 	.word	0x20000950

08001fe4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <CAN1_RX0_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_Init+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_Init+0x40>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_Init+0x40>)
 8001ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_Init+0x40>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 fcca 	bl	80029aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff fdb2 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201c:	f7ff fc38 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00

0800202c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x20>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_IncTick+0x24>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000018 	.word	0x20000018
 8002050:	2000094c 	.word	0x2000094c

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000094c 	.word	0x2000094c

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffde 	bl	8002054 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000018 	.word	0x20000018

080020b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e033      	b.n	8002132 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fc04 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fa:	f023 0302 	bic.w	r3, r3, #2
 80020fe:	f043 0202 	orr.w	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fa9c 	bl	8002644 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
 8002122:	e001      	b.n	8002128 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b20      	cmp	r3, #32
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d049      	beq.n	8002210 <HAL_ADC_IRQHandler+0xd6>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d046      	beq.n	8002210 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12b      	bne.n	8002200 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d127      	bne.n	8002200 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d119      	bne.n	8002200 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0220 	bic.w	r2, r2, #32
 80021da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fadf 	bl	80017c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f06f 0212 	mvn.w	r2, #18
 800220e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d057      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x1b8>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d054      	beq.n	80022f2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d139      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002286:	2b00      	cmp	r3, #0
 8002288:	d12b      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002294:	2b00      	cmp	r3, #0
 8002296:	d124      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11d      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 faaa 	bl	800283c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 020c 	mvn.w	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_ADC_IRQHandler+0x21a>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d014      	beq.n	8002354 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10d      	bne.n	8002354 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f846 	bl	80023d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f06f 0201 	mvn.w	r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b20      	cmp	r3, #32
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x27a>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0220 	mvn.w	r2, #32
 80023a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f820 	bl	80023ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f06f 0220 	mvn.w	r2, #32
 80023b2:	601a      	str	r2, [r3, #0]
  }
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e105      	b.n	8002628 <HAL_ADC_ConfigChannel+0x228>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d925      	bls.n	8002478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1e      	subs	r3, #30
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43da      	mvns	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	400a      	ands	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68d9      	ldr	r1, [r3, #12]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	4603      	mov	r3, r0
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4403      	add	r3, r0
 800246a:	3b1e      	subs	r3, #30
 800246c:	409a      	lsls	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	e022      	b.n	80024be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	2207      	movs	r2, #7
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4403      	add	r3, r0
 80024b4:	409a      	lsls	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d824      	bhi.n	8002510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b05      	subs	r3, #5
 80024d8:	221f      	movs	r2, #31
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	400a      	ands	r2, r1
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b05      	subs	r3, #5
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
 800250e:	e04c      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d824      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3b23      	subs	r3, #35	; 0x23
 800252a:	221f      	movs	r2, #31
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43da      	mvns	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	400a      	ands	r2, r1
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	4618      	mov	r0, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b23      	subs	r3, #35	; 0x23
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	e023      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3b41      	subs	r3, #65	; 0x41
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	400a      	ands	r2, r1
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	; 0x41
 800259e:	fa00 f203 	lsl.w	r2, r0, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_ADC_ConfigChannel+0x234>)
 80025ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a21      	ldr	r2, [pc, #132]	; (8002638 <HAL_ADC_ConfigChannel+0x238>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d109      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1cc>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d105      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_ADC_ConfigChannel+0x238>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d123      	bne.n	800261e <HAL_ADC_ConfigChannel+0x21e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d003      	beq.n	80025e6 <HAL_ADC_ConfigChannel+0x1e6>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b11      	cmp	r3, #17
 80025e4:	d11b      	bne.n	800261e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d111      	bne.n	800261e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_ADC_ConfigChannel+0x23c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_ADC_ConfigChannel+0x240>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9a      	lsrs	r2, r3, #18
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002610:	e002      	b.n	8002618 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3b01      	subs	r3, #1
 8002616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f9      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40012300 	.word	0x40012300
 8002638:	40012000 	.word	0x40012000
 800263c:	20000010 	.word	0x20000010
 8002640:	431bde83 	.word	0x431bde83

08002644 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800264c:	4b79      	ldr	r3, [pc, #484]	; (8002834 <ADC_Init+0x1f0>)
 800264e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	431a      	orrs	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	021a      	lsls	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800269c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	4a58      	ldr	r2, [pc, #352]	; (8002838 <ADC_Init+0x1f4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6899      	ldr	r1, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800270c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6899      	ldr	r1, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e00f      	b.n	8002742 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002740:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0202 	bic.w	r2, r2, #2
 8002750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7e1b      	ldrb	r3, [r3, #24]
 800275c:	005a      	lsls	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01b      	beq.n	80027a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800278e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	3b01      	subs	r3, #1
 800279c:	035a      	lsls	r2, r3, #13
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e007      	b.n	80027b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	051a      	lsls	r2, r3, #20
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027fa:	025a      	lsls	r2, r3, #9
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	029a      	lsls	r2, r3, #10
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40012300 	.word	0x40012300
 8002838:	0f000001 	.word	0x0f000001

0800283c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800286c:	4013      	ands	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <__NVIC_GetPriorityGrouping+0x18>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f003 0307 	and.w	r3, r3, #7
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	db0b      	blt.n	80028de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <__NVIC_EnableIRQ+0x38>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2001      	movs	r0, #1
 80028d6:	fa00 f202 	lsl.w	r2, r0, r2
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000e100 	.word	0xe000e100

080028f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	2b00      	cmp	r3, #0
 8002902:	db0a      	blt.n	800291a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	490c      	ldr	r1, [pc, #48]	; (800293c <__NVIC_SetPriority+0x4c>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	440b      	add	r3, r1
 8002914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002918:	e00a      	b.n	8002930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <__NVIC_SetPriority+0x50>)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	3b04      	subs	r3, #4
 8002928:	0112      	lsls	r2, r2, #4
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	440b      	add	r3, r1
 800292e:	761a      	strb	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f1c3 0307 	rsb	r3, r3, #7
 800295e:	2b04      	cmp	r3, #4
 8002960:	bf28      	it	cs
 8002962:	2304      	movcs	r3, #4
 8002964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3304      	adds	r3, #4
 800296a:	2b06      	cmp	r3, #6
 800296c:	d902      	bls.n	8002974 <NVIC_EncodePriority+0x30>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3b03      	subs	r3, #3
 8002972:	e000      	b.n	8002976 <NVIC_EncodePriority+0x32>
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	43d9      	mvns	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	4313      	orrs	r3, r2
         );
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3724      	adds	r7, #36	; 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff4c 	bl	8002850 <__NVIC_SetPriorityGrouping>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d2:	f7ff ff61 	bl	8002898 <__NVIC_GetPriorityGrouping>
 80029d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	6978      	ldr	r0, [r7, #20]
 80029de:	f7ff ffb1 	bl	8002944 <NVIC_EncodePriority>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff80 	bl	80028f0 <__NVIC_SetPriority>
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff54 	bl	80028b4 <__NVIC_EnableIRQ>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e16b      	b.n	8002d08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a30:	2201      	movs	r2, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f040 815a 	bne.w	8002d02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d005      	beq.n	8002a66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d130      	bne.n	8002ac8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 0201 	and.w	r2, r3, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d017      	beq.n	8002b04 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d123      	bne.n	8002b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	220f      	movs	r2, #15
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0203 	and.w	r2, r3, #3
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80b4 	beq.w	8002d02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_GPIO_Init+0x30c>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	; (8002d20 <HAL_GPIO_Init+0x30c>)
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <HAL_GPIO_Init+0x30c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb6:	4a5b      	ldr	r2, [pc, #364]	; (8002d24 <HAL_GPIO_Init+0x310>)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	220f      	movs	r2, #15
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_GPIO_Init+0x314>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02b      	beq.n	8002c3a <HAL_GPIO_Init+0x226>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_GPIO_Init+0x318>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d025      	beq.n	8002c36 <HAL_GPIO_Init+0x222>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_GPIO_Init+0x31c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01f      	beq.n	8002c32 <HAL_GPIO_Init+0x21e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4f      	ldr	r2, [pc, #316]	; (8002d34 <HAL_GPIO_Init+0x320>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d019      	beq.n	8002c2e <HAL_GPIO_Init+0x21a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	; (8002d38 <HAL_GPIO_Init+0x324>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_GPIO_Init+0x216>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4d      	ldr	r2, [pc, #308]	; (8002d3c <HAL_GPIO_Init+0x328>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00d      	beq.n	8002c26 <HAL_GPIO_Init+0x212>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <HAL_GPIO_Init+0x32c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <HAL_GPIO_Init+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_GPIO_Init+0x330>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_GPIO_Init+0x20a>
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	e00e      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	e00c      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c22:	2306      	movs	r3, #6
 8002c24:	e00a      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c26:	2305      	movs	r3, #5
 8002c28:	e008      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e004      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x228>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f002 0203 	and.w	r2, r2, #3
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	4093      	lsls	r3, r2
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c4c:	4935      	ldr	r1, [pc, #212]	; (8002d24 <HAL_GPIO_Init+0x310>)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c5a:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c7e:	4a32      	ldr	r2, [pc, #200]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	f67f ae90 	bls.w	8002a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40013800 	.word	0x40013800
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020800 	.word	0x40020800
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40021400 	.word	0x40021400
 8002d40:	40021800 	.word	0x40021800
 8002d44:	40021c00 	.word	0x40021c00
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e264      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d075      	beq.n	8002e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	4ba3      	ldr	r3, [pc, #652]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d00c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4ba0      	ldr	r3, [pc, #640]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d112      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db6:	4b9d      	ldr	r3, [pc, #628]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4b99      	ldr	r3, [pc, #612]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05b      	beq.n	8002e88 <HAL_RCC_OscConfig+0x108>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d157      	bne.n	8002e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e23f      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x74>
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a90      	ldr	r2, [pc, #576]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x98>
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a8a      	ldr	r2, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b88      	ldr	r3, [pc, #544]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a87      	ldr	r2, [pc, #540]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002e18:	4b84      	ldr	r3, [pc, #528]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff f90c 	bl	8002054 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff f908 	bl	8002054 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e204      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xc0>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7ff f8f8 	bl	8002054 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff f8f4 	bl	8002054 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1f0      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	4b6c      	ldr	r3, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0xe8>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1c4      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b56      	ldr	r3, [pc, #344]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4952      	ldr	r1, [pc, #328]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCC_OscConfig+0x2b0>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7ff f8ad 	bl	8002054 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7ff f8a9 	bl	8002054 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1a5      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4940      	ldr	r1, [pc, #256]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x2b0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7ff f88c 	bl	8002054 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f40:	f7ff f888 	bl	8002054 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e184      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d030      	beq.n	8002fcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_OscConfig+0x2b4>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7ff f86c 	bl	8002054 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f80:	f7ff f868 	bl	8002054 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e164      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x200>
 8002f9e:	e015      	b.n	8002fcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCC_OscConfig+0x2b4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7ff f855 	bl	8002054 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fae:	f7ff f851 	bl	8002054 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e14d      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a0 	beq.w	800311a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x2b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d121      	bne.n	800305a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCC_OscConfig+0x2b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_RCC_OscConfig+0x2b8>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7ff f817 	bl	8002054 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e011      	b.n	800304e <HAL_RCC_OscConfig+0x2ce>
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	42470000 	.word	0x42470000
 8003034:	42470e80 	.word	0x42470e80
 8003038:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7ff f80a 	bl	8002054 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e106      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b85      	ldr	r3, [pc, #532]	; (8003264 <HAL_RCC_OscConfig+0x4e4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x2f0>
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	e01c      	b.n	80030aa <HAL_RCC_OscConfig+0x32a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x312>
 8003078:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x32a>
 8003092:	4b75      	ldr	r3, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a74      	ldr	r2, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe ffcf 	bl	8002054 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe ffcb 	bl	8002054 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0c5      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	4b65      	ldr	r3, [pc, #404]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ee      	beq.n	80030ba <HAL_RCC_OscConfig+0x33a>
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7fe ffb9 	bl	8002054 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe ffb5 	bl	8002054 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0af      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	4b5a      	ldr	r3, [pc, #360]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ee      	bne.n	80030e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b56      	ldr	r3, [pc, #344]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a55      	ldr	r2, [pc, #340]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 809b 	beq.w	800325a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d05c      	beq.n	80031ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d141      	bne.n	80031bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe ff89 	bl	8002054 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe ff85 	bl	8002054 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e081      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003158:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe ff5e 	bl	8002054 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe ff5a 	bl	8002054 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e056      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x41c>
 80031ba:	e04e      	b.n	800325a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe ff47 	bl	8002054 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe ff43 	bl	8002054 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e03f      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x44a>
 80031e8:	e037      	b.n	800325a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e032      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCC_OscConfig+0x4e8>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d028      	beq.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d121      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d11a      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003226:	4013      	ands	r3, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40007000 	.word	0x40007000
 8003268:	40023800 	.word	0x40023800
 800326c:	42470060 	.word	0x42470060

08003270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0cc      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d90c      	bls.n	80032ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b65      	ldr	r3, [pc, #404]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0b8      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c4:	4b59      	ldr	r3, [pc, #356]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a58      	ldr	r2, [pc, #352]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	494d      	ldr	r1, [pc, #308]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d044      	beq.n	8003390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d119      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d003      	beq.n	800332e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332a:	2b03      	cmp	r3, #3
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e067      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4934      	ldr	r1, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003360:	f7fe fe78 	bl	8002054 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fe fe74 	bl	8002054 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e04f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d20c      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e032      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4916      	ldr	r1, [pc, #88]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490e      	ldr	r1, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f6:	f000 f821 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490a      	ldr	r1, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fbb2 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023c00 	.word	0x40023c00
 800342c:	40023800 	.word	0x40023800
 8003430:	08005dc0 	.word	0x08005dc0
 8003434:	20000010 	.word	0x20000010
 8003438:	20000014 	.word	0x20000014

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	2300      	movs	r3, #0
 800344e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003454:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d00d      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x40>
 8003460:	2b08      	cmp	r3, #8
 8003462:	f200 80bd 	bhi.w	80035e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x34>
 800346a:	2b04      	cmp	r3, #4
 800346c:	d003      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x3a>
 800346e:	e0b7      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003472:	60bb      	str	r3, [r7, #8]
       break;
 8003474:	e0b7      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003476:	4b61      	ldr	r3, [pc, #388]	; (80035fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003478:	60bb      	str	r3, [r7, #8]
      break;
 800347a:	e0b4      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347c:	4b5d      	ldr	r3, [pc, #372]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04d      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003492:	4b58      	ldr	r3, [pc, #352]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	461a      	mov	r2, r3
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	ea02 0800 	and.w	r8, r2, r0
 80034aa:	ea03 0901 	and.w	r9, r3, r1
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	014b      	lsls	r3, r1, #5
 80034bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034c0:	0142      	lsls	r2, r0, #5
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	ebb0 0008 	subs.w	r0, r0, r8
 80034ca:	eb61 0109 	sbc.w	r1, r1, r9
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	018b      	lsls	r3, r1, #6
 80034d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034dc:	0182      	lsls	r2, r0, #6
 80034de:	1a12      	subs	r2, r2, r0
 80034e0:	eb63 0301 	sbc.w	r3, r3, r1
 80034e4:	f04f 0000 	mov.w	r0, #0
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	00d9      	lsls	r1, r3, #3
 80034ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034f2:	00d0      	lsls	r0, r2, #3
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	eb12 0208 	adds.w	r2, r2, r8
 80034fc:	eb43 0309 	adc.w	r3, r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0259      	lsls	r1, r3, #9
 800350a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800350e:	0250      	lsls	r0, r2, #9
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f7fc fe56 	bl	80001d0 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e04a      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	ea02 0400 	and.w	r4, r2, r0
 8003546:	ea03 0501 	and.w	r5, r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	014b      	lsls	r3, r1, #5
 8003558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800355c:	0142      	lsls	r2, r0, #5
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	1b00      	subs	r0, r0, r4
 8003564:	eb61 0105 	sbc.w	r1, r1, r5
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	018b      	lsls	r3, r1, #6
 8003572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003576:	0182      	lsls	r2, r0, #6
 8003578:	1a12      	subs	r2, r2, r0
 800357a:	eb63 0301 	sbc.w	r3, r3, r1
 800357e:	f04f 0000 	mov.w	r0, #0
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	00d9      	lsls	r1, r3, #3
 8003588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800358c:	00d0      	lsls	r0, r2, #3
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	1912      	adds	r2, r2, r4
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0299      	lsls	r1, r3, #10
 80035a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035a6:	0290      	lsls	r0, r2, #10
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	f7fc fe0a 	bl	80001d0 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4613      	mov	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	60bb      	str	r3, [r7, #8]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035e2:	60bb      	str	r3, [r7, #8]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	68bb      	ldr	r3, [r7, #8]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	007a1200 	.word	0x007a1200

08003600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_RCC_GetHCLKFreq+0x14>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000010 	.word	0x20000010

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800361c:	f7ff fff0 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08005dd0 	.word	0x08005dd0

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003644:	f7ff ffdc 	bl	8003600 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0b5b      	lsrs	r3, r3, #13
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	08005dd0 	.word	0x08005dd0

08003668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	220f      	movs	r2, #15
 8003676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_GetClockConfig+0x5c>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_GetClockConfig+0x5c>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	08db      	lsrs	r3, r3, #3
 80036a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_RCC_GetClockConfig+0x60>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0207 	and.w	r2, r3, #7
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40023c00 	.word	0x40023c00

080036cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07b      	b.n	80037d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ee:	d009      	beq.n	8003704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	61da      	str	r2, [r3, #28]
 80036f6:	e005      	b.n	8003704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe f92a 	bl	8001978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	ea42 0103 	orr.w	r1, r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0104 	and.w	r1, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0210 	and.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_SPI_Transmit+0x22>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e126      	b.n	8003a4e <HAL_SPI_Transmit+0x270>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003808:	f7fe fc24 	bl	8002054 <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003822:	e10b      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Transmit+0x52>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003834:	e102      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2203      	movs	r2, #3
 800383a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d10f      	bne.n	800389e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d007      	beq.n	80038bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d14b      	bne.n	800395e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Transmit+0xf6>
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d13e      	bne.n	8003952 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f8:	e02b      	b.n	8003952 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d112      	bne.n	800392e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36
 800392c:	e011      	b.n	8003952 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392e:	f7fe fb91 	bl	8002054 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_Transmit+0x168>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d102      	bne.n	800394c <HAL_SPI_Transmit+0x16e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003950:	e074      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ce      	bne.n	80038fa <HAL_SPI_Transmit+0x11c>
 800395c:	e04c      	b.n	80039f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_Transmit+0x18e>
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d140      	bne.n	80039ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003992:	e02c      	b.n	80039ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d113      	bne.n	80039ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c8:	e011      	b.n	80039ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ca:	f7fe fb43 	bl	8002054 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d803      	bhi.n	80039e2 <HAL_SPI_Transmit+0x204>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_Transmit+0x20a>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ec:	e026      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1cd      	bne.n	8003994 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fbcb 	bl	8004198 <SPI_EndRxTxTransaction>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e000      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a72:	d112      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10e      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f8f1 	bl	8003c78 <HAL_SPI_TransmitReceive>
 8003a96:	4603      	mov	r3, r0
 8003a98:	e0ea      	b.n	8003c70 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SPI_Receive+0x52>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0e3      	b.n	8003c70 <HAL_SPI_Receive+0x21a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab0:	f7fe fad0 	bl	8002054 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac6:	e0ca      	b.n	8003c5e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x7e>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad8:	e0c1      	b.n	8003c5e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	d10f      	bne.n	8003b42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d007      	beq.n	8003b60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d162      	bne.n	8003c2e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b68:	e02e      	b.n	8003bc8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d115      	bne.n	8003ba4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f103 020c 	add.w	r2, r3, #12
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba2:	e011      	b.n	8003bc8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba4:	f7fe fa56 	bl	8002054 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d803      	bhi.n	8003bbc <HAL_SPI_Receive+0x166>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_Receive+0x16c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bc6:	e04a      	b.n	8003c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1cb      	bne.n	8003b6a <HAL_SPI_Receive+0x114>
 8003bd2:	e031      	b.n	8003c38 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d113      	bne.n	8003c0a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	b292      	uxth	r2, r2
 8003bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c08:	e011      	b.n	8003c2e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0a:	f7fe fa23 	bl	8002054 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d803      	bhi.n	8003c22 <HAL_SPI_Receive+0x1cc>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Receive+0x1d2>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c2c:	e017      	b.n	8003c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1cd      	bne.n	8003bd4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fa45 	bl	80040cc <SPI_EndRxTransaction>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
 8003c5a:	e000      	b.n	8003c5e <HAL_SPI_Receive+0x208>
  }

error :
 8003c5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x26>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e18a      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x33c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca6:	f7fe f9d5 	bl	8002054 <HAL_GetTick>
 8003caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d00f      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x70>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cce:	d107      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x68>
 8003cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d003      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ce6:	e15b      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x82>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x82>
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d00:	e14e      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d003      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2205      	movs	r2, #5
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d007      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d72:	d178      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x10a>
 8003d7c:	8b7b      	ldrh	r3, [r7, #26]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d166      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da6:	e053      	b.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d11b      	bne.n	8003dee <HAL_SPI_TransmitReceive+0x176>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d016      	beq.n	8003dee <HAL_SPI_TransmitReceive+0x176>
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d113      	bne.n	8003dee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	1c9a      	adds	r2, r3, #2
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d119      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x1b8>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d014      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	b292      	uxth	r2, r2
 8003e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e30:	f7fe f910 	bl	8002054 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d807      	bhi.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d003      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e4e:	e0a7      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1a6      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x130>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1a1      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x130>
 8003e64:	e07c      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x1fc>
 8003e6e:	8b7b      	ldrh	r3, [r7, #26]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d16b      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9a:	e057      	b.n	8003f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x26c>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x26c>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d114      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d119      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x2ae>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d014      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f22:	2301      	movs	r3, #1
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f26:	f7fe f895 	bl	8002054 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d803      	bhi.n	8003f3e <HAL_SPI_TransmitReceive+0x2c6>
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d102      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x2cc>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f4a:	e029      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1a2      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x224>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d19d      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f917 	bl	8004198 <SPI_EndRxTxTransaction>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d006      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f7c:	e010      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e000      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fcc:	f7fe f842 	bl	8002054 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fdc:	f7fe f83a 	bl	8002054 <HAL_GetTick>
 8003fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	015b      	lsls	r3, r3, #5
 8003fe8:	0d1b      	lsrs	r3, r3, #20
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff2:	e054      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d050      	beq.n	800409e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ffc:	f7fe f82a 	bl	8002054 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d902      	bls.n	8004012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d13d      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d111      	bne.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004034:	d004      	beq.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d107      	bne.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004058:	d10f      	bne.n	800407a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e017      	b.n	80040be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3b01      	subs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	bf0c      	ite	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	2300      	movne	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d19b      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000010 	.word	0x20000010

080040cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e0:	d111      	bne.n	8004106 <SPI_EndRxTransaction+0x3a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d004      	beq.n	80040f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d107      	bne.n	8004106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410e:	d12a      	bne.n	8004166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d012      	beq.n	8004140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff ff49 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02d      	beq.n	800418c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e026      	b.n	800418e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	2101      	movs	r1, #1
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff36 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01a      	beq.n	800418c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e013      	b.n	800418e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2200      	movs	r2, #0
 800416e:	2101      	movs	r1, #1
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff ff23 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e000      	b.n	800418e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <SPI_EndRxTxTransaction+0x7c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <SPI_EndRxTxTransaction+0x80>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0d5b      	lsrs	r3, r3, #21
 80041b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c2:	d112      	bne.n	80041ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff fef4 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d0f2      	beq.n	80041ea <SPI_EndRxTxTransaction+0x52>
 8004204:	e000      	b.n	8004208 <SPI_EndRxTxTransaction+0x70>
        break;
 8004206:	bf00      	nop
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000010 	.word	0x20000010
 8004218:	165e9f81 	.word	0x165e9f81

0800421c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e041      	b.n	80042b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd fbe0 	bl	8001a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 fc12 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e046      	b.n	8004362 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_TIM_Base_Start+0xb4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d01d      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <HAL_TIM_Base_Start+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_TIM_Base_Start+0xbc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_TIM_Base_Start+0xc0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_TIM_Base_Start+0xc4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_TIM_Base_Start+0xc8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_Base_Start+0x70>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <HAL_TIM_Base_Start+0xcc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d111      	bne.n	8004350 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b06      	cmp	r3, #6
 800433c:	d010      	beq.n	8004360 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e007      	b.n	8004360 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40010400 	.word	0x40010400
 8004384:	40014000 	.word	0x40014000
 8004388:	40001800 	.word	0x40001800

0800438c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e04e      	b.n	8004442 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_TIM_Base_Start_IT+0xc4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d01d      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_TIM_Base_Start_IT+0xc8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_TIM_Base_Start_IT+0xcc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_TIM_Base_Start_IT+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_TIM_Base_Start_IT+0xd4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <HAL_TIM_Base_Start_IT+0xd8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIM_Base_Start_IT+0xdc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b06      	cmp	r3, #6
 800441c:	d010      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e007      	b.n	8004440 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800

0800446c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e041      	b.n	8004502 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f839 	bl	800450a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 faea 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	d122      	bne.n	800457a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d11b      	bne.n	800457a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0202 	mvn.w	r2, #2
 800454a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa71 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 8004566:	e005      	b.n	8004574 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa63 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa74 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d122      	bne.n	80045ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d11b      	bne.n	80045ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0204 	mvn.w	r2, #4
 800459e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fa47 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 80045ba:	e005      	b.n	80045c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa39 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa4a 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d122      	bne.n	8004622 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d11b      	bne.n	8004622 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f06f 0208 	mvn.w	r2, #8
 80045f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2204      	movs	r2, #4
 80045f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa1d 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 800460e:	e005      	b.n	800461c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa0f 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa20 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b10      	cmp	r3, #16
 800462e:	d122      	bne.n	8004676 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b10      	cmp	r3, #16
 800463c:	d11b      	bne.n	8004676 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f06f 0210 	mvn.w	r2, #16
 8004646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2208      	movs	r2, #8
 800464c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f9f3 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 8004662:	e005      	b.n	8004670 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f9e5 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9f6 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10e      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0201 	mvn.w	r2, #1
 800469a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fd f8df 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d10e      	bne.n	80046ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	d107      	bne.n	80046ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fd4b 	bl	8005164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d10e      	bne.n	80046fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d107      	bne.n	80046fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f9bb 	bl	8004a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b20      	cmp	r3, #32
 8004706:	d10e      	bne.n	8004726 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b20      	cmp	r3, #32
 8004714:	d107      	bne.n	8004726 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0220 	mvn.w	r2, #32
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fd15 	bl	8005150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004746:	2302      	movs	r3, #2
 8004748:	e0ac      	b.n	80048a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b0c      	cmp	r3, #12
 8004756:	f200 809f 	bhi.w	8004898 <HAL_TIM_PWM_ConfigChannel+0x168>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004795 	.word	0x08004795
 8004764:	08004899 	.word	0x08004899
 8004768:	08004899 	.word	0x08004899
 800476c:	08004899 	.word	0x08004899
 8004770:	080047d5 	.word	0x080047d5
 8004774:	08004899 	.word	0x08004899
 8004778:	08004899 	.word	0x08004899
 800477c:	08004899 	.word	0x08004899
 8004780:	08004817 	.word	0x08004817
 8004784:	08004899 	.word	0x08004899
 8004788:	08004899 	.word	0x08004899
 800478c:	08004899 	.word	0x08004899
 8004790:	08004857 	.word	0x08004857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fa12 	bl	8004bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0204 	bic.w	r2, r2, #4
 80047be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6999      	ldr	r1, [r3, #24]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	619a      	str	r2, [r3, #24]
      break;
 80047d2:	e062      	b.n	800489a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fa62 	bl	8004ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	619a      	str	r2, [r3, #24]
      break;
 8004814:	e041      	b.n	800489a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fab7 	bl	8004d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0208 	orr.w	r2, r2, #8
 8004830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0204 	bic.w	r2, r2, #4
 8004840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	61da      	str	r2, [r3, #28]
      break;
 8004854:	e021      	b.n	800489a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fb0b 	bl	8004e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	021a      	lsls	r2, r3, #8
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	61da      	str	r2, [r3, #28]
      break;
 8004896:	e000      	b.n	800489a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIM_ConfigClockSource+0x18>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0b3      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x180>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d03e      	beq.n	800497c <HAL_TIM_ConfigClockSource+0xd0>
 80048fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004902:	f200 8087 	bhi.w	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490a:	f000 8085 	beq.w	8004a18 <HAL_TIM_ConfigClockSource+0x16c>
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	d87f      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 8004914:	2b70      	cmp	r3, #112	; 0x70
 8004916:	d01a      	beq.n	800494e <HAL_TIM_ConfigClockSource+0xa2>
 8004918:	2b70      	cmp	r3, #112	; 0x70
 800491a:	d87b      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 800491c:	2b60      	cmp	r3, #96	; 0x60
 800491e:	d050      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x116>
 8004920:	2b60      	cmp	r3, #96	; 0x60
 8004922:	d877      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 8004924:	2b50      	cmp	r3, #80	; 0x50
 8004926:	d03c      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0xf6>
 8004928:	2b50      	cmp	r3, #80	; 0x50
 800492a:	d873      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d058      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x136>
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d86f      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 8004934:	2b30      	cmp	r3, #48	; 0x30
 8004936:	d064      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x156>
 8004938:	2b30      	cmp	r3, #48	; 0x30
 800493a:	d86b      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 800493c:	2b20      	cmp	r3, #32
 800493e:	d060      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x156>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d867      	bhi.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d05c      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x156>
 8004948:	2b10      	cmp	r3, #16
 800494a:	d05a      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800494c:	e062      	b.n	8004a14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6899      	ldr	r1, [r3, #8]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f000 fb5b 	bl	8005018 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004970:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	609a      	str	r2, [r3, #8]
      break;
 800497a:	e04e      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f000 fb44 	bl	8005018 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800499e:	609a      	str	r2, [r3, #8]
      break;
 80049a0:	e03b      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 fab8 	bl	8004f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2150      	movs	r1, #80	; 0x50
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fb11 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 80049c0:	e02b      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 fad7 	bl	8004f82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2160      	movs	r1, #96	; 0x60
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fb01 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 80049e0:	e01b      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f000 fa98 	bl	8004f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2140      	movs	r1, #64	; 0x40
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 faf1 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004a00:	e00b      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fae8 	bl	8004fe2 <TIM_ITRx_SetConfig>
        break;
 8004a12:	e002      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3d      	ldr	r2, [pc, #244]	; (8004b9c <TIM_Base_SetConfig+0x118>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <TIM_Base_SetConfig+0x11c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3b      	ldr	r2, [pc, #236]	; (8004ba4 <TIM_Base_SetConfig+0x120>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3a      	ldr	r2, [pc, #232]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d027      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <TIM_Base_SetConfig+0x118>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d023      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <TIM_Base_SetConfig+0x11c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <TIM_Base_SetConfig+0x120>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d017      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <TIM_Base_SetConfig+0x128>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a27      	ldr	r2, [pc, #156]	; (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <TIM_Base_SetConfig+0x134>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a24      	ldr	r2, [pc, #144]	; (8004bbc <TIM_Base_SetConfig+0x138>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800
 8004bb8:	40001800 	.word	0x40001800
 8004bbc:	40001c00 	.word	0x40001c00
 8004bc0:	40002000 	.word	0x40002000

08004bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 0302 	bic.w	r3, r3, #2
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <TIM_OC1_SetConfig+0xd8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC1_SetConfig+0x64>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <TIM_OC1_SetConfig+0xdc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d10c      	bne.n	8004c42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f023 0308 	bic.w	r3, r3, #8
 8004c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <TIM_OC1_SetConfig+0xd8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_OC1_SetConfig+0x8e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <TIM_OC1_SetConfig+0xdc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d111      	bne.n	8004c76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0210 	bic.w	r2, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0320 	bic.w	r3, r3, #32
 8004cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <TIM_OC2_SetConfig+0xe4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC2_SetConfig+0x68>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <TIM_OC2_SetConfig+0xe8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10d      	bne.n	8004d28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <TIM_OC2_SetConfig+0xe4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC2_SetConfig+0x94>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <TIM_OC2_SetConfig+0xe8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40010400 	.word	0x40010400

08004d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_OC3_SetConfig+0xe0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC3_SetConfig+0x66>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <TIM_OC3_SetConfig+0xe4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10d      	bne.n	8004e12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <TIM_OC3_SetConfig+0xe0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC3_SetConfig+0x92>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <TIM_OC3_SetConfig+0xe4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d113      	bne.n	8004e4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40010000 	.word	0x40010000
 8004e74:	40010400 	.word	0x40010400

08004e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <TIM_OC4_SetConfig+0xa4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC4_SetConfig+0x68>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <TIM_OC4_SetConfig+0xa8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d109      	bne.n	8004ef4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40010400 	.word	0x40010400

08004f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 030a 	bic.w	r3, r3, #10
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0210 	bic.w	r2, r3, #16
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f043 0307 	orr.w	r3, r3, #7
 8005004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	431a      	orrs	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800506c:	2302      	movs	r3, #2
 800506e:	e05a      	b.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a21      	ldr	r2, [pc, #132]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050bc:	d01d      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1a      	ldr	r2, [pc, #104]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10c      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4313      	orrs	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40010400 	.word	0x40010400
 8005148:	40014000 	.word	0x40014000
 800514c:	40001800 	.word	0x40001800

08005150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e03f      	b.n	800520a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fc fca6 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	; 0x24
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f829 	bl	8005214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	b09f      	sub	sp, #124	; 0x7c
 800521a:	af00      	add	r7, sp, #0
 800521c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	68d9      	ldr	r1, [r3, #12]
 800522c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	ea40 0301 	orr.w	r3, r0, r1
 8005234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	431a      	orrs	r2, r3
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	431a      	orrs	r2, r3
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4313      	orrs	r3, r2
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005258:	f021 010c 	bic.w	r1, r1, #12
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005262:	430b      	orrs	r3, r1
 8005264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	6999      	ldr	r1, [r3, #24]
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	ea40 0301 	orr.w	r3, r0, r1
 800527c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4bc5      	ldr	r3, [pc, #788]	; (8005598 <UART_SetConfig+0x384>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d004      	beq.n	8005292 <UART_SetConfig+0x7e>
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4bc3      	ldr	r3, [pc, #780]	; (800559c <UART_SetConfig+0x388>)
 800528e:	429a      	cmp	r2, r3
 8005290:	d103      	bne.n	800529a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005292:	f7fe f9d5 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8005296:	6778      	str	r0, [r7, #116]	; 0x74
 8005298:	e002      	b.n	80052a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529a:	f7fe f9bd 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 800529e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	f040 80b6 	bne.w	8005418 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ae:	461c      	mov	r4, r3
 80052b0:	f04f 0500 	mov.w	r5, #0
 80052b4:	4622      	mov	r2, r4
 80052b6:	462b      	mov	r3, r5
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	6439      	str	r1, [r7, #64]	; 0x40
 80052bc:	415b      	adcs	r3, r3
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
 80052c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052c4:	1912      	adds	r2, r2, r4
 80052c6:	eb45 0303 	adc.w	r3, r5, r3
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d8:	00d0      	lsls	r0, r2, #3
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	1911      	adds	r1, r2, r4
 80052e0:	6639      	str	r1, [r7, #96]	; 0x60
 80052e2:	416b      	adcs	r3, r5
 80052e4:	667b      	str	r3, [r7, #100]	; 0x64
 80052e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f4:	415b      	adcs	r3, r3
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005300:	f7fa ff66 	bl	80001d0 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4ba5      	ldr	r3, [pc, #660]	; (80055a0 <UART_SetConfig+0x38c>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011e      	lsls	r6, r3, #4
 8005312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005314:	461c      	mov	r4, r3
 8005316:	f04f 0500 	mov.w	r5, #0
 800531a:	4622      	mov	r2, r4
 800531c:	462b      	mov	r3, r5
 800531e:	1891      	adds	r1, r2, r2
 8005320:	6339      	str	r1, [r7, #48]	; 0x30
 8005322:	415b      	adcs	r3, r3
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
 8005326:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800532a:	1912      	adds	r2, r2, r4
 800532c:	eb45 0303 	adc.w	r3, r5, r3
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	00d9      	lsls	r1, r3, #3
 800533a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533e:	00d0      	lsls	r0, r2, #3
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	1911      	adds	r1, r2, r4
 8005346:	65b9      	str	r1, [r7, #88]	; 0x58
 8005348:	416b      	adcs	r3, r5
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	1891      	adds	r1, r2, r2
 8005358:	62b9      	str	r1, [r7, #40]	; 0x28
 800535a:	415b      	adcs	r3, r3
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005362:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005366:	f7fa ff33 	bl	80001d0 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b8c      	ldr	r3, [pc, #560]	; (80055a0 <UART_SetConfig+0x38c>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a87      	ldr	r2, [pc, #540]	; (80055a0 <UART_SetConfig+0x38c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005390:	441e      	add	r6, r3
 8005392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005394:	4618      	mov	r0, r3
 8005396:	f04f 0100 	mov.w	r1, #0
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	1894      	adds	r4, r2, r2
 80053a0:	623c      	str	r4, [r7, #32]
 80053a2:	415b      	adcs	r3, r3
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053aa:	1812      	adds	r2, r2, r0
 80053ac:	eb41 0303 	adc.w	r3, r1, r3
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	f04f 0500 	mov.w	r5, #0
 80053b8:	00dd      	lsls	r5, r3, #3
 80053ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053be:	00d4      	lsls	r4, r2, #3
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	1814      	adds	r4, r2, r0
 80053c6:	653c      	str	r4, [r7, #80]	; 0x50
 80053c8:	414b      	adcs	r3, r1
 80053ca:	657b      	str	r3, [r7, #84]	; 0x54
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461a      	mov	r2, r3
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	61b9      	str	r1, [r7, #24]
 80053da:	415b      	adcs	r3, r3
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053e6:	f7fa fef3 	bl	80001d0 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b6c      	ldr	r3, [pc, #432]	; (80055a0 <UART_SetConfig+0x38c>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a67      	ldr	r2, [pc, #412]	; (80055a0 <UART_SetConfig+0x38c>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4432      	add	r2, r6
 8005414:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005416:	e0b9      	b.n	800558c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541a:	461c      	mov	r4, r3
 800541c:	f04f 0500 	mov.w	r5, #0
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	1891      	adds	r1, r2, r2
 8005426:	6139      	str	r1, [r7, #16]
 8005428:	415b      	adcs	r3, r3
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005430:	1912      	adds	r2, r2, r4
 8005432:	eb45 0303 	adc.w	r3, r5, r3
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	00d9      	lsls	r1, r3, #3
 8005440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005444:	00d0      	lsls	r0, r2, #3
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	eb12 0804 	adds.w	r8, r2, r4
 800544e:	eb43 0905 	adc.w	r9, r3, r5
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800546a:	0082      	lsls	r2, r0, #2
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fa feae 	bl	80001d0 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4b49      	ldr	r3, [pc, #292]	; (80055a0 <UART_SetConfig+0x38c>)
 800547a:	fba3 2302 	umull	r2, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	011e      	lsls	r6, r3, #4
 8005482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005484:	4618      	mov	r0, r3
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	1894      	adds	r4, r2, r2
 8005490:	60bc      	str	r4, [r7, #8]
 8005492:	415b      	adcs	r3, r3
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549a:	1812      	adds	r2, r2, r0
 800549c:	eb41 0303 	adc.w	r3, r1, r3
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	f04f 0500 	mov.w	r5, #0
 80054a8:	00dd      	lsls	r5, r3, #3
 80054aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054ae:	00d4      	lsls	r4, r2, #3
 80054b0:	4622      	mov	r2, r4
 80054b2:	462b      	mov	r3, r5
 80054b4:	1814      	adds	r4, r2, r0
 80054b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80054b8:	414b      	adcs	r3, r1
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054d4:	0082      	lsls	r2, r0, #2
 80054d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054da:	f7fa fe79 	bl	80001d0 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b2f      	ldr	r3, [pc, #188]	; (80055a0 <UART_SetConfig+0x38c>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	; 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	3332      	adds	r3, #50	; 0x32
 80054f6:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <UART_SetConfig+0x38c>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	441e      	add	r6, r3
 8005504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005506:	4618      	mov	r0, r3
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	1894      	adds	r4, r2, r2
 8005512:	603c      	str	r4, [r7, #0]
 8005514:	415b      	adcs	r3, r3
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	1812      	adds	r2, r2, r0
 800551e:	eb41 0303 	adc.w	r3, r1, r3
 8005522:	f04f 0400 	mov.w	r4, #0
 8005526:	f04f 0500 	mov.w	r5, #0
 800552a:	00dd      	lsls	r5, r3, #3
 800552c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005530:	00d4      	lsls	r4, r2, #3
 8005532:	4622      	mov	r2, r4
 8005534:	462b      	mov	r3, r5
 8005536:	eb12 0a00 	adds.w	sl, r2, r0
 800553a:	eb43 0b01 	adc.w	fp, r3, r1
 800553e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	008b      	lsls	r3, r1, #2
 8005552:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005556:	0082      	lsls	r2, r0, #2
 8005558:	4650      	mov	r0, sl
 800555a:	4659      	mov	r1, fp
 800555c:	f7fa fe38 	bl	80001d0 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <UART_SetConfig+0x38c>)
 8005566:	fba3 1302 	umull	r1, r3, r3, r2
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2164      	movs	r1, #100	; 0x64
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	3332      	adds	r3, #50	; 0x32
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <UART_SetConfig+0x38c>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4432      	add	r2, r6
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	377c      	adds	r7, #124	; 0x7c
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005596:	bf00      	nop
 8005598:	40011000 	.word	0x40011000
 800559c:	40011400 	.word	0x40011400
 80055a0:	51eb851f 	.word	0x51eb851f

080055a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6892      	ldr	r2, [r2, #8]
 8005602:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6852      	ldr	r2, [r2, #4]
 800560c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d103      	bne.n	8005620 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1e5a      	subs	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b4e      	ldr	r3, [pc, #312]	; (8005784 <xTaskIncrementTick+0x144>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808e 	bne.w	8005770 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005654:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <xTaskIncrementTick+0x148>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800565c:	4a4a      	ldr	r2, [pc, #296]	; (8005788 <xTaskIncrementTick+0x148>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d120      	bne.n	80056aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005668:	4b48      	ldr	r3, [pc, #288]	; (800578c <xTaskIncrementTick+0x14c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xTaskIncrementTick+0x46>
 8005688:	4b40      	ldr	r3, [pc, #256]	; (800578c <xTaskIncrementTick+0x14c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <xTaskIncrementTick+0x150>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3e      	ldr	r2, [pc, #248]	; (800578c <xTaskIncrementTick+0x14c>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4a3e      	ldr	r2, [pc, #248]	; (8005790 <xTaskIncrementTick+0x150>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <xTaskIncrementTick+0x154>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a3c      	ldr	r2, [pc, #240]	; (8005794 <xTaskIncrementTick+0x154>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f000 f8df 	bl	8005868 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <xTaskIncrementTick+0x158>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d348      	bcc.n	8005746 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b4:	4b35      	ldr	r3, [pc, #212]	; (800578c <xTaskIncrementTick+0x14c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <xTaskIncrementTick+0x158>)
 80056c0:	f04f 32ff 	mov.w	r2, #4294967295
 80056c4:	601a      	str	r2, [r3, #0]
                    break;
 80056c6:	e03e      	b.n	8005746 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c8:	4b30      	ldr	r3, [pc, #192]	; (800578c <xTaskIncrementTick+0x14c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d203      	bcs.n	80056e8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80056e0:	4a2d      	ldr	r2, [pc, #180]	; (8005798 <xTaskIncrementTick+0x158>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e6:	e02e      	b.n	8005746 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ff7d 	bl	80055ec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff74 	bl	80055ec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2201      	movs	r2, #1
 800570a:	409a      	lsls	r2, r3
 800570c:	4b23      	ldr	r3, [pc, #140]	; (800579c <xTaskIncrementTick+0x15c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <xTaskIncrementTick+0x15c>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <xTaskIncrementTick+0x160>)
 8005724:	441a      	add	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f7ff ff39 	bl	80055a4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <xTaskIncrementTick+0x164>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	429a      	cmp	r2, r3
 800573e:	d3b9      	bcc.n	80056b4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005744:	e7b6      	b.n	80056b4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <xTaskIncrementTick+0x164>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4914      	ldr	r1, [pc, #80]	; (80057a0 <xTaskIncrementTick+0x160>)
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d901      	bls.n	8005762 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800575e:	2301      	movs	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <xTaskIncrementTick+0x168>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e004      	b.n	800577a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <xTaskIncrementTick+0x16c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <xTaskIncrementTick+0x16c>)
 8005778:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	2000073c 	.word	0x2000073c
 8005788:	20000724 	.word	0x20000724
 800578c:	2000071c 	.word	0x2000071c
 8005790:	20000720 	.word	0x20000720
 8005794:	20000734 	.word	0x20000734
 8005798:	20000738 	.word	0x20000738
 800579c:	20000728 	.word	0x20000728
 80057a0:	200006b8 	.word	0x200006b8
 80057a4:	200006b4 	.word	0x200006b4
 80057a8:	20000730 	.word	0x20000730
 80057ac:	2000072c 	.word	0x2000072c

080057b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <vTaskSwitchContext+0xa4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80057be:	4b26      	ldr	r3, [pc, #152]	; (8005858 <vTaskSwitchContext+0xa8>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80057c4:	e03f      	b.n	8005846 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80057c6:	4b24      	ldr	r3, [pc, #144]	; (8005858 <vTaskSwitchContext+0xa8>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <vTaskSwitchContext+0xac>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	fab3 f383 	clz	r3, r3
 80057d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	f1c3 031f 	rsb	r3, r3, #31
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	491f      	ldr	r1, [pc, #124]	; (8005860 <vTaskSwitchContext+0xb0>)
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <vTaskSwitchContext+0x5c>
        __asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	607b      	str	r3, [r7, #4]
    }
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <vTaskSwitchContext+0x5a>
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <vTaskSwitchContext+0xb0>)
 8005818:	4413      	add	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3308      	adds	r3, #8
 800582e:	429a      	cmp	r2, r3
 8005830:	d104      	bne.n	800583c <vTaskSwitchContext+0x8c>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a08      	ldr	r2, [pc, #32]	; (8005864 <vTaskSwitchContext+0xb4>)
 8005844:	6013      	str	r3, [r2, #0]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000073c 	.word	0x2000073c
 8005858:	20000730 	.word	0x20000730
 800585c:	20000728 	.word	0x20000728
 8005860:	200006b8 	.word	0x200006b8
 8005864:	200006b4 	.word	0x200006b4

08005868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <prvResetNextTaskUnblockTime+0x30>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <prvResetNextTaskUnblockTime+0x34>)
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800587e:	e005      	b.n	800588c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <prvResetNextTaskUnblockTime+0x30>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a04      	ldr	r2, [pc, #16]	; (800589c <prvResetNextTaskUnblockTime+0x34>)
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	2000071c 	.word	0x2000071c
 800589c:	20000738 	.word	0x20000738

080058a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <pxCurrentTCBConst2>)
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	6808      	ldr	r0, [r1, #0]
 80058a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	f380 8809 	msr	PSP, r0
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8811 	msr	BASEPRI, r0
 80058ba:	4770      	bx	lr
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst2>:
 80058c0:	200006b4 	.word	0x200006b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
	...

080058d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80058d0:	f3ef 8009 	mrs	r0, PSP
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	4b15      	ldr	r3, [pc, #84]	; (8005930 <pxCurrentTCBConst>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	f01e 0f10 	tst.w	lr, #16
 80058e0:	bf08      	it	eq
 80058e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	6010      	str	r0, [r2, #0]
 80058ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058f4:	f380 8811 	msr	BASEPRI, r0
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f7ff ff56 	bl	80057b0 <vTaskSwitchContext>
 8005904:	f04f 0000 	mov.w	r0, #0
 8005908:	f380 8811 	msr	BASEPRI, r0
 800590c:	bc09      	pop	{r0, r3}
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	6808      	ldr	r0, [r1, #0]
 8005912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005916:	f01e 0f10 	tst.w	lr, #16
 800591a:	bf08      	it	eq
 800591c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005920:	f380 8809 	msr	PSP, r0
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst>:
 8005930:	200006b4 	.word	0x200006b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
        __asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
    }
 8005950:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005952:	f7ff fe75 	bl	8005640 <xTaskIncrementTick>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <SysTick_Handler+0x40>)
 800595e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800596e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4d0d      	ldr	r5, [pc, #52]	; (80059b4 <__libc_init_array+0x38>)
 8005980:	4c0d      	ldr	r4, [pc, #52]	; (80059b8 <__libc_init_array+0x3c>)
 8005982:	1b64      	subs	r4, r4, r5
 8005984:	10a4      	asrs	r4, r4, #2
 8005986:	2600      	movs	r6, #0
 8005988:	42a6      	cmp	r6, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	4d0b      	ldr	r5, [pc, #44]	; (80059bc <__libc_init_array+0x40>)
 800598e:	4c0c      	ldr	r4, [pc, #48]	; (80059c0 <__libc_init_array+0x44>)
 8005990:	f000 f832 	bl	80059f8 <_init>
 8005994:	1b64      	subs	r4, r4, r5
 8005996:	10a4      	asrs	r4, r4, #2
 8005998:	2600      	movs	r6, #0
 800599a:	42a6      	cmp	r6, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a4:	4798      	blx	r3
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ae:	4798      	blx	r3
 80059b0:	3601      	adds	r6, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	08005de0 	.word	0x08005de0
 80059b8:	08005de0 	.word	0x08005de0
 80059bc:	08005de0 	.word	0x08005de0
 80059c0:	08005de4 	.word	0x08005de4

080059c4 <memset>:
 80059c4:	4402      	add	r2, r0
 80059c6:	4603      	mov	r3, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <strncmp>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	b16a      	cbz	r2, 80059f4 <strncmp+0x20>
 80059d8:	3901      	subs	r1, #1
 80059da:	1884      	adds	r4, r0, r2
 80059dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80059e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d103      	bne.n	80059f0 <strncmp+0x1c>
 80059e8:	42a0      	cmp	r0, r4
 80059ea:	d001      	beq.n	80059f0 <strncmp+0x1c>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f5      	bne.n	80059dc <strncmp+0x8>
 80059f0:	1a98      	subs	r0, r3, r2
 80059f2:	bd10      	pop	{r4, pc}
 80059f4:	4610      	mov	r0, r2
 80059f6:	e7fc      	b.n	80059f2 <strncmp+0x1e>

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
