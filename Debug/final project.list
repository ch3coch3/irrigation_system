
final project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc4  08006dc4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dcc  08006dcc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f08  20000078  08006e4c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f80  08006e4c  00022f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e53  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003175  00000000  00000000  00036efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0003a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e86  00000000  00000000  0003c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014355  00000000  00000000  000602be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfe3d  00000000  00000000  00074613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154450  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050fc  00000000  00000000  001544a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d08 	.word	0x08006d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006d08 	.word	0x08006d08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 ff72 	bl	800146a <HAL_ADC_GetValue>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x4c>)
 800058c:	801a      	strh	r2, [r3, #0]
	if( adc_value < 2800 && adc_value >10){
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000596:	d207      	bcs.n	80005a8 <HAL_ADC_ConvCpltCallback+0x30>
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x4c>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	2b0a      	cmp	r3, #10
 800059e:	d903      	bls.n	80005a8 <HAL_ADC_ConvCpltCallback+0x30>
		flag = 1;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x50>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
	}
	else if(adc_value > 3100){
		flag = 2;
	}
}
 80005a6:	e008      	b.n	80005ba <HAL_ADC_ConvCpltCallback+0x42>
	else if(adc_value > 3100){
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	f640 421c 	movw	r2, #3100	; 0xc1c
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d902      	bls.n	80005ba <HAL_ADC_ConvCpltCallback+0x42>
		flag = 2;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x50>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20012e50 	.word	0x20012e50
 80005c8:	20000094 	.word	0x20000094

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fc81 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f82f 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f987 	bl	80008ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80005de:	f000 f8e5 	bl	80007ac <MX_TIM2_Init>
  MX_ADC1_Init();
 80005e2:	f000 f891 	bl	8000708 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f957 	bl	8000898 <MX_USART3_UART_Init>

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80005ea:	2100      	movs	r1, #0
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0x58>)
 80005ee:	f002 f9dd 	bl	80029ac <HAL_TIM_PWM_Start>
  xTaskCreate(servo_Motor,"servoMotor",1000,NULL,1,NULL);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000600:	4909      	ldr	r1, [pc, #36]	; (8000628 <main+0x5c>)
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x60>)
 8000604:	f004 f972 	bl	80048ec <xTaskCreate>
  xTaskCreate(water_height,"waterHeight",1000,NULL,2,NULL);
 8000608:	2300      	movs	r3, #0
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000616:	4906      	ldr	r1, [pc, #24]	; (8000630 <main+0x64>)
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x68>)
 800061a:	f004 f967 	bl	80048ec <xTaskCreate>
  vTaskStartScheduler();
 800061e:	f004 faab 	bl	8004b78 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x56>
 8000624:	20012e9c 	.word	0x20012e9c
 8000628:	08006d20 	.word	0x08006d20
 800062c:	080009c5 	.word	0x080009c5
 8000630:	08006d2c 	.word	0x08006d2c
 8000634:	080009f1 	.word	0x080009f1

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 ff36 	bl	80064b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <SystemClock_Config+0xc8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xcc>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fbb5 	bl	8001e2c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f9e6 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fe17 	bl	800231c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 f9d0 	bl	8000a98 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ADC1_Init+0x98>)
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_ADC1_Init+0xa0>)
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000762:	2201      	movs	r2, #1
 8000764:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000768:	f000 fc1c 	bl	8000fa4 <HAL_ADC_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f991 	bl	8000a98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000776:	2301      	movs	r3, #1
 8000778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_ADC1_Init+0x98>)
 8000788:	f000 fe90 	bl	80014ac <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000792:	f000 f981 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20012e54 	.word	0x20012e54
 80007a4:	40012000 	.word	0x40012000
 80007a8:	0f000001 	.word	0x0f000001

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_TIM2_Init+0xe8>)
 80007de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_TIM2_Init+0xe8>)
 80007e6:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80007ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_TIM2_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_TIM2_Init+0xe8>)
 80007f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_TIM2_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000806:	4823      	ldr	r0, [pc, #140]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000808:	f001 ffb6 	bl	8002778 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f941 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000820:	4619      	mov	r1, r3
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000824:	f002 fb50 	bl	8002ec8 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800082e:	f000 f933 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000834:	f002 f860 	bl	80028f8 <HAL_TIM_PWM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800083e:	f000 f92b 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000852:	f002 ff35 	bl	80036c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800085c:	f000 f91c 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000878:	f002 fa68 	bl	8002d4c <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000882:	f000 f909 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM2_Init+0xe8>)
 8000888:	f000 f9a6 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3738      	adds	r7, #56	; 0x38
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20012e9c 	.word	0x20012e9c

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART3_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x4c>)
 80008d0:	f002 ff86 	bl	80037e0 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f8dd 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20012e0c 	.word	0x20012e0c
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <MX_GPIO_Init+0xd0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a25      	ldr	r2, [pc, #148]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <MX_GPIO_Init+0xd0>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0xd4>)
 8000994:	f001 fa30 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xd4>)
 80009b0:	f001 f886 	bl	8001ac0 <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020c00 	.word	0x40020c00

080009c4 <servo_Motor>:

/* USER CODE BEGIN 4 */
void servo_Motor(void *parameters){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	for(;;){
	  TIM2->CCR1 = 35;
 80009cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d0:	2223      	movs	r2, #35	; 0x23
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80009d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009d8:	f000 fac0 	bl	8000f5c <HAL_Delay>
	  TIM2->CCR1 = 60;
 80009dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e0:	223c      	movs	r2, #60	; 0x3c
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80009e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009e8:	f000 fab8 	bl	8000f5c <HAL_Delay>
	  TIM2->CCR1 = 35;
 80009ec:	e7ee      	b.n	80009cc <servo_Motor+0x8>
	...

080009f0 <water_height>:
	}
}

void water_height(void *parameters){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b096      	sub	sp, #88	; 0x58
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	for(;;){
	  char data[80];
	  sprintf(data, "Water is detected! The level : %d \n\r", adc_value);
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <water_height+0x6c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4917      	ldr	r1, [pc, #92]	; (8000a60 <water_height+0x70>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f005 fd5f 	bl	80064c8 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)data, strlen(data) ,0xffff);
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fbde 	bl	80001d0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f107 0108 	add.w	r1, r7, #8
 8000a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <water_height+0x74>)
 8000a22:	f002 ff2a 	bl	800387a <HAL_UART_Transmit>
	  if(flag == 1){
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <water_height+0x78>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d105      	bne.n	8000a3a <water_height+0x4a>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2101      	movs	r1, #1
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <water_height+0x7c>)
 8000a34:	f001 f9e0 	bl	8001df8 <HAL_GPIO_WritePin>
 8000a38:	e008      	b.n	8000a4c <water_height+0x5c>

	  }
	  else if(flag == 2){
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <water_height+0x78>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d104      	bne.n	8000a4c <water_height+0x5c>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <water_height+0x7c>)
 8000a48:	f001 f9d6 	bl	8001df8 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a50:	f000 fa84 	bl	8000f5c <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <water_height+0x80>)
 8000a56:	f000 fae9 	bl	800102c <HAL_ADC_Start_IT>
	for(;;){
 8000a5a:	e7cd      	b.n	80009f8 <water_height+0x8>
 8000a5c:	20012e50 	.word	0x20012e50
 8000a60:	08006d38 	.word	0x08006d38
 8000a64:	20012e0c 	.word	0x20012e0c
 8000a68:	20000094 	.word	0x20000094
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	20012e54 	.word	0x20012e54

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 fa49 	bl	8000f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40001000 	.word	0x40001000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <HAL_ADC_MspInit+0x8c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12f      	bne.n	8000b76 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_ADC_MspInit+0x90>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_ADC_MspInit+0x90>)
 8000b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_ADC_MspInit+0x90>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_ADC_MspInit+0x90>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_ADC_MspInit+0x90>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_ADC_MspInit+0x90>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b52:	2303      	movs	r3, #3
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_ADC_MspInit+0x94>)
 8000b62:	f000 ffad 	bl	8001ac0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2012      	movs	r0, #18
 8000b6c:	f000 ff7e 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b70:	2012      	movs	r0, #18
 8000b72:	f000 ff97 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012000 	.word	0x40012000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d115      	bne.n	8000bca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_TIM_Base_MspInit+0x48>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_TIM_Base_MspInit+0x48>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_TIM_Base_MspInit+0x48>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f000 ff54 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc4:	201c      	movs	r0, #28
 8000bc6:	f000 ff6d 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf8:	d11d      	bne.n	8000c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <HAL_TIM_MspPostInit+0x6c>)
 8000c32:	f000 ff45 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12c      	bne.n	8000cc4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ca2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_UART_MspInit+0x8c>)
 8000cc0:	f000 fefe 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	2036      	movs	r0, #54	; 0x36
 8000cee:	f000 febd 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf2:	2036      	movs	r0, #54	; 0x36
 8000cf4:	f000 fed6 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_InitTick+0xa4>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_InitTick+0xa4>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0xa4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d14:	f107 0210 	add.w	r2, r7, #16
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fcf8 	bl	8002714 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d24:	f001 fcce 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0xac>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_InitTick+0xb0>)
 8000d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_InitTick+0xac>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_InitTick+0xac>)
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_InitTick+0xac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_InitTick+0xac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_InitTick+0xac>)
 8000d5e:	f001 fd0b 	bl	8002778 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d104      	bne.n	8000d72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_InitTick+0xac>)
 8000d6a:	f001 fd55 	bl	8002818 <HAL_TIM_Base_Start_IT>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	20012ee4 	.word	0x20012ee4
 8000d88:	40001000 	.word	0x40001000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <ADC_IRQHandler+0x10>)
 8000dbe:	f000 fa13 	bl	80011e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20012e54 	.word	0x20012e54

08000dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM2_IRQHandler+0x10>)
 8000dd2:	f001 feb3 	bl	8002b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20012e9c 	.word	0x20012e9c

08000de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM6_DAC_IRQHandler+0x10>)
 8000de6:	f001 fea9 	bl	8002b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20012ee4 	.word	0x20012ee4

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f005 fb10 	bl	8006448 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	20012f80 	.word	0x20012f80

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f005 facf 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fb89 	bl	80005cc <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ec8:	08006dd4 	.word	0x08006dd4
  ldr r2, =_sbss
 8000ecc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ed0:	20012f80 	.word	0x20012f80

08000ed4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <CAN1_RX0_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 fda8 	bl	8001a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fee6 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fdca 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20012f2c 	.word	0x20012f2c

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20012f2c 	.word	0x20012f2c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e033      	b.n	8001022 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d109      	bne.n	8000fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fd96 	bl	8000af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d118      	bne.n	8001014 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fea:	f023 0302 	bic.w	r3, r3, #2
 8000fee:	f043 0202 	orr.w	r2, r3, #2
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fb7a 	bl	80016f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	f043 0201 	orr.w	r2, r3, #1
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
 8001012:	e001      	b.n	8001018 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Start_IT+0x1a>
 8001042:	2302      	movs	r3, #2
 8001044:	e0bd      	b.n	80011c2 <HAL_ADC_Start_IT+0x196>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d018      	beq.n	800108e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_ADC_Start_IT+0x1a4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <HAL_ADC_Start_IT+0x1a8>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9a      	lsrs	r2, r3, #18
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001080:	e002      	b.n	8001088 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	3b01      	subs	r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f9      	bne.n	8001082 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 8085 	bne.w	80011a8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010dc:	d106      	bne.n	80010ec <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f023 0206 	bic.w	r2, r3, #6
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
 80010ea:	e002      	b.n	80010f2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_ADC_Start_IT+0x1ac>)
 80010fc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001106:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	2b00      	cmp	r3, #0
 8001126:	d12a      	bne.n	800117e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a2b      	ldr	r2, [pc, #172]	; (80011dc <HAL_ADC_Start_IT+0x1b0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d015      	beq.n	800115e <HAL_ADC_Start_IT+0x132>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <HAL_ADC_Start_IT+0x1b4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d105      	bne.n	8001148 <HAL_ADC_Start_IT+0x11c>
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_ADC_Start_IT+0x1ac>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <HAL_ADC_Start_IT+0x1b8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d136      	bne.n	80011c0 <HAL_ADC_Start_IT+0x194>
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_ADC_Start_IT+0x1ac>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d130      	bne.n	80011c0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d129      	bne.n	80011c0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e020      	b.n	80011c0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_ADC_Start_IT+0x1b0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d11b      	bne.n	80011c0 <HAL_ADC_Start_IT+0x194>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d114      	bne.n	80011c0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	e00b      	b.n	80011c0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f043 0210 	orr.w	r2, r3, #16
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	40012300 	.word	0x40012300
 80011dc:	40012000 	.word	0x40012000
 80011e0:	40012100 	.word	0x40012100
 80011e4:	40012200 	.word	0x40012200

080011e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	bf0c      	ite	eq
 8001206:	2301      	moveq	r3, #1
 8001208:	2300      	movne	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	2b20      	cmp	r3, #32
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d049      	beq.n	80012be <HAL_ADC_IRQHandler+0xd6>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d046      	beq.n	80012be <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d12b      	bne.n	80012ae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d127      	bne.n	80012ae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001276:	2b00      	cmp	r3, #0
 8001278:	d119      	bne.n	80012ae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0220 	bic.w	r2, r2, #32
 8001288:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f962 	bl	8000578 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f06f 0212 	mvn.w	r2, #18
 80012bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	2b80      	cmp	r3, #128	; 0x80
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d057      	beq.n	80013a0 <HAL_ADC_IRQHandler+0x1b8>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d054      	beq.n	80013a0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d139      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001334:	2b00      	cmp	r3, #0
 8001336:	d12b      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001342:	2b00      	cmp	r3, #0
 8001344:	d124      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001350:	2b00      	cmp	r3, #0
 8001352:	d11d      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001358:	2b00      	cmp	r3, #0
 800135a:	d119      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 faa9 	bl	80018e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 020c 	mvn.w	r2, #12
 800139e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c0:	2b40      	cmp	r3, #64	; 0x40
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d017      	beq.n	8001402 <HAL_ADC_IRQHandler+0x21a>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d014      	beq.n	8001402 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d10d      	bne.n	8001402 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f846 	bl	8001484 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f06f 0201 	mvn.w	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b20      	cmp	r3, #32
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d015      	beq.n	8001462 <HAL_ADC_IRQHandler+0x27a>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d012      	beq.n	8001462 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0220 	mvn.w	r2, #32
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f820 	bl	8001498 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0220 	mvn.w	r2, #32
 8001460:	601a      	str	r2, [r3, #0]
  }
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1c>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e105      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x228>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d925      	bls.n	8001524 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68d9      	ldr	r1, [r3, #12]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	3b1e      	subs	r3, #30
 80014ee:	2207      	movs	r2, #7
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43da      	mvns	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	400a      	ands	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	4603      	mov	r3, r0
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4403      	add	r3, r0
 8001516:	3b1e      	subs	r3, #30
 8001518:	409a      	lsls	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	e022      	b.n	800156a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	2207      	movs	r2, #7
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	4603      	mov	r3, r0
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4403      	add	r3, r0
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d824      	bhi.n	80015bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b05      	subs	r3, #5
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b05      	subs	r3, #5
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ba:	e04c      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d824      	bhi.n	800160e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b23      	subs	r3, #35	; 0x23
 80015d6:	221f      	movs	r2, #31
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43da      	mvns	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	400a      	ands	r2, r1
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b23      	subs	r3, #35	; 0x23
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	e023      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b41      	subs	r3, #65	; 0x41
 8001620:	221f      	movs	r2, #31
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	400a      	ands	r2, r1
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b41      	subs	r3, #65	; 0x41
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_ADC_ConfigChannel+0x234>)
 8001658:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <HAL_ADC_ConfigChannel+0x238>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d109      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1cc>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b12      	cmp	r3, #18
 800166a:	d105      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_ADC_ConfigChannel+0x238>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d123      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x21e>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d003      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x1e6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b11      	cmp	r3, #17
 8001690:	d11b      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d111      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_ADC_ConfigChannel+0x23c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_ADC_ConfigChannel+0x240>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9a      	lsrs	r2, r3, #18
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40012300 	.word	0x40012300
 80016e4:	40012000 	.word	0x40012000
 80016e8:	20000000 	.word	0x20000000
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <ADC_Init+0x1f0>)
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	431a      	orrs	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001724:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	021a      	lsls	r2, r3, #8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <ADC_Init+0x1f4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d022      	beq.n	80017ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001796:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	e00f      	b.n	80017ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0202 	bic.w	r2, r2, #2
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	005a      	lsls	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800182a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800183a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	3b01      	subs	r3, #1
 8001848:	035a      	lsls	r2, r3, #13
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	e007      	b.n	8001864 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	3b01      	subs	r3, #1
 8001880:	051a      	lsls	r2, r3, #20
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a6:	025a      	lsls	r2, r3, #9
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6899      	ldr	r1, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	029a      	lsls	r2, r3, #10
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40012300 	.word	0x40012300
 80018e4:	0f000001 	.word	0x0f000001

080018e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff4c 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7e:	f7ff ff61 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	6978      	ldr	r0, [r7, #20]
 8001a8a:	f7ff ffb1 	bl	80019f0 <NVIC_EncodePriority>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff80 	bl	800199c <__NVIC_SetPriority>
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff54 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e16b      	b.n	8001db4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 815a 	bne.w	8001dae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80b4 	beq.w	8001dae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b60      	ldr	r3, [pc, #384]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a5f      	ldr	r2, [pc, #380]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x310>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x314>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d02b      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	; (8001dd8 <HAL_GPIO_Init+0x318>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_GPIO_Init+0x31c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x21a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x216>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x32c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x20a>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00e      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cca:	2308      	movs	r3, #8
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf8:	4935      	ldr	r1, [pc, #212]	; (8001dd0 <HAL_GPIO_Init+0x310>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	f67f ae90 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	40021c00 	.word	0x40021c00
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e264      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d075      	beq.n	8001f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4a:	4ba3      	ldr	r3, [pc, #652]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d00c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4ba0      	ldr	r3, [pc, #640]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d112      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e62:	4b9d      	ldr	r3, [pc, #628]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b99      	ldr	r3, [pc, #612]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d05b      	beq.n	8001f34 <HAL_RCC_OscConfig+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d157      	bne.n	8001f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e23f      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x74>
 8001e92:	4b91      	ldr	r3, [pc, #580]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a90      	ldr	r2, [pc, #576]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a8a      	ldr	r2, [pc, #552]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a87      	ldr	r2, [pc, #540]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xb0>
 8001ec4:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a83      	ldr	r2, [pc, #524]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a80      	ldr	r2, [pc, #512]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f82e 	bl	8000f44 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f82a 	bl	8000f44 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e204      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xc0>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f81a 	bl	8000f44 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff f816 	bl	8000f44 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1f0      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0xe8>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d063      	beq.n	800200a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f42:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b62      	ldr	r3, [pc, #392]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1c4      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4952      	ldr	r1, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e03a      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <HAL_RCC_OscConfig+0x2b0>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ffcf 	bl	8000f44 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe ffcb 	bl	8000f44 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1a5      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4940      	ldr	r1, [pc, #256]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e015      	b.n	800200a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x2b0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe ffae 	bl	8000f44 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe ffaa 	bl	8000f44 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e184      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x2b4>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe ff8e 	bl	8000f44 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe ff8a 	bl	8000f44 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e164      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x200>
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x2b4>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe ff77 	bl	8000f44 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe ff73 	bl	8000f44 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e14d      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a0 	beq.w	80021c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_RCC_OscConfig+0x2b8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff39 	bl	8000f44 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e011      	b.n	80020fa <HAL_RCC_OscConfig+0x2ce>
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
 80020e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7fe ff2c 	bl	8000f44 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e106      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_RCC_OscConfig+0x4e4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d106      	bne.n	800211c <HAL_RCC_OscConfig+0x2f0>
 800210e:	4b81      	ldr	r3, [pc, #516]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a80      	ldr	r2, [pc, #512]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	e01c      	b.n	8002156 <HAL_RCC_OscConfig+0x32a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002124:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	4b78      	ldr	r3, [pc, #480]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a77      	ldr	r2, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e00b      	b.n	8002156 <HAL_RCC_OscConfig+0x32a>
 800213e:	4b75      	ldr	r3, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a74      	ldr	r2, [pc, #464]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a71      	ldr	r2, [pc, #452]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d015      	beq.n	800218a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fef1 	bl	8000f44 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe feed 	bl	8000f44 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0c5      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	4b65      	ldr	r3, [pc, #404]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ee      	beq.n	8002166 <HAL_RCC_OscConfig+0x33a>
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7fe fedb 	bl	8000f44 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fed7 	bl	8000f44 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0af      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 809b 	beq.w	8002306 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d05c      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d141      	bne.n	8002268 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_RCC_OscConfig+0x4ec>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe feab 	bl	8000f44 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fea7 	bl	8000f44 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e081      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	019b      	lsls	r3, r3, #6
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4937      	ldr	r1, [pc, #220]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_RCC_OscConfig+0x4ec>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fe80 	bl	8000f44 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fe7c 	bl	8000f44 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e056      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x41c>
 8002266:	e04e      	b.n	8002306 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x4ec>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fe69 	bl	8000f44 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fe65 	bl	8000f44 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e03f      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x44a>
 8002294:	e037      	b.n	8002306 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e032      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <HAL_RCC_OscConfig+0x4e8>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d028      	beq.n	8002302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d11a      	bne.n	8002302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d2:	4013      	ands	r3, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022da:	4293      	cmp	r3, r2
 80022dc:	d111      	bne.n	8002302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40007000 	.word	0x40007000
 8002314:	40023800 	.word	0x40023800
 8002318:	42470060 	.word	0x42470060

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0cc      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d90c      	bls.n	8002358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0b8      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800237a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	494d      	ldr	r1, [pc, #308]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d044      	beq.n	800243c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d119      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e07f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d003      	beq.n	80023da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e06f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e067      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4934      	ldr	r1, [pc, #208]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fd9a 	bl	8000f44 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7fe fd96 	bl	8000f44 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e04f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 020c 	and.w	r2, r3, #12
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	429a      	cmp	r2, r3
 800243a:	d1eb      	bne.n	8002414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d20c      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e032      	b.n	80024ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4916      	ldr	r1, [pc, #88]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a2:	f000 f821 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	490a      	ldr	r1, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fc08 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023c00 	.word	0x40023c00
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08006d78 	.word	0x08006d78
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	2300      	movs	r3, #0
 80024fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002500:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d00d      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x40>
 800250c:	2b08      	cmp	r3, #8
 800250e:	f200 80bd 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002516:	2b04      	cmp	r3, #4
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x3a>
 800251a:	e0b7      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800251e:	60bb      	str	r3, [r7, #8]
       break;
 8002520:	e0b7      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002522:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002524:	60bb      	str	r3, [r7, #8]
      break;
 8002526:	e0b4      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002528:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002530:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002532:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04d      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253e:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	461a      	mov	r2, r3
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	ea02 0800 	and.w	r8, r2, r0
 8002556:	ea03 0901 	and.w	r9, r3, r1
 800255a:	4640      	mov	r0, r8
 800255c:	4649      	mov	r1, r9
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	014b      	lsls	r3, r1, #5
 8002568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800256c:	0142      	lsls	r2, r0, #5
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	ebb0 0008 	subs.w	r0, r0, r8
 8002576:	eb61 0109 	sbc.w	r1, r1, r9
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	018b      	lsls	r3, r1, #6
 8002584:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002588:	0182      	lsls	r2, r0, #6
 800258a:	1a12      	subs	r2, r2, r0
 800258c:	eb63 0301 	sbc.w	r3, r3, r1
 8002590:	f04f 0000 	mov.w	r0, #0
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	00d9      	lsls	r1, r3, #3
 800259a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800259e:	00d0      	lsls	r0, r2, #3
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	eb12 0208 	adds.w	r2, r2, r8
 80025a8:	eb43 0309 	adc.w	r3, r3, r9
 80025ac:	f04f 0000 	mov.w	r0, #0
 80025b0:	f04f 0100 	mov.w	r1, #0
 80025b4:	0259      	lsls	r1, r3, #9
 80025b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025ba:	0250      	lsls	r0, r2, #9
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	f7fd fe58 	bl	8000280 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e04a      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	461a      	mov	r2, r3
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	ea02 0400 	and.w	r4, r2, r0
 80025f2:	ea03 0501 	and.w	r5, r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	014b      	lsls	r3, r1, #5
 8002604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002608:	0142      	lsls	r2, r0, #5
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	1b00      	subs	r0, r0, r4
 8002610:	eb61 0105 	sbc.w	r1, r1, r5
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	018b      	lsls	r3, r1, #6
 800261e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002622:	0182      	lsls	r2, r0, #6
 8002624:	1a12      	subs	r2, r2, r0
 8002626:	eb63 0301 	sbc.w	r3, r3, r1
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	00d9      	lsls	r1, r3, #3
 8002634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002638:	00d0      	lsls	r0, r2, #3
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	1912      	adds	r2, r2, r4
 8002640:	eb45 0303 	adc.w	r3, r5, r3
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	0299      	lsls	r1, r3, #10
 800264e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002652:	0290      	lsls	r0, r2, #10
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	f7fd fe0c 	bl	8000280 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60bb      	str	r3, [r7, #8]
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800268e:	60bb      	str	r3, [r7, #8]
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	68bb      	ldr	r3, [r7, #8]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a9b      	lsrs	r3, r3, #10
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08006d88 	.word	0x08006d88

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0b5b      	lsrs	r3, r3, #13
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08006d88 	.word	0x08006d88

08002714 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	220f      	movs	r2, #15
 8002722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_RCC_GetClockConfig+0x60>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0207 	and.w	r2, r3, #7
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe f9f4 	bl	8000b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fc72 	bl	80030a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e04e      	b.n	80028ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_TIM_Base_Start_IT+0xc4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d022      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d01d      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d018      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x80>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d010      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	e007      	b.n	80028cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000800 	.word	0x40000800
 80028e8:	40000c00 	.word	0x40000c00
 80028ec:	40010400 	.word	0x40010400
 80028f0:	40014000 	.word	0x40014000
 80028f4:	40001800 	.word	0x40001800

080028f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e041      	b.n	800298e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f839 	bl	8002996 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fbb2 	bl	80030a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x24>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e022      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d109      	bne.n	80029ea <HAL_TIM_PWM_Start+0x3e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e015      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x58>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_TIM_PWM_Start+0x6a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07c      	b.n	8002b18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2c:	e013      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0x92>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0xa2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	e003      	b.n	8002a56 <HAL_TIM_PWM_Start+0xaa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fe08 	bl	8003674 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <HAL_TIM_PWM_Start+0x174>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_PWM_Start+0xcc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_TIM_PWM_Start+0x178>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d101      	bne.n	8002a7c <HAL_TIM_PWM_Start+0xd0>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_TIM_PWM_Start+0xd2>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <HAL_TIM_PWM_Start+0x174>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_TIM_PWM_Start+0x17c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_TIM_PWM_Start+0x180>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_TIM_PWM_Start+0x184>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIM_PWM_Start+0x178>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_PWM_Start+0x188>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_PWM_Start+0x136>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_TIM_PWM_Start+0x18c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d111      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d010      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e007      	b.n	8002b16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40010400 	.word	0x40010400
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40001800 	.word	0x40001800

08002b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0202 	mvn.w	r2, #2
 8002b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa70 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa62 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa73 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0204 	mvn.w	r2, #4
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa46 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa38 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fa49 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0208 	mvn.w	r2, #8
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2204      	movs	r2, #4
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa1c 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa0e 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fa1f 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d122      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d11b      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0210 	mvn.w	r2, #16
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9f2 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9e4 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f9f5 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0201 	mvn.w	r2, #1
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd feda 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fd70 	bl	80037cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f9ba 	bl	800308c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d10e      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d107      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0220 	mvn.w	r2, #32
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fd3a 	bl	80037b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0ac      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	f200 809f 	bhi.w	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002db1 	.word	0x08002db1
 8002d80:	08002eb5 	.word	0x08002eb5
 8002d84:	08002eb5 	.word	0x08002eb5
 8002d88:	08002eb5 	.word	0x08002eb5
 8002d8c:	08002df1 	.word	0x08002df1
 8002d90:	08002eb5 	.word	0x08002eb5
 8002d94:	08002eb5 	.word	0x08002eb5
 8002d98:	08002eb5 	.word	0x08002eb5
 8002d9c:	08002e33 	.word	0x08002e33
 8002da0:	08002eb5 	.word	0x08002eb5
 8002da4:	08002eb5 	.word	0x08002eb5
 8002da8:	08002eb5 	.word	0x08002eb5
 8002dac:	08002e73 	.word	0x08002e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fa12 	bl	80031e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e062      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fa62 	bl	80032c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e041      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fab7 	bl	80033ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      break;
 8002e70:	e021      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fb0b 	bl	8003494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]
      break;
 8002eb2:	e000      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002eb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIM_ConfigClockSource+0x18>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e0b3      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x180>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f18:	d03e      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0xd0>
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	f200 8087 	bhi.w	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	f000 8085 	beq.w	8003034 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	d87f      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f30:	2b70      	cmp	r3, #112	; 0x70
 8002f32:	d01a      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xa2>
 8002f34:	2b70      	cmp	r3, #112	; 0x70
 8002f36:	d87b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f38:	2b60      	cmp	r3, #96	; 0x60
 8002f3a:	d050      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x116>
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d877      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f40:	2b50      	cmp	r3, #80	; 0x50
 8002f42:	d03c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0xf6>
 8002f44:	2b50      	cmp	r3, #80	; 0x50
 8002f46:	d873      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d058      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x136>
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d86f      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f50:	2b30      	cmp	r3, #48	; 0x30
 8002f52:	d064      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x156>
 8002f54:	2b30      	cmp	r3, #48	; 0x30
 8002f56:	d86b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d060      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x156>
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d867      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05c      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x156>
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d05a      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f68:	e062      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f000 fb5b 	bl	8003634 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
      break;
 8002f96:	e04e      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f000 fb44 	bl	8003634 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fba:	609a      	str	r2, [r3, #8]
      break;
 8002fbc:	e03b      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 fab8 	bl	8003540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2150      	movs	r1, #80	; 0x50
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fb11 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e02b      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 fad7 	bl	800359e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2160      	movs	r1, #96	; 0x60
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fb01 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e01b      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	461a      	mov	r2, r3
 800300c:	f000 fa98 	bl	8003540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	4618      	mov	r0, r3
 8003018:	f000 faf1 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 800301c:	e00b      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f000 fae8 	bl	80035fe <TIM_ITRx_SetConfig>
        break;
 800302e:	e002      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003034:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a40      	ldr	r2, [pc, #256]	; (80031b4 <TIM_Base_SetConfig+0x114>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030be:	d00f      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <TIM_Base_SetConfig+0x118>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <TIM_Base_SetConfig+0x11c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <TIM_Base_SetConfig+0x120>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <TIM_Base_SetConfig+0x124>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d108      	bne.n	80030f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <TIM_Base_SetConfig+0x114>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d02b      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d027      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <TIM_Base_SetConfig+0x118>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d023      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <TIM_Base_SetConfig+0x11c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <TIM_Base_SetConfig+0x120>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01b      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <TIM_Base_SetConfig+0x124>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d017      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <TIM_Base_SetConfig+0x128>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <TIM_Base_SetConfig+0x12c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <TIM_Base_SetConfig+0x130>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <TIM_Base_SetConfig+0x134>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <TIM_Base_SetConfig+0x138>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a23      	ldr	r2, [pc, #140]	; (80031dc <TIM_Base_SetConfig+0x13c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <TIM_Base_SetConfig+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0xf8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <TIM_Base_SetConfig+0x124>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d103      	bne.n	80031a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	615a      	str	r2, [r3, #20]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40010400 	.word	0x40010400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800
 80031d4:	40001800 	.word	0x40001800
 80031d8:	40001c00 	.word	0x40001c00
 80031dc:	40002000 	.word	0x40002000

080031e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <TIM_OC1_SetConfig+0xd8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_OC1_SetConfig+0x64>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <TIM_OC1_SetConfig+0xdc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d10c      	bne.n	800325e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0308 	bic.w	r3, r3, #8
 800324a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <TIM_OC1_SetConfig+0xd8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_OC1_SetConfig+0x8e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <TIM_OC1_SetConfig+0xdc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d111      	bne.n	8003292 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40010400 	.word	0x40010400

080032c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0210 	bic.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0320 	bic.w	r3, r3, #32
 800330a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <TIM_OC2_SetConfig+0xe4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC2_SetConfig+0x68>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <TIM_OC2_SetConfig+0xe8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10d      	bne.n	8003344 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <TIM_OC2_SetConfig+0xe4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_OC2_SetConfig+0x94>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <TIM_OC2_SetConfig+0xe8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d113      	bne.n	800337c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800335a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40010400 	.word	0x40010400

080033ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a21      	ldr	r2, [pc, #132]	; (800348c <TIM_OC3_SetConfig+0xe0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_OC3_SetConfig+0x66>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a20      	ldr	r2, [pc, #128]	; (8003490 <TIM_OC3_SetConfig+0xe4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10d      	bne.n	800342e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a16      	ldr	r2, [pc, #88]	; (800348c <TIM_OC3_SetConfig+0xe0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC3_SetConfig+0x92>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <TIM_OC3_SetConfig+0xe4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d113      	bne.n	8003466 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40010000 	.word	0x40010000
 8003490:	40010400 	.word	0x40010400

08003494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	031b      	lsls	r3, r3, #12
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <TIM_OC4_SetConfig+0xa4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d003      	beq.n	80034fc <TIM_OC4_SetConfig+0x68>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a11      	ldr	r2, [pc, #68]	; (800353c <TIM_OC4_SetConfig+0xa8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d109      	bne.n	8003510 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40010400 	.word	0x40010400

08003540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 030a 	bic.w	r3, r3, #10
 800357c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359e:	b480      	push	{r7}
 80035a0:	b087      	sub	sp, #28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0210 	bic.w	r2, r3, #16
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 0307 	orr.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	431a      	orrs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e05a      	b.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a21      	ldr	r2, [pc, #132]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d01d      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10c      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40010000 	.word	0x40010000
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	40010400 	.word	0x40010400
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40001800 	.word	0x40001800

080037b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e03f      	b.n	8003872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fa1e 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	; 0x24
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f905 	bl	8003a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b08a      	sub	sp, #40	; 0x28
 800387e:	af02      	add	r7, sp, #8
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b20      	cmp	r3, #32
 8003898:	d17c      	bne.n	8003994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_UART_Transmit+0x2c>
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e075      	b.n	8003996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Transmit+0x3e>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e06e      	b.n	8003996 <HAL_UART_Transmit+0x11c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2221      	movs	r2, #33	; 0x21
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ce:	f7fd fb39 	bl	8000f44 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d108      	bne.n	80038fc <HAL_UART_Transmit+0x82>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e003      	b.n	8003904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800390c:	e02a      	b.n	8003964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f840 	bl	800399e <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e036      	b.n	8003996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3302      	adds	r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e007      	b.n	8003956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1cf      	bne.n	800390e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f810 	bl	800399e <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e006      	b.n	8003996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ae:	e02c      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d028      	beq.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x30>
 80039be:	f7fd fac1 	bl	8000f44 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d21d      	bcs.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e00f      	b.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d0c3      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	b09f      	sub	sp, #124	; 0x7c
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	68d9      	ldr	r1, [r3, #12]
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	ea40 0301 	orr.w	r3, r0, r1
 8003a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a78:	f021 010c 	bic.w	r1, r1, #12
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a82:	430b      	orrs	r3, r1
 8003a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	6999      	ldr	r1, [r3, #24]
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	ea40 0301 	orr.w	r3, r0, r1
 8003a9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4bc5      	ldr	r3, [pc, #788]	; (8003db8 <UART_SetConfig+0x384>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d004      	beq.n	8003ab2 <UART_SetConfig+0x7e>
 8003aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4bc3      	ldr	r3, [pc, #780]	; (8003dbc <UART_SetConfig+0x388>)
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d103      	bne.n	8003aba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab2:	f7fe fe1b 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003ab6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ab8:	e002      	b.n	8003ac0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aba:	f7fe fe03 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003abe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	f040 80b6 	bne.w	8003c38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ace:	461c      	mov	r4, r3
 8003ad0:	f04f 0500 	mov.w	r5, #0
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	462b      	mov	r3, r5
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	6439      	str	r1, [r7, #64]	; 0x40
 8003adc:	415b      	adcs	r3, r3
 8003ade:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ae4:	1912      	adds	r2, r2, r4
 8003ae6:	eb45 0303 	adc.w	r3, r5, r3
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	00d9      	lsls	r1, r3, #3
 8003af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af8:	00d0      	lsls	r0, r2, #3
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	1911      	adds	r1, r2, r4
 8003b00:	6639      	str	r1, [r7, #96]	; 0x60
 8003b02:	416b      	adcs	r3, r5
 8003b04:	667b      	str	r3, [r7, #100]	; 0x64
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b14:	415b      	adcs	r3, r3
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b20:	f7fc fbae 	bl	8000280 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4ba5      	ldr	r3, [pc, #660]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	011e      	lsls	r6, r3, #4
 8003b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b34:	461c      	mov	r4, r3
 8003b36:	f04f 0500 	mov.w	r5, #0
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	462b      	mov	r3, r5
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	6339      	str	r1, [r7, #48]	; 0x30
 8003b42:	415b      	adcs	r3, r3
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
 8003b46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b4a:	1912      	adds	r2, r2, r4
 8003b4c:	eb45 0303 	adc.w	r3, r5, r3
 8003b50:	f04f 0000 	mov.w	r0, #0
 8003b54:	f04f 0100 	mov.w	r1, #0
 8003b58:	00d9      	lsls	r1, r3, #3
 8003b5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b5e:	00d0      	lsls	r0, r2, #3
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	1911      	adds	r1, r2, r4
 8003b66:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b68:	416b      	adcs	r3, r5
 8003b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	1891      	adds	r1, r2, r2
 8003b78:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b7a:	415b      	adcs	r3, r3
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b86:	f7fc fb7b 	bl	8000280 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4b8c      	ldr	r3, [pc, #560]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003b90:	fba3 1302 	umull	r1, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2164      	movs	r1, #100	; 0x64
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a87      	ldr	r2, [pc, #540]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb0:	441e      	add	r6, r3
 8003bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	1894      	adds	r4, r2, r2
 8003bc0:	623c      	str	r4, [r7, #32]
 8003bc2:	415b      	adcs	r3, r3
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bca:	1812      	adds	r2, r2, r0
 8003bcc:	eb41 0303 	adc.w	r3, r1, r3
 8003bd0:	f04f 0400 	mov.w	r4, #0
 8003bd4:	f04f 0500 	mov.w	r5, #0
 8003bd8:	00dd      	lsls	r5, r3, #3
 8003bda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bde:	00d4      	lsls	r4, r2, #3
 8003be0:	4622      	mov	r2, r4
 8003be2:	462b      	mov	r3, r5
 8003be4:	1814      	adds	r4, r2, r0
 8003be6:	653c      	str	r4, [r7, #80]	; 0x50
 8003be8:	414b      	adcs	r3, r1
 8003bea:	657b      	str	r3, [r7, #84]	; 0x54
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	61b9      	str	r1, [r7, #24]
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c06:	f7fc fb3b 	bl	8000280 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	; 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	3332      	adds	r3, #50	; 0x32
 8003c22:	4a67      	ldr	r2, [pc, #412]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 0207 	and.w	r2, r3, #7
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4432      	add	r2, r6
 8003c34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c36:	e0b9      	b.n	8003dac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	f04f 0500 	mov.w	r5, #0
 8003c40:	4622      	mov	r2, r4
 8003c42:	462b      	mov	r3, r5
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	6139      	str	r1, [r7, #16]
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c50:	1912      	adds	r2, r2, r4
 8003c52:	eb45 0303 	adc.w	r3, r5, r3
 8003c56:	f04f 0000 	mov.w	r0, #0
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	00d9      	lsls	r1, r3, #3
 8003c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c64:	00d0      	lsls	r0, r2, #3
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	eb12 0804 	adds.w	r8, r2, r4
 8003c6e:	eb43 0905 	adc.w	r9, r3, r5
 8003c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	008b      	lsls	r3, r1, #2
 8003c86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c8a:	0082      	lsls	r2, r0, #2
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	4649      	mov	r1, r9
 8003c90:	f7fc faf6 	bl	8000280 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	011e      	lsls	r6, r3, #4
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	1894      	adds	r4, r2, r2
 8003cb0:	60bc      	str	r4, [r7, #8]
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cba:	1812      	adds	r2, r2, r0
 8003cbc:	eb41 0303 	adc.w	r3, r1, r3
 8003cc0:	f04f 0400 	mov.w	r4, #0
 8003cc4:	f04f 0500 	mov.w	r5, #0
 8003cc8:	00dd      	lsls	r5, r3, #3
 8003cca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cce:	00d4      	lsls	r4, r2, #3
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	1814      	adds	r4, r2, r0
 8003cd6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	008b      	lsls	r3, r1, #2
 8003cf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cf4:	0082      	lsls	r2, r0, #2
 8003cf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cfa:	f7fc fac1 	bl	8000280 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d22:	441e      	add	r6, r3
 8003d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d26:	4618      	mov	r0, r3
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	1894      	adds	r4, r2, r2
 8003d32:	603c      	str	r4, [r7, #0]
 8003d34:	415b      	adcs	r3, r3
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d3c:	1812      	adds	r2, r2, r0
 8003d3e:	eb41 0303 	adc.w	r3, r1, r3
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	f04f 0500 	mov.w	r5, #0
 8003d4a:	00dd      	lsls	r5, r3, #3
 8003d4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d50:	00d4      	lsls	r4, r2, #3
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	eb12 0a00 	adds.w	sl, r2, r0
 8003d5a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	008b      	lsls	r3, r1, #2
 8003d72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d76:	0082      	lsls	r2, r0, #2
 8003d78:	4650      	mov	r0, sl
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	f7fc fa80 	bl	8000280 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003d86:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2164      	movs	r1, #100	; 0x64
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	3332      	adds	r3, #50	; 0x32
 8003d98:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <UART_SetConfig+0x38c>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4432      	add	r2, r6
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	377c      	adds	r7, #124	; 0x7c
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	40011000 	.word	0x40011000
 8003dbc:	40011400 	.word	0x40011400
 8003dc0:	51eb851f 	.word	0x51eb851f

08003dc4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f103 0208 	add.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f103 0208 	add.w	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f103 0208 	add.w	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d103      	bne.n	8003e86 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e00c      	b.n	8003ea0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e002      	b.n	8003e94 <vListInsert+0x2e>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d2f6      	bcs.n	8003e8e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6852      	ldr	r2, [r2, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1e5a      	subs	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003f56:	f001 ff57 	bl	8005e08 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	3b01      	subs	r3, #1
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f84d 	bl	8005058 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <xQueueGenericReset+0xcc>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	e009      	b.n	8003fea <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3310      	adds	r3, #16
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fef2 	bl	8003dc4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff feed 	bl	8003dc4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003fea:	f001 ff3d 	bl	8005e68 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003fee:	2301      	movs	r3, #1
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	; 0x30
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	61bb      	str	r3, [r7, #24]
    }
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <xQueueGenericCreate+0x48>
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d101      	bne.n	8004048 <xQueueGenericCreate+0x4c>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <xQueueGenericCreate+0x4e>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <xQueueGenericCreate+0x68>
        __asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	617b      	str	r3, [r7, #20]
    }
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800406a:	d90a      	bls.n	8004082 <xQueueGenericCreate+0x86>
        __asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	613b      	str	r3, [r7, #16]
    }
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	3350      	adds	r3, #80	; 0x50
 8004086:	4618      	mov	r0, r3
 8004088:	f001 ffe0 	bl	800604c <pvPortMalloc>
 800408c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3350      	adds	r3, #80	; 0x50
 800409c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800409e:	79fa      	ldrb	r2, [r7, #7]
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f805 	bl	80040ba <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
    }
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e002      	b.n	80040dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040e8:	2101      	movs	r1, #1
 80040ea:	69b8      	ldr	r0, [r7, #24]
 80040ec:	f7ff ff1e 	bl	8003f2c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08e      	sub	sp, #56	; 0x38
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xQueueGenericSend+0x32>
        __asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <xQueueGenericSend+0x40>
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <xQueueGenericSend+0x44>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <xQueueGenericSend+0x46>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <xQueueGenericSend+0x60>
        __asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d103      	bne.n	800416e <xQueueGenericSend+0x6e>
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <xQueueGenericSend+0x72>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <xQueueGenericSend+0x74>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <xQueueGenericSend+0x8e>
        __asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	623b      	str	r3, [r7, #32]
    }
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800418e:	f001 f8ff 	bl	8005390 <xTaskGetSchedulerState>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <xQueueGenericSend+0x9e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <xQueueGenericSend+0xa2>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <xQueueGenericSend+0xa4>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xQueueGenericSend+0xbe>
        __asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61fb      	str	r3, [r7, #28]
    }
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80041be:	f001 fe23 	bl	8005e08 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <xQueueGenericSend+0xd4>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d129      	bne.n	8004228 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041da:	f000 fa19 	bl	8004610 <prvCopyDataToQueue>
 80041de:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	3324      	adds	r3, #36	; 0x24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 ff33 	bl	8005058 <xTaskRemoveFromEventList>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80041f8:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <xQueueGenericSend+0x1f8>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	e00a      	b.n	8004220 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004210:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <xQueueGenericSend+0x1f8>)
 8004212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004220:	f001 fe22 	bl	8005e68 <vPortExitCritical>
                return pdPASS;
 8004224:	2301      	movs	r3, #1
 8004226:	e063      	b.n	80042f0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800422e:	f001 fe1b 	bl	8005e68 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004232:	2300      	movs	r3, #0
 8004234:	e05c      	b.n	80042f0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4618      	mov	r0, r3
 8004242:	f000 ff6b 	bl	800511c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800424a:	f001 fe0d 	bl	8005e68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800424e:	f000 fce5 	bl	8004c1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004252:	f001 fdd9 	bl	8005e08 <vPortEnterCritical>
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800425c:	b25b      	sxtb	r3, r3
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d103      	bne.n	800426c <xQueueGenericSend+0x16c>
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004272:	b25b      	sxtb	r3, r3
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d103      	bne.n	8004282 <xQueueGenericSend+0x182>
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004282:	f001 fdf1 	bl	8005e68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004286:	1d3a      	adds	r2, r7, #4
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 ff5a 	bl	8005148 <xTaskCheckForTimeOut>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d124      	bne.n	80042e4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800429a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800429c:	f000 fab0 	bl	8004800 <prvIsQueueFull>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	3310      	adds	r3, #16
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fe82 	bl	8004fb8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80042b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b6:	f000 fa3b 	bl	8004730 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80042ba:	f000 fcbd 	bl	8004c38 <xTaskResumeAll>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f af7c 	bne.w	80041be <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <xQueueGenericSend+0x1f8>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	e772      	b.n	80041be <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80042d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042da:	f000 fa29 	bl	8004730 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80042de:	f000 fcab 	bl	8004c38 <xTaskResumeAll>
 80042e2:	e76c      	b.n	80041be <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80042e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e6:	f000 fa23 	bl	8004730 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80042ea:	f000 fca5 	bl	8004c38 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80042ee:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3738      	adds	r7, #56	; 0x38
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b090      	sub	sp, #64	; 0x40
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <xQueueGenericSendFromISR+0x3c>
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <xQueueGenericSendFromISR+0x40>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <xQueueGenericSendFromISR+0x42>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d103      	bne.n	8004366 <xQueueGenericSendFromISR+0x6a>
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <xQueueGenericSendFromISR+0x6e>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <xQueueGenericSendFromISR+0x70>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	623b      	str	r3, [r7, #32]
    }
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004386:	f001 fe21 	bl	8005fcc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800438a:	f3ef 8211 	mrs	r2, BASEPRI
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	61fa      	str	r2, [r7, #28]
 80043a0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80043a2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <xQueueGenericSendFromISR+0xbc>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d13e      	bne.n	8004436 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043ce:	f000 f91f 	bl	8004610 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80043d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d112      	bne.n	8004402 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d025      	beq.n	8004430 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	3324      	adds	r3, #36	; 0x24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fe35 	bl	8005058 <xTaskRemoveFromEventList>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01d      	beq.n	8004430 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01a      	beq.n	8004430 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e016      	b.n	8004430 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004402:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004406:	2b7f      	cmp	r3, #127	; 0x7f
 8004408:	d10a      	bne.n	8004420 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	617b      	str	r3, [r7, #20]
    }
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004420:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004424:	3301      	adds	r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	b25a      	sxtb	r2, r3
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004430:	2301      	movs	r3, #1
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004434:	e001      	b.n	800443a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004436:	2300      	movs	r3, #0
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004444:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004448:	4618      	mov	r0, r3
 800444a:	3740      	adds	r7, #64	; 0x40
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	; 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800445c:	2300      	movs	r3, #0
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <xQueueReceive+0x30>
        __asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	623b      	str	r3, [r7, #32]
    }
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <xQueueReceive+0x3e>
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <xQueueReceive+0x42>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueReceive+0x44>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xQueueReceive+0x5e>
        __asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	61fb      	str	r3, [r7, #28]
    }
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ae:	f000 ff6f 	bl	8005390 <xTaskGetSchedulerState>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <xQueueReceive+0x6e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <xQueueReceive+0x72>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <xQueueReceive+0x74>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <xQueueReceive+0x8e>
        __asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	61bb      	str	r3, [r7, #24]
    }
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044de:	f001 fc93 	bl	8005e08 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01f      	beq.n	800452e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f2:	f000 f8f7 	bl	80046e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	1e5a      	subs	r2, r3, #1
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00f      	beq.n	8004526 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	3310      	adds	r3, #16
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fda4 	bl	8005058 <xTaskRemoveFromEventList>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004516:	4b3d      	ldr	r3, [pc, #244]	; (800460c <xQueueReceive+0x1bc>)
 8004518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004526:	f001 fc9f 	bl	8005e68 <vPortExitCritical>
                return pdPASS;
 800452a:	2301      	movs	r3, #1
 800452c:	e069      	b.n	8004602 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d103      	bne.n	800453c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004534:	f001 fc98 	bl	8005e68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004538:	2300      	movs	r3, #0
 800453a:	e062      	b.n	8004602 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004542:	f107 0310 	add.w	r3, r7, #16
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fde8 	bl	800511c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004550:	f001 fc8a 	bl	8005e68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004554:	f000 fb62 	bl	8004c1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004558:	f001 fc56 	bl	8005e08 <vPortEnterCritical>
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004562:	b25b      	sxtb	r3, r3
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d103      	bne.n	8004572 <xQueueReceive+0x122>
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004578:	b25b      	sxtb	r3, r3
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d103      	bne.n	8004588 <xQueueReceive+0x138>
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004588:	f001 fc6e 	bl	8005e68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800458c:	1d3a      	adds	r2, r7, #4
 800458e:	f107 0310 	add.w	r3, r7, #16
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fdd7 	bl	8005148 <xTaskCheckForTimeOut>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d123      	bne.n	80045e8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a2:	f000 f917 	bl	80047d4 <prvIsQueueEmpty>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d017      	beq.n	80045dc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	3324      	adds	r3, #36	; 0x24
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fcff 	bl	8004fb8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80045ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045bc:	f000 f8b8 	bl	8004730 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80045c0:	f000 fb3a 	bl	8004c38 <xTaskResumeAll>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d189      	bne.n	80044de <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <xQueueReceive+0x1bc>)
 80045cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	e780      	b.n	80044de <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80045dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045de:	f000 f8a7 	bl	8004730 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045e2:	f000 fb29 	bl	8004c38 <xTaskResumeAll>
 80045e6:	e77a      	b.n	80044de <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80045e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ea:	f000 f8a1 	bl	8004730 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045ee:	f000 fb23 	bl	8004c38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f4:	f000 f8ee 	bl	80047d4 <prvIsQueueEmpty>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f43f af6f 	beq.w	80044de <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004600:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004602:	4618      	mov	r0, r3
 8004604:	3730      	adds	r7, #48	; 0x30
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d14d      	bne.n	80046d2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fec6 	bl	80053cc <xTaskPriorityDisinherit>
 8004640:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	e043      	b.n	80046d2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d119      	bne.n	8004684 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6858      	ldr	r0, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	461a      	mov	r2, r3
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	f001 ff1e 	bl	800649c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	d32b      	bcc.n	80046d2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e026      	b.n	80046d2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68d8      	ldr	r0, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	461a      	mov	r2, r3
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	f001 ff04 	bl	800649c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	425b      	negs	r3, r3
 800469e:	441a      	add	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d207      	bcs.n	80046c0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	425b      	negs	r3, r3
 80046ba:	441a      	add	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d105      	bne.n	80046d2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	d303      	bcc.n	8004718 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	461a      	mov	r2, r3
 8004722:	6838      	ldr	r0, [r7, #0]
 8004724:	f001 feba 	bl	800649c <memcpy>
    }
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004738:	f001 fb66 	bl	8005e08 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004742:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004744:	e011      	b.n	800476a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3324      	adds	r3, #36	; 0x24
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fc80 	bl	8005058 <xTaskRemoveFromEventList>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800475e:	f000 fd59 	bl	8005214 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	3b01      	subs	r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800476a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	dce9      	bgt.n	8004746 <prvUnlockQueue+0x16>
 8004772:	e000      	b.n	8004776 <prvUnlockQueue+0x46>
                        break;
 8004774:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	22ff      	movs	r2, #255	; 0xff
 800477a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800477e:	f001 fb73 	bl	8005e68 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004782:	f001 fb41 	bl	8005e08 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800478c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800478e:	e011      	b.n	80047b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d012      	beq.n	80047be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3310      	adds	r3, #16
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fc5b 	bl	8005058 <xTaskRemoveFromEventList>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80047a8:	f000 fd34 	bl	8005214 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	dce9      	bgt.n	8004790 <prvUnlockQueue+0x60>
 80047bc:	e000      	b.n	80047c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80047be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80047c8:	f001 fb4e 	bl	8005e68 <vPortExitCritical>
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80047dc:	f001 fb14 	bl	8005e08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e001      	b.n	80047f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80047f2:	f001 fb39 	bl	8005e68 <vPortExitCritical>

    return xReturn;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004808:	f001 fafe 	bl	8005e08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	429a      	cmp	r2, r3
 8004816:	d102      	bne.n	800481e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004818:	2301      	movs	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e001      	b.n	8004822 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004822:	f001 fb21 	bl	8005e68 <vPortExitCritical>

    return xReturn;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e014      	b.n	800486a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <vQueueAddToRegistry+0x50>)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800484c:	490c      	ldr	r1, [pc, #48]	; (8004880 <vQueueAddToRegistry+0x50>)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <vQueueAddToRegistry+0x50>)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004862:	e006      	b.n	8004872 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b07      	cmp	r3, #7
 800486e:	d9e7      	bls.n	8004840 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20012f30 	.word	0x20012f30

08004884 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004894:	f001 fab8 	bl	8005e08 <vPortEnterCritical>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800489e:	b25b      	sxtb	r3, r3
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d103      	bne.n	80048ae <vQueueWaitForMessageRestricted+0x2a>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b4:	b25b      	sxtb	r3, r3
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d103      	bne.n	80048c4 <vQueueWaitForMessageRestricted+0x40>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	f001 fad0 	bl	8005e68 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fb91 	bl	8005000 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff ff26 	bl	8004730 <prvUnlockQueue>
    }
 80048e4:	bf00      	nop
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08c      	sub	sp, #48	; 0x30
 80048f0:	af04      	add	r7, sp, #16
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4618      	mov	r0, r3
 8004902:	f001 fba3 	bl	800604c <pvPortMalloc>
 8004906:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00e      	beq.n	800492c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800490e:	2058      	movs	r0, #88	; 0x58
 8004910:	f001 fb9c 	bl	800604c <pvPortMalloc>
 8004914:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
 8004922:	e005      	b.n	8004930 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004924:	6978      	ldr	r0, [r7, #20]
 8004926:	f001 fc71 	bl	800620c <vPortFree>
 800492a:	e001      	b.n	8004930 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d013      	beq.n	800495e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	2300      	movs	r3, #0
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f80e 	bl	800496e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004952:	69f8      	ldr	r0, [r7, #28]
 8004954:	f000 f8a2 	bl	8004a9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	e002      	b.n	8004964 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004964:	69bb      	ldr	r3, [r7, #24]
    }
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b088      	sub	sp, #32
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	461a      	mov	r2, r3
 8004986:	21a5      	movs	r1, #165	; 0xa5
 8004988:	f001 fd96 	bl	80064b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004996:	3b01      	subs	r3, #1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f023 0307 	bic.w	r3, r3, #7
 80049a4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	617b      	str	r3, [r7, #20]
    }
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01f      	beq.n	8004a0c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e012      	b.n	80049f8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	7819      	ldrb	r1, [r3, #0]
 80049da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	3334      	adds	r3, #52	; 0x34
 80049e2:	460a      	mov	r2, r1
 80049e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b09      	cmp	r3, #9
 80049fc:	d9e9      	bls.n	80049d2 <prvInitialiseNewTask+0x64>
 80049fe:	e000      	b.n	8004a02 <prvInitialiseNewTask+0x94>
            {
                break;
 8004a00:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a0a:	e003      	b.n	8004a14 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d901      	bls.n	8004a1e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a28:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff f9e5 	bl	8003e04 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff f9e0 	bl	8003e04 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a48:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	f1c3 0205 	rsb	r2, r3, #5
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	3350      	adds	r3, #80	; 0x50
 8004a5e:	2204      	movs	r2, #4
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fd28 	bl	80064b8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	3354      	adds	r3, #84	; 0x54
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fd21 	bl	80064b8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	69b8      	ldr	r0, [r7, #24]
 8004a7c:	f001 f898 	bl	8005bb0 <pxPortInitialiseStack>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a92:	bf00      	nop
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004aa4:	f001 f9b0 	bl	8005e08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004aa8:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <prvAddNewTaskToReadyList+0xc0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <prvAddNewTaskToReadyList+0xc0>)
 8004ab0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004aba:	4a29      	ldr	r2, [pc, #164]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ac0:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <prvAddNewTaskToReadyList+0xc0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d110      	bne.n	8004aea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004ac8:	f000 fbc8 	bl	800525c <prvInitialiseTaskLists>
 8004acc:	e00d      	b.n	8004aea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004ace:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d802      	bhi.n	8004aea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004aea:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <prvAddNewTaskToReadyList+0xcc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <prvAddNewTaskToReadyList+0xcc>)
 8004af2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <prvAddNewTaskToReadyList+0xcc>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	2201      	movs	r2, #1
 8004b02:	409a      	lsls	r2, r3
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <prvAddNewTaskToReadyList+0xd0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <prvAddNewTaskToReadyList+0xd0>)
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <prvAddNewTaskToReadyList+0xd4>)
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7ff f97a 	bl	8003e1e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004b2a:	f001 f99d 	bl	8005e68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d207      	bcs.n	8004b54 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <prvAddNewTaskToReadyList+0xd8>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000174 	.word	0x20000174
 8004b60:	2000009c 	.word	0x2000009c
 8004b64:	20000180 	.word	0x20000180
 8004b68:	20000190 	.word	0x20000190
 8004b6c:	2000017c 	.word	0x2000017c
 8004b70:	200000a0 	.word	0x200000a0
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <vTaskStartScheduler+0x88>)
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2300      	movs	r3, #0
 8004b88:	2282      	movs	r2, #130	; 0x82
 8004b8a:	491e      	ldr	r1, [pc, #120]	; (8004c04 <vTaskStartScheduler+0x8c>)
 8004b8c:	481e      	ldr	r0, [pc, #120]	; (8004c08 <vTaskStartScheduler+0x90>)
 8004b8e:	f7ff fead 	bl	80048ec <xTaskCreate>
 8004b92:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004b9a:	f000 fcf7 	bl	800558c <xTimerCreateTimerTask>
 8004b9e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d116      	bne.n	8004bd4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60bb      	str	r3, [r7, #8]
    }
 8004bb8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <vTaskStartScheduler+0x94>)
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <vTaskStartScheduler+0x98>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <vTaskStartScheduler+0x9c>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004bce:	f001 f879 	bl	8005cc4 <xPortStartScheduler>
 8004bd2:	e00e      	b.n	8004bf2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d10a      	bne.n	8004bf2 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	607b      	str	r3, [r7, #4]
    }
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <vTaskStartScheduler+0xa0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000198 	.word	0x20000198
 8004c04:	08006d60 	.word	0x08006d60
 8004c08:	0800522d 	.word	0x0800522d
 8004c0c:	20000194 	.word	0x20000194
 8004c10:	20000180 	.word	0x20000180
 8004c14:	20000178 	.word	0x20000178
 8004c18:	2000000c 	.word	0x2000000c

08004c1c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <vTaskSuspendAll+0x18>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a03      	ldr	r2, [pc, #12]	; (8004c34 <vTaskSuspendAll+0x18>)
 8004c28:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	2000019c 	.word	0x2000019c

08004c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <xTaskResumeAll+0x114>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <xTaskResumeAll+0x2c>
        __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	603b      	str	r3, [r7, #0]
    }
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004c64:	f001 f8d0 	bl	8005e08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004c68:	4b38      	ldr	r3, [pc, #224]	; (8004d4c <xTaskResumeAll+0x114>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a37      	ldr	r2, [pc, #220]	; (8004d4c <xTaskResumeAll+0x114>)
 8004c70:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c72:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <xTaskResumeAll+0x114>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d161      	bne.n	8004d3e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c7a:	4b35      	ldr	r3, [pc, #212]	; (8004d50 <xTaskResumeAll+0x118>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d05d      	beq.n	8004d3e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c82:	e02e      	b.n	8004ce2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c84:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <xTaskResumeAll+0x11c>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3318      	adds	r3, #24
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff f921 	bl	8003ed8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff f91c 	bl	8003ed8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <xTaskResumeAll+0x120>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	4a2a      	ldr	r2, [pc, #168]	; (8004d58 <xTaskResumeAll+0x120>)
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <xTaskResumeAll+0x124>)
 8004cc0:	441a      	add	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7ff f8a8 	bl	8003e1e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <xTaskResumeAll+0x128>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <xTaskResumeAll+0x12c>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <xTaskResumeAll+0x11c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1cc      	bne.n	8004c84 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004cf0:	f000 fb32 	bl	8005358 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <xTaskResumeAll+0x130>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004d00:	f000 f846 	bl	8004d90 <xTaskIncrementTick>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <xTaskResumeAll+0x12c>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f1      	bne.n	8004d00 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <xTaskResumeAll+0x130>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <xTaskResumeAll+0x12c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <xTaskResumeAll+0x134>)
 8004d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004d3e:	f001 f893 	bl	8005e68 <vPortExitCritical>

    return xAlreadyYielded;
 8004d42:	68bb      	ldr	r3, [r7, #8]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	2000019c 	.word	0x2000019c
 8004d50:	20000174 	.word	0x20000174
 8004d54:	20000134 	.word	0x20000134
 8004d58:	2000017c 	.word	0x2000017c
 8004d5c:	200000a0 	.word	0x200000a0
 8004d60:	2000009c 	.word	0x2000009c
 8004d64:	20000188 	.word	0x20000188
 8004d68:	20000184 	.word	0x20000184
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <xTaskGetTickCount+0x1c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004d7c:	687b      	ldr	r3, [r7, #4]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000178 	.word	0x20000178

08004d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <xTaskIncrementTick+0x144>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 808e 	bne.w	8004ec0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <xTaskIncrementTick+0x148>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004dac:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <xTaskIncrementTick+0x148>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d120      	bne.n	8004dfa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004db8:	4b48      	ldr	r3, [pc, #288]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <xTaskIncrementTick+0x48>
        __asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
    }
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xTaskIncrementTick+0x46>
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	4b40      	ldr	r3, [pc, #256]	; (8004ee0 <xTaskIncrementTick+0x150>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4a3e      	ldr	r2, [pc, #248]	; (8004ee0 <xTaskIncrementTick+0x150>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <xTaskIncrementTick+0x154>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <xTaskIncrementTick+0x154>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	f000 faaf 	bl	8005358 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <xTaskIncrementTick+0x158>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d348      	bcc.n	8004e96 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <xTaskIncrementTick+0x158>)
 8004e10:	f04f 32ff 	mov.w	r2, #4294967295
 8004e14:	601a      	str	r2, [r3, #0]
                    break;
 8004e16:	e03e      	b.n	8004e96 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <xTaskIncrementTick+0x14c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d203      	bcs.n	8004e38 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004e30:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <xTaskIncrementTick+0x158>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e36:	e02e      	b.n	8004e96 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f84b 	bl	8003ed8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3318      	adds	r3, #24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f842 	bl	8003ed8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	4b23      	ldr	r3, [pc, #140]	; (8004eec <xTaskIncrementTick+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <xTaskIncrementTick+0x15c>)
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <xTaskIncrementTick+0x160>)
 8004e74:	441a      	add	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fe ffce 	bl	8003e1e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <xTaskIncrementTick+0x164>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d3b9      	bcc.n	8004e04 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e94:	e7b6      	b.n	8004e04 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e96:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <xTaskIncrementTick+0x164>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4914      	ldr	r1, [pc, #80]	; (8004ef0 <xTaskIncrementTick+0x160>)
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d901      	bls.n	8004eb2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <xTaskIncrementTick+0x168>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e004      	b.n	8004eca <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <xTaskIncrementTick+0x16c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <xTaskIncrementTick+0x16c>)
 8004ec8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004eca:	697b      	ldr	r3, [r7, #20]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	2000019c 	.word	0x2000019c
 8004ed8:	20000178 	.word	0x20000178
 8004edc:	2000012c 	.word	0x2000012c
 8004ee0:	20000130 	.word	0x20000130
 8004ee4:	2000018c 	.word	0x2000018c
 8004ee8:	20000194 	.word	0x20000194
 8004eec:	2000017c 	.word	0x2000017c
 8004ef0:	200000a0 	.word	0x200000a0
 8004ef4:	2000009c 	.word	0x2000009c
 8004ef8:	20000188 	.word	0x20000188
 8004efc:	20000184 	.word	0x20000184

08004f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <vTaskSwitchContext+0xa4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <vTaskSwitchContext+0xa8>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004f14:	e03f      	b.n	8004f96 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <vTaskSwitchContext+0xa8>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1c:	4b23      	ldr	r3, [pc, #140]	; (8004fac <vTaskSwitchContext+0xac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
 8004f2c:	f1c3 031f 	rsb	r3, r3, #31
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	491f      	ldr	r1, [pc, #124]	; (8004fb0 <vTaskSwitchContext+0xb0>)
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	607b      	str	r3, [r7, #4]
    }
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <vTaskSwitchContext+0x5a>
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <vTaskSwitchContext+0xb0>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d104      	bne.n	8004f8c <vTaskSwitchContext+0x8c>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <vTaskSwitchContext+0xb4>)
 8004f94:	6013      	str	r3, [r2, #0]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000019c 	.word	0x2000019c
 8004fa8:	20000188 	.word	0x20000188
 8004fac:	2000017c 	.word	0x2000017c
 8004fb0:	200000a0 	.word	0x200000a0
 8004fb4:	2000009c 	.word	0x2000009c

08004fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
    }
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <vTaskPlaceOnEventList+0x44>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3318      	adds	r3, #24
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fe ff3d 	bl	8003e66 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fec:	2101      	movs	r1, #1
 8004fee:	6838      	ldr	r0, [r7, #0]
 8004ff0:	f000 fa66 	bl	80054c0 <prvAddCurrentTaskToDelayedList>
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	2000009c 	.word	0x2000009c

08005000 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	617b      	str	r3, [r7, #20]
    }
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <vTaskPlaceOnEventListRestricted+0x54>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3318      	adds	r3, #24
 800502e:	4619      	mov	r1, r3
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7fe fef4 	bl	8003e1e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f000 fa3b 	bl	80054c0 <prvAddCurrentTaskToDelayedList>
    }
 800504a:	bf00      	nop
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2000009c 	.word	0x2000009c

08005058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
    }
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3318      	adds	r3, #24
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe ff25 	bl	8003ed8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <xTaskRemoveFromEventList+0xac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11c      	bne.n	80050d0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe ff1c 	bl	8003ed8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <xTaskRemoveFromEventList+0xb0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	4a16      	ldr	r2, [pc, #88]	; (8005108 <xTaskRemoveFromEventList+0xb0>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <xTaskRemoveFromEventList+0xb4>)
 80050c0:	441a      	add	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7fe fea8 	bl	8003e1e <vListInsertEnd>
 80050ce:	e005      	b.n	80050dc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3318      	adds	r3, #24
 80050d4:	4619      	mov	r1, r3
 80050d6:	480e      	ldr	r0, [pc, #56]	; (8005110 <xTaskRemoveFromEventList+0xb8>)
 80050d8:	f7fe fea1 	bl	8003e1e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <xTaskRemoveFromEventList+0xbc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d905      	bls.n	80050f6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80050ea:	2301      	movs	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <xTaskRemoveFromEventList+0xc0>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e001      	b.n	80050fa <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80050fa:	697b      	ldr	r3, [r7, #20]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	2000019c 	.word	0x2000019c
 8005108:	2000017c 	.word	0x2000017c
 800510c:	200000a0 	.word	0x200000a0
 8005110:	20000134 	.word	0x20000134
 8005114:	2000009c 	.word	0x2000009c
 8005118:	20000188 	.word	0x20000188

0800511c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <vTaskInternalSetTimeOutState+0x24>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <vTaskInternalSetTimeOutState+0x28>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	2000018c 	.word	0x2000018c
 8005144:	20000178 	.word	0x20000178

08005148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	613b      	str	r3, [r7, #16]
    }
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	60fb      	str	r3, [r7, #12]
    }
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800518a:	f000 fe3d 	bl	8005e08 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800518e:	4b1f      	ldr	r3, [pc, #124]	; (800520c <xTaskCheckForTimeOut+0xc4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d102      	bne.n	80051ae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e026      	b.n	80051fc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b17      	ldr	r3, [pc, #92]	; (8005210 <xTaskCheckForTimeOut+0xc8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d00a      	beq.n	80051d0 <xTaskCheckForTimeOut+0x88>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d305      	bcc.n	80051d0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e015      	b.n	80051fc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d20b      	bcs.n	80051f2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	1ad2      	subs	r2, r2, r3
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff98 	bl	800511c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	e004      	b.n	80051fc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80051fc:	f000 fe34 	bl	8005e68 <vPortExitCritical>

    return xReturn;
 8005200:	69fb      	ldr	r3, [r7, #28]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000178 	.word	0x20000178
 8005210:	2000018c 	.word	0x2000018c

08005214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <vTaskMissedYield+0x14>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000188 	.word	0x20000188

0800522c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005234:	f000 f852 	bl	80052dc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <prvIdleTask+0x28>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d9f9      	bls.n	8005234 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <prvIdleTask+0x2c>)
 8005242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005250:	e7f0      	b.n	8005234 <prvIdleTask+0x8>
 8005252:	bf00      	nop
 8005254:	200000a0 	.word	0x200000a0
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	e00c      	b.n	8005282 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <prvInitialiseTaskLists+0x60>)
 8005274:	4413      	add	r3, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fda4 	bl	8003dc4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d9ef      	bls.n	8005268 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005288:	480d      	ldr	r0, [pc, #52]	; (80052c0 <prvInitialiseTaskLists+0x64>)
 800528a:	f7fe fd9b 	bl	8003dc4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800528e:	480d      	ldr	r0, [pc, #52]	; (80052c4 <prvInitialiseTaskLists+0x68>)
 8005290:	f7fe fd98 	bl	8003dc4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005294:	480c      	ldr	r0, [pc, #48]	; (80052c8 <prvInitialiseTaskLists+0x6c>)
 8005296:	f7fe fd95 	bl	8003dc4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800529a:	480c      	ldr	r0, [pc, #48]	; (80052cc <prvInitialiseTaskLists+0x70>)
 800529c:	f7fe fd92 	bl	8003dc4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80052a0:	480b      	ldr	r0, [pc, #44]	; (80052d0 <prvInitialiseTaskLists+0x74>)
 80052a2:	f7fe fd8f 	bl	8003dc4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <prvInitialiseTaskLists+0x78>)
 80052a8:	4a05      	ldr	r2, [pc, #20]	; (80052c0 <prvInitialiseTaskLists+0x64>)
 80052aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <prvInitialiseTaskLists+0x7c>)
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <prvInitialiseTaskLists+0x68>)
 80052b0:	601a      	str	r2, [r3, #0]
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200000a0 	.word	0x200000a0
 80052c0:	20000104 	.word	0x20000104
 80052c4:	20000118 	.word	0x20000118
 80052c8:	20000134 	.word	0x20000134
 80052cc:	20000148 	.word	0x20000148
 80052d0:	20000160 	.word	0x20000160
 80052d4:	2000012c 	.word	0x2000012c
 80052d8:	20000130 	.word	0x20000130

080052dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052e2:	e019      	b.n	8005318 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80052e4:	f000 fd90 	bl	8005e08 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <prvCheckTasksWaitingTermination+0x50>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fdef 	bl	8003ed8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <prvCheckTasksWaitingTermination+0x54>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <prvCheckTasksWaitingTermination+0x54>)
 8005302:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <prvCheckTasksWaitingTermination+0x58>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <prvCheckTasksWaitingTermination+0x58>)
 800530c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800530e:	f000 fdab 	bl	8005e68 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f810 	bl	8005338 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <prvCheckTasksWaitingTermination+0x58>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e1      	bne.n	80052e4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000148 	.word	0x20000148
 8005330:	20000174 	.word	0x20000174
 8005334:	2000015c 	.word	0x2000015c

08005338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	4618      	mov	r0, r3
 8005346:	f000 ff61 	bl	800620c <vPortFree>
                vPortFree( pxTCB );
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 ff5e 	bl	800620c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvResetNextTaskUnblockTime+0x30>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <prvResetNextTaskUnblockTime+0x34>)
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800536e:	e005      	b.n	800537c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <prvResetNextTaskUnblockTime+0x30>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <prvResetNextTaskUnblockTime+0x34>)
 800537a:	6013      	str	r3, [r2, #0]
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	2000012c 	.word	0x2000012c
 800538c:	20000194 	.word	0x20000194

08005390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <xTaskGetSchedulerState+0x34>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800539e:	2301      	movs	r3, #1
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	e008      	b.n	80053b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a4:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <xTaskGetSchedulerState+0x38>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80053ac:	2302      	movs	r3, #2
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	e001      	b.n	80053b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80053b6:	687b      	ldr	r3, [r7, #4]
    }
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	20000180 	.word	0x20000180
 80053c8:	2000019c 	.word	0x2000019c

080053cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d063      	beq.n	80054aa <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <xTaskPriorityDisinherit+0xe8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d00a      	beq.n	8005402 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60fb      	str	r3, [r7, #12]
    }
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
    }
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005432:	429a      	cmp	r2, r3
 8005434:	d039      	beq.n	80054aa <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d135      	bne.n	80054aa <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3304      	adds	r3, #4
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe fd48 	bl	8003ed8 <uxListRemove>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	2201      	movs	r2, #1
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	43da      	mvns	r2, r3
 800545a:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <xTaskPriorityDisinherit+0xec>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4013      	ands	r3, r2
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <xTaskPriorityDisinherit+0xec>)
 8005462:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f1c3 0205 	rsb	r2, r3, #5
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2201      	movs	r2, #1
 800547e:	409a      	lsls	r2, r3
 8005480:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <xTaskPriorityDisinherit+0xec>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4313      	orrs	r3, r2
 8005486:	4a0c      	ldr	r2, [pc, #48]	; (80054b8 <xTaskPriorityDisinherit+0xec>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <xTaskPriorityDisinherit+0xf0>)
 8005498:	441a      	add	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3304      	adds	r3, #4
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7fe fcbc 	bl	8003e1e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80054aa:	697b      	ldr	r3, [r7, #20]
    }
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000009c 	.word	0x2000009c
 80054b8:	2000017c 	.word	0x2000017c
 80054bc:	200000a0 	.word	0x200000a0

080054c0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80054ca:	4b29      	ldr	r3, [pc, #164]	; (8005570 <prvAddCurrentTaskToDelayedList+0xb0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d0:	4b28      	ldr	r3, [pc, #160]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fcfe 	bl	8003ed8 <uxListRemove>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	2201      	movs	r2, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43da      	mvns	r2, r3
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4013      	ands	r3, r2
 80054f6:	4a20      	ldr	r2, [pc, #128]	; (8005578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d10a      	bne.n	8005518 <prvAddCurrentTaskToDelayedList+0x58>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	481a      	ldr	r0, [pc, #104]	; (800557c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005512:	f7fe fc84 	bl	8003e1e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005516:	e026      	b.n	8005566 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d209      	bcs.n	8005544 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005530:	4b13      	ldr	r3, [pc, #76]	; (8005580 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3304      	adds	r3, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7fe fc92 	bl	8003e66 <vListInsert>
}
 8005542:	e010      	b.n	8005566 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fe fc88 	bl	8003e66 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d202      	bcs.n	8005566 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6013      	str	r3, [r2, #0]
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000178 	.word	0x20000178
 8005574:	2000009c 	.word	0x2000009c
 8005578:	2000017c 	.word	0x2000017c
 800557c:	20000160 	.word	0x20000160
 8005580:	20000130 	.word	0x20000130
 8005584:	2000012c 	.word	0x2000012c
 8005588:	20000194 	.word	0x20000194

0800558c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005596:	f000 fad5 	bl	8005b44 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <xTimerCreateTimerTask+0x54>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <xTimerCreateTimerTask+0x58>)
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	2302      	movs	r3, #2
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055b0:	490d      	ldr	r1, [pc, #52]	; (80055e8 <xTimerCreateTimerTask+0x5c>)
 80055b2:	480e      	ldr	r0, [pc, #56]	; (80055ec <xTimerCreateTimerTask+0x60>)
 80055b4:	f7ff f99a 	bl	80048ec <xTaskCreate>
 80055b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	603b      	str	r3, [r7, #0]
    }
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80055d6:	687b      	ldr	r3, [r7, #4]
    }
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200001d0 	.word	0x200001d0
 80055e4:	200001d4 	.word	0x200001d4
 80055e8:	08006d68 	.word	0x08006d68
 80055ec:	08005725 	.word	0x08005725

080055f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80055fe:	2300      	movs	r3, #0
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xTimerGenericCommand+0x2e>
        __asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	623b      	str	r3, [r7, #32]
    }
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <xTimerGenericCommand+0x98>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02a      	beq.n	800567c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b05      	cmp	r3, #5
 8005636:	dc18      	bgt.n	800566a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005638:	f7ff feaa 	bl	8005390 <xTaskGetSchedulerState>
 800563c:	4603      	mov	r3, r0
 800563e:	2b02      	cmp	r3, #2
 8005640:	d109      	bne.n	8005656 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <xTimerGenericCommand+0x98>)
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f107 0114 	add.w	r1, r7, #20
 800564a:	2300      	movs	r3, #0
 800564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564e:	f7fe fd57 	bl	8004100 <xQueueGenericSend>
 8005652:	6278      	str	r0, [r7, #36]	; 0x24
 8005654:	e012      	b.n	800567c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <xTimerGenericCommand+0x98>)
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f107 0114 	add.w	r1, r7, #20
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	f7fe fd4d 	bl	8004100 <xQueueGenericSend>
 8005666:	6278      	str	r0, [r7, #36]	; 0x24
 8005668:	e008      	b.n	800567c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <xTimerGenericCommand+0x98>)
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f107 0114 	add.w	r1, r7, #20
 8005672:	2300      	movs	r3, #0
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f7fe fe41 	bl	80042fc <xQueueGenericSendFromISR>
 800567a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800567e:	4618      	mov	r0, r3
 8005680:	3728      	adds	r7, #40	; 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200001d0 	.word	0x200001d0

0800568c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <prvProcessExpiredTimer+0x94>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fc17 	bl	8003ed8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d022      	beq.n	80056fe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	18d1      	adds	r1, r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6978      	ldr	r0, [r7, #20]
 80056c6:	f000 f8d1 	bl	800586c <prvInsertTimerInActiveList>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01f      	beq.n	8005710 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	2100      	movs	r1, #0
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff ff88 	bl	80055f0 <xTimerGenericCommand>
 80056e0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d113      	bne.n	8005710 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60fb      	str	r3, [r7, #12]
    }
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	b2da      	uxtb	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	4798      	blx	r3
    }
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200001c8 	.word	0x200001c8

08005724 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f857 	bl	80057e4 <prvGetNextExpireTime>
 8005736:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4619      	mov	r1, r3
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f803 	bl	8005748 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005742:	f000 f8d5 	bl	80058f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005746:	e7f1      	b.n	800572c <prvTimerTask+0x8>

08005748 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005752:	f7ff fa63 	bl	8004c1c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005756:	f107 0308 	add.w	r3, r7, #8
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f866 	bl	800582c <prvSampleTimeNow>
 8005760:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d130      	bne.n	80057ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <prvProcessTimerOrBlockTask+0x3c>
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	429a      	cmp	r2, r3
 8005774:	d806      	bhi.n	8005784 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005776:	f7ff fa5f 	bl	8004c38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff85 	bl	800568c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005782:	e024      	b.n	80057ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <prvProcessTimerOrBlockTask+0x90>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <prvProcessTimerOrBlockTask+0x50>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <prvProcessTimerOrBlockTask+0x52>
 8005798:	2300      	movs	r3, #0
 800579a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800579c:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <prvProcessTimerOrBlockTask+0x94>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	f7ff f86b 	bl	8004884 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80057ae:	f7ff fa43 	bl	8004c38 <xTaskResumeAll>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <prvProcessTimerOrBlockTask+0x98>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
    }
 80057c8:	e001      	b.n	80057ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80057ca:	f7ff fa35 	bl	8004c38 <xTaskResumeAll>
    }
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	200001cc 	.word	0x200001cc
 80057dc:	200001d0 	.word	0x200001d0
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <prvGetNextExpireTime+0x44>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <prvGetNextExpireTime+0x16>
 80057f6:	2201      	movs	r2, #1
 80057f8:	e000      	b.n	80057fc <prvGetNextExpireTime+0x18>
 80057fa:	2200      	movs	r2, #0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <prvGetNextExpireTime+0x44>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e001      	b.n	8005818 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005818:	68fb      	ldr	r3, [r7, #12]
    }
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	200001c8 	.word	0x200001c8

0800582c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005834:	f7ff fa9c 	bl	8004d70 <xTaskGetTickCount>
 8005838:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <prvSampleTimeNow+0x3c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	429a      	cmp	r2, r3
 8005842:	d205      	bcs.n	8005850 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005844:	f000 f91a 	bl	8005a7c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <prvSampleTimeNow+0x3c>)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800585c:	68fb      	ldr	r3, [r7, #12]
    }
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	200001d8 	.word	0x200001d8

0800586c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d812      	bhi.n	80058b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e01b      	b.n	80058de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <prvInsertTimerInActiveList+0x7c>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe fad8 	bl	8003e66 <vListInsert>
 80058b6:	e012      	b.n	80058de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d206      	bcs.n	80058ce <prvInsertTimerInActiveList+0x62>
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e007      	b.n	80058de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <prvInsertTimerInActiveList+0x80>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fe fac4 	bl	8003e66 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80058de:	697b      	ldr	r3, [r7, #20]
    }
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200001cc 	.word	0x200001cc
 80058ec:	200001c8 	.word	0x200001c8

080058f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058f6:	e0ae      	b.n	8005a56 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f2c0 80aa 	blt.w	8005a54 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	3304      	adds	r3, #4
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fae1 	bl	8003ed8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff ff87 	bl	800582c <prvSampleTimeNow>
 800591e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b09      	cmp	r3, #9
 8005924:	f200 8097 	bhi.w	8005a56 <prvProcessReceivedCommands+0x166>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <prvProcessReceivedCommands+0x40>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005959 	.word	0x08005959
 8005934:	08005959 	.word	0x08005959
 8005938:	08005959 	.word	0x08005959
 800593c:	080059cd 	.word	0x080059cd
 8005940:	080059e1 	.word	0x080059e1
 8005944:	08005a2b 	.word	0x08005a2b
 8005948:	08005959 	.word	0x08005959
 800594c:	08005959 	.word	0x08005959
 8005950:	080059cd 	.word	0x080059cd
 8005954:	080059e1 	.word	0x080059e1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	b2da      	uxtb	r2, r3
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	18d1      	adds	r1, r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005978:	f7ff ff78 	bl	800586c <prvInsertTimerInActiveList>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d069      	beq.n	8005a56 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005988:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d05e      	beq.n	8005a56 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	441a      	add	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	2100      	movs	r1, #0
 80059a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059aa:	f7ff fe21 	bl	80055f0 <xTimerGenericCommand>
 80059ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d14f      	bne.n	8005a56 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61bb      	str	r3, [r7, #24]
    }
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80059de:	e03a      	b.n	8005a56 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	617b      	str	r3, [r7, #20]
    }
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	18d1      	adds	r1, r2, r3
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a24:	f7ff ff22 	bl	800586c <prvInsertTimerInActiveList>
                        break;
 8005a28:	e015      	b.n	8005a56 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a3a:	f000 fbe7 	bl	800620c <vPortFree>
 8005a3e:	e00a      	b.n	8005a56 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005a52:	e000      	b.n	8005a56 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005a54:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <prvProcessReceivedCommands+0x188>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f107 0108 	add.w	r1, r7, #8
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fcf5 	bl	8004450 <xQueueReceive>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f af45 	bne.w	80058f8 <prvProcessReceivedCommands+0x8>
        }
    }
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	3728      	adds	r7, #40	; 0x28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200001d0 	.word	0x200001d0

08005a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a82:	e048      	b.n	8005b16 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fa1b 	bl	8003ed8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02e      	beq.n	8005b16 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d90e      	bls.n	8005ae8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fe f9c0 	bl	8003e66 <vListInsert>
 8005ae6:	e016      	b.n	8005b16 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	2100      	movs	r1, #0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fd7c 	bl	80055f0 <xTimerGenericCommand>
 8005af8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	603b      	str	r3, [r7, #0]
    }
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1b1      	bne.n	8005a84 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvSwitchTimerLists+0xc4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005b2c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <prvSwitchTimerLists+0xc4>)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	6013      	str	r3, [r2, #0]
    }
 8005b34:	bf00      	nop
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200001c8 	.word	0x200001c8
 8005b40:	200001cc 	.word	0x200001cc

08005b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005b48:	f000 f95e 	bl	8005e08 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005b4c:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <prvCheckForValidListAndQueue+0x54>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11d      	bne.n	8005b90 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005b54:	4811      	ldr	r0, [pc, #68]	; (8005b9c <prvCheckForValidListAndQueue+0x58>)
 8005b56:	f7fe f935 	bl	8003dc4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005b5a:	4811      	ldr	r0, [pc, #68]	; (8005ba0 <prvCheckForValidListAndQueue+0x5c>)
 8005b5c:	f7fe f932 	bl	8003dc4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <prvCheckForValidListAndQueue+0x60>)
 8005b62:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <prvCheckForValidListAndQueue+0x58>)
 8005b64:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005b66:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <prvCheckForValidListAndQueue+0x64>)
 8005b68:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <prvCheckForValidListAndQueue+0x5c>)
 8005b6a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	210c      	movs	r1, #12
 8005b70:	200a      	movs	r0, #10
 8005b72:	f7fe fa43 	bl	8003ffc <xQueueGenericCreate>
 8005b76:	4603      	mov	r3, r0
 8005b78:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <prvCheckForValidListAndQueue+0x54>)
 8005b7a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <prvCheckForValidListAndQueue+0x54>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <prvCheckForValidListAndQueue+0x54>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4908      	ldr	r1, [pc, #32]	; (8005bac <prvCheckForValidListAndQueue+0x68>)
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fe50 	bl	8004830 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005b90:	f000 f96a 	bl	8005e68 <vPortExitCritical>
    }
 8005b94:	bf00      	nop
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	200001d0 	.word	0x200001d0
 8005b9c:	200001a0 	.word	0x200001a0
 8005ba0:	200001b4 	.word	0x200001b4
 8005ba4:	200001c8 	.word	0x200001c8
 8005ba8:	200001cc 	.word	0x200001cc
 8005bac:	08006d70 	.word	0x08006d70

08005bb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3b04      	subs	r3, #4
 8005bc0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3b04      	subs	r3, #4
 8005bce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3b04      	subs	r3, #4
 8005bde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005be0:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <pxPortInitialiseStack+0x64>)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3b14      	subs	r3, #20
 8005bea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f06f 0202 	mvn.w	r2, #2
 8005bfe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b20      	subs	r3, #32
 8005c04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	08005c19 	.word	0x08005c19

08005c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <prvTaskExitError+0x54>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d00a      	beq.n	8005c42 <prvTaskExitError+0x2a>
        __asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	60fb      	str	r3, [r7, #12]
    }
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <prvTaskExitError+0x28>
        __asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60bb      	str	r3, [r7, #8]
    }
 8005c54:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005c56:	bf00      	nop
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0fc      	beq.n	8005c58 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	20000010 	.word	0x20000010

08005c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005c70:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <pxCurrentTCBConst2>)
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	6808      	ldr	r0, [r1, #0]
 8005c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	f380 8809 	msr	PSP, r0
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f380 8811 	msr	BASEPRI, r0
 8005c8a:	4770      	bx	lr
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst2>:
 8005c90:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005c98:	4808      	ldr	r0, [pc, #32]	; (8005cbc <prvPortStartFirstTask+0x24>)
 8005c9a:	6800      	ldr	r0, [r0, #0]
 8005c9c:	6800      	ldr	r0, [r0, #0]
 8005c9e:	f380 8808 	msr	MSP, r0
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8814 	msr	CONTROL, r0
 8005caa:	b662      	cpsie	i
 8005cac:	b661      	cpsie	f
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	df00      	svc	0
 8005cb8:	bf00      	nop
 8005cba:	0000      	.short	0x0000
 8005cbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop

08005cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cca:	4b46      	ldr	r3, [pc, #280]	; (8005de4 <xPortStartScheduler+0x120>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a46      	ldr	r2, [pc, #280]	; (8005de8 <xPortStartScheduler+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10a      	bne.n	8005cea <xPortStartScheduler+0x26>
        __asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	613b      	str	r3, [r7, #16]
    }
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cea:	4b3e      	ldr	r3, [pc, #248]	; (8005de4 <xPortStartScheduler+0x120>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3f      	ldr	r2, [pc, #252]	; (8005dec <xPortStartScheduler+0x128>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d10a      	bne.n	8005d0a <xPortStartScheduler+0x46>
        __asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
    }
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d0a:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <xPortStartScheduler+0x12c>)
 8005d0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b31      	ldr	r3, [pc, #196]	; (8005df4 <xPortStartScheduler+0x130>)
 8005d30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d32:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d34:	2207      	movs	r2, #7
 8005d36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d38:	e009      	b.n	8005d4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005d3a:	4b2f      	ldr	r3, [pc, #188]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d0ef      	beq.n	8005d3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d5a:	4b27      	ldr	r3, [pc, #156]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d00a      	beq.n	8005d7c <xPortStartScheduler+0xb8>
        __asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60bb      	str	r3, [r7, #8]
    }
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d86:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <xPortStartScheduler+0x134>)
 8005d90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005d9a:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <xPortStartScheduler+0x138>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <xPortStartScheduler+0x138>)
 8005da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005da4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <xPortStartScheduler+0x138>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <xPortStartScheduler+0x138>)
 8005dac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005db0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005db2:	f000 f8db 	bl	8005f6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <xPortStartScheduler+0x13c>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005dbc:	f000 f8fa 	bl	8005fb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dc0:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <xPortStartScheduler+0x140>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <xPortStartScheduler+0x140>)
 8005dc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005dca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005dcc:	f7ff ff64 	bl	8005c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005dd0:	f7ff f896 	bl	8004f00 <vTaskSwitchContext>
    prvTaskExitError();
 8005dd4:	f7ff ff20 	bl	8005c18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	e000ed00 	.word	0xe000ed00
 8005de8:	410fc271 	.word	0x410fc271
 8005dec:	410fc270 	.word	0x410fc270
 8005df0:	e000e400 	.word	0xe000e400
 8005df4:	200001dc 	.word	0x200001dc
 8005df8:	200001e0 	.word	0x200001e0
 8005dfc:	e000ed20 	.word	0xe000ed20
 8005e00:	20000010 	.word	0x20000010
 8005e04:	e000ef34 	.word	0xe000ef34

08005e08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
        __asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
    }
 8005e20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <vPortEnterCritical+0x58>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	4a0d      	ldr	r2, [pc, #52]	; (8005e60 <vPortEnterCritical+0x58>)
 8005e2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <vPortEnterCritical+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10f      	bne.n	8005e54 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <vPortEnterCritical+0x5c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <vPortEnterCritical+0x4c>
        __asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	603b      	str	r3, [r7, #0]
    }
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <vPortEnterCritical+0x4a>
    }
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000010 	.word	0x20000010
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <vPortExitCritical+0x50>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <vPortExitCritical+0x24>
        __asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	607b      	str	r3, [r7, #4]
    }
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <vPortExitCritical+0x50>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <vPortExitCritical+0x50>)
 8005e94:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <vPortExitCritical+0x50>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d105      	bne.n	8005eaa <vPortExitCritical+0x42>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f383 8811 	msr	BASEPRI, r3
    }
 8005ea8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000010 	.word	0x20000010
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f01e 0f10 	tst.w	lr, #16
 8005ed0:	bf08      	it	eq
 8005ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ee4:	f380 8811 	msr	BASEPRI, r0
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f7ff f806 	bl	8004f00 <vTaskSwitchContext>
 8005ef4:	f04f 0000 	mov.w	r0, #0
 8005ef8:	f380 8811 	msr	BASEPRI, r0
 8005efc:	bc09      	pop	{r0, r3}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f06:	f01e 0f10 	tst.w	lr, #16
 8005f0a:	bf08      	it	eq
 8005f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f10:	f380 8809 	msr	PSP, r0
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst>:
 8005f20:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
        __asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
    }
 8005f40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005f42:	f7fe ff25 	bl	8004d90 <xTaskIncrementTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <SysTick_Handler+0x40>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	2300      	movs	r3, #0
 8005f56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
    }
 8005f5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <vPortSetupTimerInterrupt+0x34>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <vPortSetupTimerInterrupt+0x38>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <vPortSetupTimerInterrupt+0x3c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <vPortSetupTimerInterrupt+0x40>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	099b      	lsrs	r3, r3, #6
 8005f88:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <vPortSetupTimerInterrupt+0x44>)
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f8e:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <vPortSetupTimerInterrupt+0x34>)
 8005f90:	2207      	movs	r2, #7
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	e000e010 	.word	0xe000e010
 8005fa4:	e000e018 	.word	0xe000e018
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	10624dd3 	.word	0x10624dd3
 8005fb0:	e000e014 	.word	0xe000e014

08005fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fc4 <vPortEnableVFP+0x10>
 8005fb8:	6801      	ldr	r1, [r0, #0]
 8005fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fbe:	6001      	str	r1, [r0, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	0000      	.short	0x0000
 8005fc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop

08005fcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005fd2:	f3ef 8305 	mrs	r3, IPSR
 8005fd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d914      	bls.n	8006008 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <vPortValidateInterruptPriority+0x70>)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <vPortValidateInterruptPriority+0x74>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	7afa      	ldrb	r2, [r7, #11]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d20a      	bcs.n	8006008 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	607b      	str	r3, [r7, #4]
    }
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006008:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <vPortValidateInterruptPriority+0x78>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006010:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <vPortValidateInterruptPriority+0x7c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d90a      	bls.n	800602e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	603b      	str	r3, [r7, #0]
    }
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <vPortValidateInterruptPriority+0x60>
    }
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	e000e3f0 	.word	0xe000e3f0
 8006040:	200001dc 	.word	0x200001dc
 8006044:	e000ed0c 	.word	0xe000ed0c
 8006048:	200001e0 	.word	0x200001e0

0800604c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006058:	f7fe fde0 	bl	8004c1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800605c:	4b65      	ldr	r3, [pc, #404]	; (80061f4 <pvPortMalloc+0x1a8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006064:	f000 f934 	bl	80062d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006068:	4b63      	ldr	r3, [pc, #396]	; (80061f8 <pvPortMalloc+0x1ac>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4013      	ands	r3, r2
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 80a7 	bne.w	80061c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d02d      	beq.n	80060d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800607c:	2208      	movs	r2, #8
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d227      	bcs.n	80060d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006088:	2208      	movs	r2, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d021      	beq.n	80060de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d214      	bcs.n	80060d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	3308      	adds	r3, #8
 80060b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <pvPortMalloc+0x92>
        __asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	617b      	str	r3, [r7, #20]
    }
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060d6:	e002      	b.n	80060de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	607b      	str	r3, [r7, #4]
 80060dc:	e000      	b.n	80060e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d06e      	beq.n	80061c4 <pvPortMalloc+0x178>
 80060e6:	4b45      	ldr	r3, [pc, #276]	; (80061fc <pvPortMalloc+0x1b0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d869      	bhi.n	80061c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80060f0:	4b43      	ldr	r3, [pc, #268]	; (8006200 <pvPortMalloc+0x1b4>)
 80060f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80060f4:	4b42      	ldr	r3, [pc, #264]	; (8006200 <pvPortMalloc+0x1b4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060fa:	e004      	b.n	8006106 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d903      	bls.n	8006118 <pvPortMalloc+0xcc>
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f1      	bne.n	80060fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006118:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <pvPortMalloc+0x1a8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611e:	429a      	cmp	r2, r3
 8006120:	d050      	beq.n	80061c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2208      	movs	r2, #8
 8006128:	4413      	add	r3, r2
 800612a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	2308      	movs	r3, #8
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	429a      	cmp	r2, r3
 8006142:	d91f      	bls.n	8006184 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <pvPortMalloc+0x120>
        __asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	613b      	str	r3, [r7, #16]
    }
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800617e:	69b8      	ldr	r0, [r7, #24]
 8006180:	f000 f908 	bl	8006394 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006184:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <pvPortMalloc+0x1b0>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <pvPortMalloc+0x1b0>)
 8006190:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006192:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <pvPortMalloc+0x1b0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <pvPortMalloc+0x1b8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d203      	bcs.n	80061a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800619e:	4b17      	ldr	r3, [pc, #92]	; (80061fc <pvPortMalloc+0x1b0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <pvPortMalloc+0x1b8>)
 80061a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <pvPortMalloc+0x1ac>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80061ba:	4b13      	ldr	r3, [pc, #76]	; (8006208 <pvPortMalloc+0x1bc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	4a11      	ldr	r2, [pc, #68]	; (8006208 <pvPortMalloc+0x1bc>)
 80061c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80061c4:	f7fe fd38 	bl	8004c38 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <pvPortMalloc+0x19c>
        __asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60fb      	str	r3, [r7, #12]
    }
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80061e8:	69fb      	ldr	r3, [r7, #28]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3728      	adds	r7, #40	; 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20012dec 	.word	0x20012dec
 80061f8:	20012e00 	.word	0x20012e00
 80061fc:	20012df0 	.word	0x20012df0
 8006200:	20012de4 	.word	0x20012de4
 8006204:	20012df4 	.word	0x20012df4
 8006208:	20012df8 	.word	0x20012df8

0800620c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d04d      	beq.n	80062ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800621e:	2308      	movs	r3, #8
 8006220:	425b      	negs	r3, r3
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <vPortFree+0xb8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <vPortFree+0x44>
        __asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	60fb      	str	r3, [r7, #12]
    }
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <vPortFree+0x62>
        __asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60bb      	str	r3, [r7, #8]
    }
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <vPortFree+0xb8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01e      	beq.n	80062ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d11a      	bne.n	80062ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <vPortFree+0xb8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006294:	f7fe fcc2 	bl	8004c1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <vPortFree+0xbc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4413      	add	r3, r2
 80062a2:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <vPortFree+0xbc>)
 80062a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062a6:	6938      	ldr	r0, [r7, #16]
 80062a8:	f000 f874 	bl	8006394 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <vPortFree+0xc0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	4a06      	ldr	r2, [pc, #24]	; (80062cc <vPortFree+0xc0>)
 80062b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80062b6:	f7fe fcbf 	bl	8004c38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80062ba:	bf00      	nop
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20012e00 	.word	0x20012e00
 80062c8:	20012df0 	.word	0x20012df0
 80062cc:	20012dfc 	.word	0x20012dfc

080062d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80062da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80062dc:	4b27      	ldr	r3, [pc, #156]	; (800637c <prvHeapInit+0xac>)
 80062de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3307      	adds	r3, #7
 80062ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <prvHeapInit+0xac>)
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006308:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <prvHeapInit+0xb0>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <prvHeapInit+0xb0>)
 8006310:	2200      	movs	r2, #0
 8006312:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4413      	add	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800631c:	2208      	movs	r2, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <prvHeapInit+0xb4>)
 8006330:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <prvHeapInit+0xb4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <prvHeapInit+0xb4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <prvHeapInit+0xb4>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <prvHeapInit+0xb8>)
 800635e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4a09      	ldr	r2, [pc, #36]	; (800638c <prvHeapInit+0xbc>)
 8006366:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <prvHeapInit+0xc0>)
 800636a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800636e:	601a      	str	r2, [r3, #0]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	200001e4 	.word	0x200001e4
 8006380:	20012de4 	.word	0x20012de4
 8006384:	20012dec 	.word	0x20012dec
 8006388:	20012df4 	.word	0x20012df4
 800638c:	20012df0 	.word	0x20012df0
 8006390:	20012e00 	.word	0x20012e00

08006394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <prvInsertBlockIntoFreeList+0xac>)
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	e002      	b.n	80063a8 <prvInsertBlockIntoFreeList+0x14>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d8f7      	bhi.n	80063a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4413      	add	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d108      	bne.n	80063d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	441a      	add	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	441a      	add	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d118      	bne.n	800641c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <prvInsertBlockIntoFreeList+0xb0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d00d      	beq.n	8006412 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	441a      	add	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e008      	b.n	8006424 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <prvInsertBlockIntoFreeList+0xb0>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e003      	b.n	8006424 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d002      	beq.n	8006432 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20012de4 	.word	0x20012de4
 8006444:	20012dec 	.word	0x20012dec

08006448 <__errno>:
 8006448:	4b01      	ldr	r3, [pc, #4]	; (8006450 <__errno+0x8>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000014 	.word	0x20000014

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4d0d      	ldr	r5, [pc, #52]	; (800648c <__libc_init_array+0x38>)
 8006458:	4c0d      	ldr	r4, [pc, #52]	; (8006490 <__libc_init_array+0x3c>)
 800645a:	1b64      	subs	r4, r4, r5
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	2600      	movs	r6, #0
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	4d0b      	ldr	r5, [pc, #44]	; (8006494 <__libc_init_array+0x40>)
 8006466:	4c0c      	ldr	r4, [pc, #48]	; (8006498 <__libc_init_array+0x44>)
 8006468:	f000 fc4e 	bl	8006d08 <_init>
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	2600      	movs	r6, #0
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	08006dcc 	.word	0x08006dcc
 8006490:	08006dcc 	.word	0x08006dcc
 8006494:	08006dcc 	.word	0x08006dcc
 8006498:	08006dd0 	.word	0x08006dd0

0800649c <memcpy>:
 800649c:	440a      	add	r2, r1
 800649e:	4291      	cmp	r1, r2
 80064a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a4:	d100      	bne.n	80064a8 <memcpy+0xc>
 80064a6:	4770      	bx	lr
 80064a8:	b510      	push	{r4, lr}
 80064aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b2:	4291      	cmp	r1, r2
 80064b4:	d1f9      	bne.n	80064aa <memcpy+0xe>
 80064b6:	bd10      	pop	{r4, pc}

080064b8 <memset>:
 80064b8:	4402      	add	r2, r0
 80064ba:	4603      	mov	r3, r0
 80064bc:	4293      	cmp	r3, r2
 80064be:	d100      	bne.n	80064c2 <memset+0xa>
 80064c0:	4770      	bx	lr
 80064c2:	f803 1b01 	strb.w	r1, [r3], #1
 80064c6:	e7f9      	b.n	80064bc <memset+0x4>

080064c8 <siprintf>:
 80064c8:	b40e      	push	{r1, r2, r3}
 80064ca:	b500      	push	{lr}
 80064cc:	b09c      	sub	sp, #112	; 0x70
 80064ce:	ab1d      	add	r3, sp, #116	; 0x74
 80064d0:	9002      	str	r0, [sp, #8]
 80064d2:	9006      	str	r0, [sp, #24]
 80064d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064d8:	4809      	ldr	r0, [pc, #36]	; (8006500 <siprintf+0x38>)
 80064da:	9107      	str	r1, [sp, #28]
 80064dc:	9104      	str	r1, [sp, #16]
 80064de:	4909      	ldr	r1, [pc, #36]	; (8006504 <siprintf+0x3c>)
 80064e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e4:	9105      	str	r1, [sp, #20]
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	a902      	add	r1, sp, #8
 80064ec:	f000 f868 	bl	80065c0 <_svfiprintf_r>
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	b01c      	add	sp, #112	; 0x70
 80064f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064fc:	b003      	add	sp, #12
 80064fe:	4770      	bx	lr
 8006500:	20000014 	.word	0x20000014
 8006504:	ffff0208 	.word	0xffff0208

08006508 <__ssputs_r>:
 8006508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	688e      	ldr	r6, [r1, #8]
 800650e:	429e      	cmp	r6, r3
 8006510:	4682      	mov	sl, r0
 8006512:	460c      	mov	r4, r1
 8006514:	4690      	mov	r8, r2
 8006516:	461f      	mov	r7, r3
 8006518:	d838      	bhi.n	800658c <__ssputs_r+0x84>
 800651a:	898a      	ldrh	r2, [r1, #12]
 800651c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006520:	d032      	beq.n	8006588 <__ssputs_r+0x80>
 8006522:	6825      	ldr	r5, [r4, #0]
 8006524:	6909      	ldr	r1, [r1, #16]
 8006526:	eba5 0901 	sub.w	r9, r5, r1
 800652a:	6965      	ldr	r5, [r4, #20]
 800652c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006534:	3301      	adds	r3, #1
 8006536:	444b      	add	r3, r9
 8006538:	106d      	asrs	r5, r5, #1
 800653a:	429d      	cmp	r5, r3
 800653c:	bf38      	it	cc
 800653e:	461d      	movcc	r5, r3
 8006540:	0553      	lsls	r3, r2, #21
 8006542:	d531      	bpl.n	80065a8 <__ssputs_r+0xa0>
 8006544:	4629      	mov	r1, r5
 8006546:	f000 fb39 	bl	8006bbc <_malloc_r>
 800654a:	4606      	mov	r6, r0
 800654c:	b950      	cbnz	r0, 8006564 <__ssputs_r+0x5c>
 800654e:	230c      	movs	r3, #12
 8006550:	f8ca 3000 	str.w	r3, [sl]
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655a:	81a3      	strh	r3, [r4, #12]
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	6921      	ldr	r1, [r4, #16]
 8006566:	464a      	mov	r2, r9
 8006568:	f7ff ff98 	bl	800649c <memcpy>
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	6126      	str	r6, [r4, #16]
 800657a:	6165      	str	r5, [r4, #20]
 800657c:	444e      	add	r6, r9
 800657e:	eba5 0509 	sub.w	r5, r5, r9
 8006582:	6026      	str	r6, [r4, #0]
 8006584:	60a5      	str	r5, [r4, #8]
 8006586:	463e      	mov	r6, r7
 8006588:	42be      	cmp	r6, r7
 800658a:	d900      	bls.n	800658e <__ssputs_r+0x86>
 800658c:	463e      	mov	r6, r7
 800658e:	4632      	mov	r2, r6
 8006590:	6820      	ldr	r0, [r4, #0]
 8006592:	4641      	mov	r1, r8
 8006594:	f000 faa8 	bl	8006ae8 <memmove>
 8006598:	68a3      	ldr	r3, [r4, #8]
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	4432      	add	r2, r6
 80065a0:	60a3      	str	r3, [r4, #8]
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	2000      	movs	r0, #0
 80065a6:	e7db      	b.n	8006560 <__ssputs_r+0x58>
 80065a8:	462a      	mov	r2, r5
 80065aa:	f000 fb61 	bl	8006c70 <_realloc_r>
 80065ae:	4606      	mov	r6, r0
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d1e1      	bne.n	8006578 <__ssputs_r+0x70>
 80065b4:	6921      	ldr	r1, [r4, #16]
 80065b6:	4650      	mov	r0, sl
 80065b8:	f000 fab0 	bl	8006b1c <_free_r>
 80065bc:	e7c7      	b.n	800654e <__ssputs_r+0x46>
	...

080065c0 <_svfiprintf_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	4698      	mov	r8, r3
 80065c6:	898b      	ldrh	r3, [r1, #12]
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	b09d      	sub	sp, #116	; 0x74
 80065cc:	4607      	mov	r7, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	d50e      	bpl.n	80065f2 <_svfiprintf_r+0x32>
 80065d4:	690b      	ldr	r3, [r1, #16]
 80065d6:	b963      	cbnz	r3, 80065f2 <_svfiprintf_r+0x32>
 80065d8:	2140      	movs	r1, #64	; 0x40
 80065da:	f000 faef 	bl	8006bbc <_malloc_r>
 80065de:	6028      	str	r0, [r5, #0]
 80065e0:	6128      	str	r0, [r5, #16]
 80065e2:	b920      	cbnz	r0, 80065ee <_svfiprintf_r+0x2e>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	e0d1      	b.n	8006792 <_svfiprintf_r+0x1d2>
 80065ee:	2340      	movs	r3, #64	; 0x40
 80065f0:	616b      	str	r3, [r5, #20]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	2320      	movs	r3, #32
 80065f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006600:	2330      	movs	r3, #48	; 0x30
 8006602:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067ac <_svfiprintf_r+0x1ec>
 8006606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800660a:	f04f 0901 	mov.w	r9, #1
 800660e:	4623      	mov	r3, r4
 8006610:	469a      	mov	sl, r3
 8006612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006616:	b10a      	cbz	r2, 800661c <_svfiprintf_r+0x5c>
 8006618:	2a25      	cmp	r2, #37	; 0x25
 800661a:	d1f9      	bne.n	8006610 <_svfiprintf_r+0x50>
 800661c:	ebba 0b04 	subs.w	fp, sl, r4
 8006620:	d00b      	beq.n	800663a <_svfiprintf_r+0x7a>
 8006622:	465b      	mov	r3, fp
 8006624:	4622      	mov	r2, r4
 8006626:	4629      	mov	r1, r5
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff ff6d 	bl	8006508 <__ssputs_r>
 800662e:	3001      	adds	r0, #1
 8006630:	f000 80aa 	beq.w	8006788 <_svfiprintf_r+0x1c8>
 8006634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006636:	445a      	add	r2, fp
 8006638:	9209      	str	r2, [sp, #36]	; 0x24
 800663a:	f89a 3000 	ldrb.w	r3, [sl]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80a2 	beq.w	8006788 <_svfiprintf_r+0x1c8>
 8006644:	2300      	movs	r3, #0
 8006646:	f04f 32ff 	mov.w	r2, #4294967295
 800664a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800664e:	f10a 0a01 	add.w	sl, sl, #1
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	9307      	str	r3, [sp, #28]
 8006656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800665a:	931a      	str	r3, [sp, #104]	; 0x68
 800665c:	4654      	mov	r4, sl
 800665e:	2205      	movs	r2, #5
 8006660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006664:	4851      	ldr	r0, [pc, #324]	; (80067ac <_svfiprintf_r+0x1ec>)
 8006666:	f7f9 fdbb 	bl	80001e0 <memchr>
 800666a:	9a04      	ldr	r2, [sp, #16]
 800666c:	b9d8      	cbnz	r0, 80066a6 <_svfiprintf_r+0xe6>
 800666e:	06d0      	lsls	r0, r2, #27
 8006670:	bf44      	itt	mi
 8006672:	2320      	movmi	r3, #32
 8006674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006678:	0711      	lsls	r1, r2, #28
 800667a:	bf44      	itt	mi
 800667c:	232b      	movmi	r3, #43	; 0x2b
 800667e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006682:	f89a 3000 	ldrb.w	r3, [sl]
 8006686:	2b2a      	cmp	r3, #42	; 0x2a
 8006688:	d015      	beq.n	80066b6 <_svfiprintf_r+0xf6>
 800668a:	9a07      	ldr	r2, [sp, #28]
 800668c:	4654      	mov	r4, sl
 800668e:	2000      	movs	r0, #0
 8006690:	f04f 0c0a 	mov.w	ip, #10
 8006694:	4621      	mov	r1, r4
 8006696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800669a:	3b30      	subs	r3, #48	; 0x30
 800669c:	2b09      	cmp	r3, #9
 800669e:	d94e      	bls.n	800673e <_svfiprintf_r+0x17e>
 80066a0:	b1b0      	cbz	r0, 80066d0 <_svfiprintf_r+0x110>
 80066a2:	9207      	str	r2, [sp, #28]
 80066a4:	e014      	b.n	80066d0 <_svfiprintf_r+0x110>
 80066a6:	eba0 0308 	sub.w	r3, r0, r8
 80066aa:	fa09 f303 	lsl.w	r3, r9, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	9304      	str	r3, [sp, #16]
 80066b2:	46a2      	mov	sl, r4
 80066b4:	e7d2      	b.n	800665c <_svfiprintf_r+0x9c>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	1d19      	adds	r1, r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9103      	str	r1, [sp, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfbb      	ittet	lt
 80066c2:	425b      	neglt	r3, r3
 80066c4:	f042 0202 	orrlt.w	r2, r2, #2
 80066c8:	9307      	strge	r3, [sp, #28]
 80066ca:	9307      	strlt	r3, [sp, #28]
 80066cc:	bfb8      	it	lt
 80066ce:	9204      	strlt	r2, [sp, #16]
 80066d0:	7823      	ldrb	r3, [r4, #0]
 80066d2:	2b2e      	cmp	r3, #46	; 0x2e
 80066d4:	d10c      	bne.n	80066f0 <_svfiprintf_r+0x130>
 80066d6:	7863      	ldrb	r3, [r4, #1]
 80066d8:	2b2a      	cmp	r3, #42	; 0x2a
 80066da:	d135      	bne.n	8006748 <_svfiprintf_r+0x188>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1d1a      	adds	r2, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9203      	str	r2, [sp, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfb8      	it	lt
 80066e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80066ec:	3402      	adds	r4, #2
 80066ee:	9305      	str	r3, [sp, #20]
 80066f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067bc <_svfiprintf_r+0x1fc>
 80066f4:	7821      	ldrb	r1, [r4, #0]
 80066f6:	2203      	movs	r2, #3
 80066f8:	4650      	mov	r0, sl
 80066fa:	f7f9 fd71 	bl	80001e0 <memchr>
 80066fe:	b140      	cbz	r0, 8006712 <_svfiprintf_r+0x152>
 8006700:	2340      	movs	r3, #64	; 0x40
 8006702:	eba0 000a 	sub.w	r0, r0, sl
 8006706:	fa03 f000 	lsl.w	r0, r3, r0
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	4303      	orrs	r3, r0
 800670e:	3401      	adds	r4, #1
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006716:	4826      	ldr	r0, [pc, #152]	; (80067b0 <_svfiprintf_r+0x1f0>)
 8006718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800671c:	2206      	movs	r2, #6
 800671e:	f7f9 fd5f 	bl	80001e0 <memchr>
 8006722:	2800      	cmp	r0, #0
 8006724:	d038      	beq.n	8006798 <_svfiprintf_r+0x1d8>
 8006726:	4b23      	ldr	r3, [pc, #140]	; (80067b4 <_svfiprintf_r+0x1f4>)
 8006728:	bb1b      	cbnz	r3, 8006772 <_svfiprintf_r+0x1b2>
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	3307      	adds	r3, #7
 800672e:	f023 0307 	bic.w	r3, r3, #7
 8006732:	3308      	adds	r3, #8
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	4433      	add	r3, r6
 800673a:	9309      	str	r3, [sp, #36]	; 0x24
 800673c:	e767      	b.n	800660e <_svfiprintf_r+0x4e>
 800673e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006742:	460c      	mov	r4, r1
 8006744:	2001      	movs	r0, #1
 8006746:	e7a5      	b.n	8006694 <_svfiprintf_r+0xd4>
 8006748:	2300      	movs	r3, #0
 800674a:	3401      	adds	r4, #1
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	4619      	mov	r1, r3
 8006750:	f04f 0c0a 	mov.w	ip, #10
 8006754:	4620      	mov	r0, r4
 8006756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800675a:	3a30      	subs	r2, #48	; 0x30
 800675c:	2a09      	cmp	r2, #9
 800675e:	d903      	bls.n	8006768 <_svfiprintf_r+0x1a8>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0c5      	beq.n	80066f0 <_svfiprintf_r+0x130>
 8006764:	9105      	str	r1, [sp, #20]
 8006766:	e7c3      	b.n	80066f0 <_svfiprintf_r+0x130>
 8006768:	fb0c 2101 	mla	r1, ip, r1, r2
 800676c:	4604      	mov	r4, r0
 800676e:	2301      	movs	r3, #1
 8006770:	e7f0      	b.n	8006754 <_svfiprintf_r+0x194>
 8006772:	ab03      	add	r3, sp, #12
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	462a      	mov	r2, r5
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <_svfiprintf_r+0x1f8>)
 800677a:	a904      	add	r1, sp, #16
 800677c:	4638      	mov	r0, r7
 800677e:	f3af 8000 	nop.w
 8006782:	1c42      	adds	r2, r0, #1
 8006784:	4606      	mov	r6, r0
 8006786:	d1d6      	bne.n	8006736 <_svfiprintf_r+0x176>
 8006788:	89ab      	ldrh	r3, [r5, #12]
 800678a:	065b      	lsls	r3, r3, #25
 800678c:	f53f af2c 	bmi.w	80065e8 <_svfiprintf_r+0x28>
 8006790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006792:	b01d      	add	sp, #116	; 0x74
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	462a      	mov	r2, r5
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <_svfiprintf_r+0x1f8>)
 80067a0:	a904      	add	r1, sp, #16
 80067a2:	4638      	mov	r0, r7
 80067a4:	f000 f87a 	bl	800689c <_printf_i>
 80067a8:	e7eb      	b.n	8006782 <_svfiprintf_r+0x1c2>
 80067aa:	bf00      	nop
 80067ac:	08006d90 	.word	0x08006d90
 80067b0:	08006d9a 	.word	0x08006d9a
 80067b4:	00000000 	.word	0x00000000
 80067b8:	08006509 	.word	0x08006509
 80067bc:	08006d96 	.word	0x08006d96

080067c0 <_printf_common>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	4616      	mov	r6, r2
 80067c6:	4699      	mov	r9, r3
 80067c8:	688a      	ldr	r2, [r1, #8]
 80067ca:	690b      	ldr	r3, [r1, #16]
 80067cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bfb8      	it	lt
 80067d4:	4613      	movlt	r3, r2
 80067d6:	6033      	str	r3, [r6, #0]
 80067d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067dc:	4607      	mov	r7, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	b10a      	cbz	r2, 80067e6 <_printf_common+0x26>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	0699      	lsls	r1, r3, #26
 80067ea:	bf42      	ittt	mi
 80067ec:	6833      	ldrmi	r3, [r6, #0]
 80067ee:	3302      	addmi	r3, #2
 80067f0:	6033      	strmi	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	f015 0506 	ands.w	r5, r5, #6
 80067f8:	d106      	bne.n	8006808 <_printf_common+0x48>
 80067fa:	f104 0a19 	add.w	sl, r4, #25
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	42ab      	cmp	r3, r5
 8006806:	dc26      	bgt.n	8006856 <_printf_common+0x96>
 8006808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800680c:	1e13      	subs	r3, r2, #0
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	bf18      	it	ne
 8006812:	2301      	movne	r3, #1
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d42b      	bmi.n	8006870 <_printf_common+0xb0>
 8006818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800681c:	4649      	mov	r1, r9
 800681e:	4638      	mov	r0, r7
 8006820:	47c0      	blx	r8
 8006822:	3001      	adds	r0, #1
 8006824:	d01e      	beq.n	8006864 <_printf_common+0xa4>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	68e5      	ldr	r5, [r4, #12]
 800682a:	6832      	ldr	r2, [r6, #0]
 800682c:	f003 0306 	and.w	r3, r3, #6
 8006830:	2b04      	cmp	r3, #4
 8006832:	bf08      	it	eq
 8006834:	1aad      	subeq	r5, r5, r2
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	bf0c      	ite	eq
 800683c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006840:	2500      	movne	r5, #0
 8006842:	4293      	cmp	r3, r2
 8006844:	bfc4      	itt	gt
 8006846:	1a9b      	subgt	r3, r3, r2
 8006848:	18ed      	addgt	r5, r5, r3
 800684a:	2600      	movs	r6, #0
 800684c:	341a      	adds	r4, #26
 800684e:	42b5      	cmp	r5, r6
 8006850:	d11a      	bne.n	8006888 <_printf_common+0xc8>
 8006852:	2000      	movs	r0, #0
 8006854:	e008      	b.n	8006868 <_printf_common+0xa8>
 8006856:	2301      	movs	r3, #1
 8006858:	4652      	mov	r2, sl
 800685a:	4649      	mov	r1, r9
 800685c:	4638      	mov	r0, r7
 800685e:	47c0      	blx	r8
 8006860:	3001      	adds	r0, #1
 8006862:	d103      	bne.n	800686c <_printf_common+0xac>
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	3501      	adds	r5, #1
 800686e:	e7c6      	b.n	80067fe <_printf_common+0x3e>
 8006870:	18e1      	adds	r1, r4, r3
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	2030      	movs	r0, #48	; 0x30
 8006876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800687a:	4422      	add	r2, r4
 800687c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006884:	3302      	adds	r3, #2
 8006886:	e7c7      	b.n	8006818 <_printf_common+0x58>
 8006888:	2301      	movs	r3, #1
 800688a:	4622      	mov	r2, r4
 800688c:	4649      	mov	r1, r9
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	3001      	adds	r0, #1
 8006894:	d0e6      	beq.n	8006864 <_printf_common+0xa4>
 8006896:	3601      	adds	r6, #1
 8006898:	e7d9      	b.n	800684e <_printf_common+0x8e>
	...

0800689c <_printf_i>:
 800689c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	4691      	mov	r9, r2
 80068a4:	7e27      	ldrb	r7, [r4, #24]
 80068a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068a8:	2f78      	cmp	r7, #120	; 0x78
 80068aa:	4680      	mov	r8, r0
 80068ac:	469a      	mov	sl, r3
 80068ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068b2:	d807      	bhi.n	80068c4 <_printf_i+0x28>
 80068b4:	2f62      	cmp	r7, #98	; 0x62
 80068b6:	d80a      	bhi.n	80068ce <_printf_i+0x32>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	f000 80d8 	beq.w	8006a6e <_printf_i+0x1d2>
 80068be:	2f58      	cmp	r7, #88	; 0x58
 80068c0:	f000 80a3 	beq.w	8006a0a <_printf_i+0x16e>
 80068c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068cc:	e03a      	b.n	8006944 <_printf_i+0xa8>
 80068ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068d2:	2b15      	cmp	r3, #21
 80068d4:	d8f6      	bhi.n	80068c4 <_printf_i+0x28>
 80068d6:	a001      	add	r0, pc, #4	; (adr r0, 80068dc <_printf_i+0x40>)
 80068d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006949 	.word	0x08006949
 80068e4:	080068c5 	.word	0x080068c5
 80068e8:	080068c5 	.word	0x080068c5
 80068ec:	080068c5 	.word	0x080068c5
 80068f0:	080068c5 	.word	0x080068c5
 80068f4:	08006949 	.word	0x08006949
 80068f8:	080068c5 	.word	0x080068c5
 80068fc:	080068c5 	.word	0x080068c5
 8006900:	080068c5 	.word	0x080068c5
 8006904:	080068c5 	.word	0x080068c5
 8006908:	08006a55 	.word	0x08006a55
 800690c:	08006979 	.word	0x08006979
 8006910:	08006a37 	.word	0x08006a37
 8006914:	080068c5 	.word	0x080068c5
 8006918:	080068c5 	.word	0x080068c5
 800691c:	08006a77 	.word	0x08006a77
 8006920:	080068c5 	.word	0x080068c5
 8006924:	08006979 	.word	0x08006979
 8006928:	080068c5 	.word	0x080068c5
 800692c:	080068c5 	.word	0x080068c5
 8006930:	08006a3f 	.word	0x08006a3f
 8006934:	680b      	ldr	r3, [r1, #0]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	600a      	str	r2, [r1, #0]
 800693c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006944:	2301      	movs	r3, #1
 8006946:	e0a3      	b.n	8006a90 <_printf_i+0x1f4>
 8006948:	6825      	ldr	r5, [r4, #0]
 800694a:	6808      	ldr	r0, [r1, #0]
 800694c:	062e      	lsls	r6, r5, #24
 800694e:	f100 0304 	add.w	r3, r0, #4
 8006952:	d50a      	bpl.n	800696a <_printf_i+0xce>
 8006954:	6805      	ldr	r5, [r0, #0]
 8006956:	600b      	str	r3, [r1, #0]
 8006958:	2d00      	cmp	r5, #0
 800695a:	da03      	bge.n	8006964 <_printf_i+0xc8>
 800695c:	232d      	movs	r3, #45	; 0x2d
 800695e:	426d      	negs	r5, r5
 8006960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006964:	485e      	ldr	r0, [pc, #376]	; (8006ae0 <_printf_i+0x244>)
 8006966:	230a      	movs	r3, #10
 8006968:	e019      	b.n	800699e <_printf_i+0x102>
 800696a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800696e:	6805      	ldr	r5, [r0, #0]
 8006970:	600b      	str	r3, [r1, #0]
 8006972:	bf18      	it	ne
 8006974:	b22d      	sxthne	r5, r5
 8006976:	e7ef      	b.n	8006958 <_printf_i+0xbc>
 8006978:	680b      	ldr	r3, [r1, #0]
 800697a:	6825      	ldr	r5, [r4, #0]
 800697c:	1d18      	adds	r0, r3, #4
 800697e:	6008      	str	r0, [r1, #0]
 8006980:	0628      	lsls	r0, r5, #24
 8006982:	d501      	bpl.n	8006988 <_printf_i+0xec>
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	e002      	b.n	800698e <_printf_i+0xf2>
 8006988:	0669      	lsls	r1, r5, #25
 800698a:	d5fb      	bpl.n	8006984 <_printf_i+0xe8>
 800698c:	881d      	ldrh	r5, [r3, #0]
 800698e:	4854      	ldr	r0, [pc, #336]	; (8006ae0 <_printf_i+0x244>)
 8006990:	2f6f      	cmp	r7, #111	; 0x6f
 8006992:	bf0c      	ite	eq
 8006994:	2308      	moveq	r3, #8
 8006996:	230a      	movne	r3, #10
 8006998:	2100      	movs	r1, #0
 800699a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800699e:	6866      	ldr	r6, [r4, #4]
 80069a0:	60a6      	str	r6, [r4, #8]
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	bfa2      	ittt	ge
 80069a6:	6821      	ldrge	r1, [r4, #0]
 80069a8:	f021 0104 	bicge.w	r1, r1, #4
 80069ac:	6021      	strge	r1, [r4, #0]
 80069ae:	b90d      	cbnz	r5, 80069b4 <_printf_i+0x118>
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	d04d      	beq.n	8006a50 <_printf_i+0x1b4>
 80069b4:	4616      	mov	r6, r2
 80069b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ba:	fb03 5711 	mls	r7, r3, r1, r5
 80069be:	5dc7      	ldrb	r7, [r0, r7]
 80069c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069c4:	462f      	mov	r7, r5
 80069c6:	42bb      	cmp	r3, r7
 80069c8:	460d      	mov	r5, r1
 80069ca:	d9f4      	bls.n	80069b6 <_printf_i+0x11a>
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d10b      	bne.n	80069e8 <_printf_i+0x14c>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	07df      	lsls	r7, r3, #31
 80069d4:	d508      	bpl.n	80069e8 <_printf_i+0x14c>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	6861      	ldr	r1, [r4, #4]
 80069da:	4299      	cmp	r1, r3
 80069dc:	bfde      	ittt	le
 80069de:	2330      	movle	r3, #48	; 0x30
 80069e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069e8:	1b92      	subs	r2, r2, r6
 80069ea:	6122      	str	r2, [r4, #16]
 80069ec:	f8cd a000 	str.w	sl, [sp]
 80069f0:	464b      	mov	r3, r9
 80069f2:	aa03      	add	r2, sp, #12
 80069f4:	4621      	mov	r1, r4
 80069f6:	4640      	mov	r0, r8
 80069f8:	f7ff fee2 	bl	80067c0 <_printf_common>
 80069fc:	3001      	adds	r0, #1
 80069fe:	d14c      	bne.n	8006a9a <_printf_i+0x1fe>
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	b004      	add	sp, #16
 8006a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0a:	4835      	ldr	r0, [pc, #212]	; (8006ae0 <_printf_i+0x244>)
 8006a0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	680e      	ldr	r6, [r1, #0]
 8006a14:	061f      	lsls	r7, r3, #24
 8006a16:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a1a:	600e      	str	r6, [r1, #0]
 8006a1c:	d514      	bpl.n	8006a48 <_printf_i+0x1ac>
 8006a1e:	07d9      	lsls	r1, r3, #31
 8006a20:	bf44      	itt	mi
 8006a22:	f043 0320 	orrmi.w	r3, r3, #32
 8006a26:	6023      	strmi	r3, [r4, #0]
 8006a28:	b91d      	cbnz	r5, 8006a32 <_printf_i+0x196>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f023 0320 	bic.w	r3, r3, #32
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	2310      	movs	r3, #16
 8006a34:	e7b0      	b.n	8006998 <_printf_i+0xfc>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f043 0320 	orr.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2378      	movs	r3, #120	; 0x78
 8006a40:	4828      	ldr	r0, [pc, #160]	; (8006ae4 <_printf_i+0x248>)
 8006a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a46:	e7e3      	b.n	8006a10 <_printf_i+0x174>
 8006a48:	065e      	lsls	r6, r3, #25
 8006a4a:	bf48      	it	mi
 8006a4c:	b2ad      	uxthmi	r5, r5
 8006a4e:	e7e6      	b.n	8006a1e <_printf_i+0x182>
 8006a50:	4616      	mov	r6, r2
 8006a52:	e7bb      	b.n	80069cc <_printf_i+0x130>
 8006a54:	680b      	ldr	r3, [r1, #0]
 8006a56:	6826      	ldr	r6, [r4, #0]
 8006a58:	6960      	ldr	r0, [r4, #20]
 8006a5a:	1d1d      	adds	r5, r3, #4
 8006a5c:	600d      	str	r5, [r1, #0]
 8006a5e:	0635      	lsls	r5, r6, #24
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	d501      	bpl.n	8006a68 <_printf_i+0x1cc>
 8006a64:	6018      	str	r0, [r3, #0]
 8006a66:	e002      	b.n	8006a6e <_printf_i+0x1d2>
 8006a68:	0671      	lsls	r1, r6, #25
 8006a6a:	d5fb      	bpl.n	8006a64 <_printf_i+0x1c8>
 8006a6c:	8018      	strh	r0, [r3, #0]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	4616      	mov	r6, r2
 8006a74:	e7ba      	b.n	80069ec <_printf_i+0x150>
 8006a76:	680b      	ldr	r3, [r1, #0]
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	600a      	str	r2, [r1, #0]
 8006a7c:	681e      	ldr	r6, [r3, #0]
 8006a7e:	6862      	ldr	r2, [r4, #4]
 8006a80:	2100      	movs	r1, #0
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7f9 fbac 	bl	80001e0 <memchr>
 8006a88:	b108      	cbz	r0, 8006a8e <_printf_i+0x1f2>
 8006a8a:	1b80      	subs	r0, r0, r6
 8006a8c:	6060      	str	r0, [r4, #4]
 8006a8e:	6863      	ldr	r3, [r4, #4]
 8006a90:	6123      	str	r3, [r4, #16]
 8006a92:	2300      	movs	r3, #0
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a98:	e7a8      	b.n	80069ec <_printf_i+0x150>
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	47d0      	blx	sl
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d0ab      	beq.n	8006a00 <_printf_i+0x164>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	079b      	lsls	r3, r3, #30
 8006aac:	d413      	bmi.n	8006ad6 <_printf_i+0x23a>
 8006aae:	68e0      	ldr	r0, [r4, #12]
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	4298      	cmp	r0, r3
 8006ab4:	bfb8      	it	lt
 8006ab6:	4618      	movlt	r0, r3
 8006ab8:	e7a4      	b.n	8006a04 <_printf_i+0x168>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4632      	mov	r2, r6
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	47d0      	blx	sl
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d09b      	beq.n	8006a00 <_printf_i+0x164>
 8006ac8:	3501      	adds	r5, #1
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	9903      	ldr	r1, [sp, #12]
 8006ace:	1a5b      	subs	r3, r3, r1
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dcf2      	bgt.n	8006aba <_printf_i+0x21e>
 8006ad4:	e7eb      	b.n	8006aae <_printf_i+0x212>
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	f104 0619 	add.w	r6, r4, #25
 8006adc:	e7f5      	b.n	8006aca <_printf_i+0x22e>
 8006ade:	bf00      	nop
 8006ae0:	08006da1 	.word	0x08006da1
 8006ae4:	08006db2 	.word	0x08006db2

08006ae8 <memmove>:
 8006ae8:	4288      	cmp	r0, r1
 8006aea:	b510      	push	{r4, lr}
 8006aec:	eb01 0402 	add.w	r4, r1, r2
 8006af0:	d902      	bls.n	8006af8 <memmove+0x10>
 8006af2:	4284      	cmp	r4, r0
 8006af4:	4623      	mov	r3, r4
 8006af6:	d807      	bhi.n	8006b08 <memmove+0x20>
 8006af8:	1e43      	subs	r3, r0, #1
 8006afa:	42a1      	cmp	r1, r4
 8006afc:	d008      	beq.n	8006b10 <memmove+0x28>
 8006afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b06:	e7f8      	b.n	8006afa <memmove+0x12>
 8006b08:	4402      	add	r2, r0
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	428a      	cmp	r2, r1
 8006b0e:	d100      	bne.n	8006b12 <memmove+0x2a>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b1a:	e7f7      	b.n	8006b0c <memmove+0x24>

08006b1c <_free_r>:
 8006b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	d048      	beq.n	8006bb4 <_free_r+0x98>
 8006b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b26:	9001      	str	r0, [sp, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b2e:	bfb8      	it	lt
 8006b30:	18e4      	addlt	r4, r4, r3
 8006b32:	f000 f8d3 	bl	8006cdc <__malloc_lock>
 8006b36:	4a20      	ldr	r2, [pc, #128]	; (8006bb8 <_free_r+0x9c>)
 8006b38:	9801      	ldr	r0, [sp, #4]
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	4615      	mov	r5, r2
 8006b3e:	b933      	cbnz	r3, 8006b4e <_free_r+0x32>
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	6014      	str	r4, [r2, #0]
 8006b44:	b003      	add	sp, #12
 8006b46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b4a:	f000 b8cd 	b.w	8006ce8 <__malloc_unlock>
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	d90b      	bls.n	8006b6a <_free_r+0x4e>
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	1862      	adds	r2, r4, r1
 8006b56:	4293      	cmp	r3, r2
 8006b58:	bf04      	itt	eq
 8006b5a:	681a      	ldreq	r2, [r3, #0]
 8006b5c:	685b      	ldreq	r3, [r3, #4]
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	bf04      	itt	eq
 8006b62:	1852      	addeq	r2, r2, r1
 8006b64:	6022      	streq	r2, [r4, #0]
 8006b66:	602c      	str	r4, [r5, #0]
 8006b68:	e7ec      	b.n	8006b44 <_free_r+0x28>
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	b10b      	cbz	r3, 8006b74 <_free_r+0x58>
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d9fa      	bls.n	8006b6a <_free_r+0x4e>
 8006b74:	6811      	ldr	r1, [r2, #0]
 8006b76:	1855      	adds	r5, r2, r1
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	d10b      	bne.n	8006b94 <_free_r+0x78>
 8006b7c:	6824      	ldr	r4, [r4, #0]
 8006b7e:	4421      	add	r1, r4
 8006b80:	1854      	adds	r4, r2, r1
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	d1dd      	bne.n	8006b44 <_free_r+0x28>
 8006b88:	681c      	ldr	r4, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	6053      	str	r3, [r2, #4]
 8006b8e:	4421      	add	r1, r4
 8006b90:	6011      	str	r1, [r2, #0]
 8006b92:	e7d7      	b.n	8006b44 <_free_r+0x28>
 8006b94:	d902      	bls.n	8006b9c <_free_r+0x80>
 8006b96:	230c      	movs	r3, #12
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	e7d3      	b.n	8006b44 <_free_r+0x28>
 8006b9c:	6825      	ldr	r5, [r4, #0]
 8006b9e:	1961      	adds	r1, r4, r5
 8006ba0:	428b      	cmp	r3, r1
 8006ba2:	bf04      	itt	eq
 8006ba4:	6819      	ldreq	r1, [r3, #0]
 8006ba6:	685b      	ldreq	r3, [r3, #4]
 8006ba8:	6063      	str	r3, [r4, #4]
 8006baa:	bf04      	itt	eq
 8006bac:	1949      	addeq	r1, r1, r5
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	6054      	str	r4, [r2, #4]
 8006bb2:	e7c7      	b.n	8006b44 <_free_r+0x28>
 8006bb4:	b003      	add	sp, #12
 8006bb6:	bd30      	pop	{r4, r5, pc}
 8006bb8:	20012e04 	.word	0x20012e04

08006bbc <_malloc_r>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	1ccd      	adds	r5, r1, #3
 8006bc0:	f025 0503 	bic.w	r5, r5, #3
 8006bc4:	3508      	adds	r5, #8
 8006bc6:	2d0c      	cmp	r5, #12
 8006bc8:	bf38      	it	cc
 8006bca:	250c      	movcc	r5, #12
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	4606      	mov	r6, r0
 8006bd0:	db01      	blt.n	8006bd6 <_malloc_r+0x1a>
 8006bd2:	42a9      	cmp	r1, r5
 8006bd4:	d903      	bls.n	8006bde <_malloc_r+0x22>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	6033      	str	r3, [r6, #0]
 8006bda:	2000      	movs	r0, #0
 8006bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bde:	f000 f87d 	bl	8006cdc <__malloc_lock>
 8006be2:	4921      	ldr	r1, [pc, #132]	; (8006c68 <_malloc_r+0xac>)
 8006be4:	680a      	ldr	r2, [r1, #0]
 8006be6:	4614      	mov	r4, r2
 8006be8:	b99c      	cbnz	r4, 8006c12 <_malloc_r+0x56>
 8006bea:	4f20      	ldr	r7, [pc, #128]	; (8006c6c <_malloc_r+0xb0>)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	b923      	cbnz	r3, 8006bfa <_malloc_r+0x3e>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f000 f862 	bl	8006cbc <_sbrk_r>
 8006bf8:	6038      	str	r0, [r7, #0]
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f000 f85d 	bl	8006cbc <_sbrk_r>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	d123      	bne.n	8006c4e <_malloc_r+0x92>
 8006c06:	230c      	movs	r3, #12
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f86c 	bl	8006ce8 <__malloc_unlock>
 8006c10:	e7e3      	b.n	8006bda <_malloc_r+0x1e>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	1b5b      	subs	r3, r3, r5
 8006c16:	d417      	bmi.n	8006c48 <_malloc_r+0x8c>
 8006c18:	2b0b      	cmp	r3, #11
 8006c1a:	d903      	bls.n	8006c24 <_malloc_r+0x68>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	441c      	add	r4, r3
 8006c20:	6025      	str	r5, [r4, #0]
 8006c22:	e004      	b.n	8006c2e <_malloc_r+0x72>
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	42a2      	cmp	r2, r4
 8006c28:	bf0c      	ite	eq
 8006c2a:	600b      	streq	r3, [r1, #0]
 8006c2c:	6053      	strne	r3, [r2, #4]
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 f85a 	bl	8006ce8 <__malloc_unlock>
 8006c34:	f104 000b 	add.w	r0, r4, #11
 8006c38:	1d23      	adds	r3, r4, #4
 8006c3a:	f020 0007 	bic.w	r0, r0, #7
 8006c3e:	1ac2      	subs	r2, r0, r3
 8006c40:	d0cc      	beq.n	8006bdc <_malloc_r+0x20>
 8006c42:	1a1b      	subs	r3, r3, r0
 8006c44:	50a3      	str	r3, [r4, r2]
 8006c46:	e7c9      	b.n	8006bdc <_malloc_r+0x20>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	6864      	ldr	r4, [r4, #4]
 8006c4c:	e7cc      	b.n	8006be8 <_malloc_r+0x2c>
 8006c4e:	1cc4      	adds	r4, r0, #3
 8006c50:	f024 0403 	bic.w	r4, r4, #3
 8006c54:	42a0      	cmp	r0, r4
 8006c56:	d0e3      	beq.n	8006c20 <_malloc_r+0x64>
 8006c58:	1a21      	subs	r1, r4, r0
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f82e 	bl	8006cbc <_sbrk_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	d1dd      	bne.n	8006c20 <_malloc_r+0x64>
 8006c64:	e7cf      	b.n	8006c06 <_malloc_r+0x4a>
 8006c66:	bf00      	nop
 8006c68:	20012e04 	.word	0x20012e04
 8006c6c:	20012e08 	.word	0x20012e08

08006c70 <_realloc_r>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	4607      	mov	r7, r0
 8006c74:	4614      	mov	r4, r2
 8006c76:	460e      	mov	r6, r1
 8006c78:	b921      	cbnz	r1, 8006c84 <_realloc_r+0x14>
 8006c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c7e:	4611      	mov	r1, r2
 8006c80:	f7ff bf9c 	b.w	8006bbc <_malloc_r>
 8006c84:	b922      	cbnz	r2, 8006c90 <_realloc_r+0x20>
 8006c86:	f7ff ff49 	bl	8006b1c <_free_r>
 8006c8a:	4625      	mov	r5, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c90:	f000 f830 	bl	8006cf4 <_malloc_usable_size_r>
 8006c94:	42a0      	cmp	r0, r4
 8006c96:	d20f      	bcs.n	8006cb8 <_realloc_r+0x48>
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f7ff ff8e 	bl	8006bbc <_malloc_r>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d0f2      	beq.n	8006c8c <_realloc_r+0x1c>
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4622      	mov	r2, r4
 8006caa:	f7ff fbf7 	bl	800649c <memcpy>
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ff33 	bl	8006b1c <_free_r>
 8006cb6:	e7e9      	b.n	8006c8c <_realloc_r+0x1c>
 8006cb8:	4635      	mov	r5, r6
 8006cba:	e7e7      	b.n	8006c8c <_realloc_r+0x1c>

08006cbc <_sbrk_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d06      	ldr	r5, [pc, #24]	; (8006cd8 <_sbrk_r+0x1c>)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	602b      	str	r3, [r5, #0]
 8006cc8:	f7fa f894 	bl	8000df4 <_sbrk>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_sbrk_r+0x1a>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_sbrk_r+0x1a>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20012f70 	.word	0x20012f70

08006cdc <__malloc_lock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__malloc_lock+0x8>)
 8006cde:	f000 b811 	b.w	8006d04 <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	20012f78 	.word	0x20012f78

08006ce8 <__malloc_unlock>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__malloc_unlock+0x8>)
 8006cea:	f000 b80c 	b.w	8006d06 <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20012f78 	.word	0x20012f78

08006cf4 <_malloc_usable_size_r>:
 8006cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf8:	1f18      	subs	r0, r3, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfbc      	itt	lt
 8006cfe:	580b      	ldrlt	r3, [r1, r0]
 8006d00:	18c0      	addlt	r0, r0, r3
 8006d02:	4770      	bx	lr

08006d04 <__retarget_lock_acquire_recursive>:
 8006d04:	4770      	bx	lr

08006d06 <__retarget_lock_release_recursive>:
 8006d06:	4770      	bx	lr

08006d08 <_init>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr

08006d14 <_fini>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr
