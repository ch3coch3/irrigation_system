
final project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009544  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080096d4  080096d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a84  08009a84  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a8c  08009a8c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013bdc  2000008c  08009b20  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013c68  08009b20  00023c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce69  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e05  00000000  00000000  0003cf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00042398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a8f  00000000  00000000  00043888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194b6  00000000  00000000  0004a317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4f7f  00000000  00000000  000637cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014874c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  001487a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096bc 	.word	0x080096bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080096bc 	.word	0x080096bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <delay_us>:
#include "delay.h"

void delay_us(uint16_t us){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <delay_us+0x30>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 80005aa:	bf00      	nop
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <delay_us+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3f9      	bcc.n	80005ac <delay_us+0x14>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20013844 	.word	0x20013844

080005cc <enc28j60ReadOp>:
//
//#define enc28j60_rx() enc28j60_rxtx(0xff)
//#define enc28j60_tx(data) enc28j60_rxtx(data)

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiData[2];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <enc28j60ReadOp+0x7c>)
 80005e2:	f003 f87f 	bl	80036e4 <HAL_GPIO_WritePin>
	spiData[0] = (op| (address & ADDR_MASK));
 80005e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005ea:	f003 031f 	and.w	r3, r3, #31
 80005ee:	b25a      	sxtb	r2, r3
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
 80005fc:	f107 010c 	add.w	r1, r7, #12
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	2201      	movs	r2, #1
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <enc28j60ReadOp+0x80>)
 8000606:	f003 fdb6 	bl	8004176 <HAL_SPI_Transmit>
	if(address & 0x80)
 800060a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800060e:	2b00      	cmp	r3, #0
 8000610:	da07      	bge.n	8000622 <enc28j60ReadOp+0x56>
	{
		//HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
		HAL_SPI_Receive(&hspi1, &spiData[1], 1, 100);
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	1c59      	adds	r1, r3, #1
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	2201      	movs	r2, #1
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <enc28j60ReadOp+0x80>)
 800061e:	f003 fee6 	bl	80043ee <HAL_SPI_Receive>
	}
	HAL_SPI_Receive(&hspi1, &spiData[1], 1, 100);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	2201      	movs	r2, #1
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <enc28j60ReadOp+0x80>)
 800062e:	f003 fede 	bl	80043ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <enc28j60ReadOp+0x7c>)
 8000638:	f003 f854 	bl	80036e4 <HAL_GPIO_WritePin>

	return spiData[1];
 800063c:	7b7b      	ldrb	r3, [r7, #13]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020c00 	.word	0x40020c00
 800064c:	20013b28 	.word	0x20013b28

08000650 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	460b      	mov	r3, r1
 800065c:	71bb      	strb	r3, [r7, #6]
 800065e:	4613      	mov	r3, r2
 8000660:	717b      	strb	r3, [r7, #5]
	uint8_t spiData[2];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	4810      	ldr	r0, [pc, #64]	; (80006a8 <enc28j60WriteOp+0x58>)
 8000668:	f003 f83c 	bl	80036e4 <HAL_GPIO_WritePin>
	spiData[0] = (op| (address & ADDR_MASK)); //((oper<<5)&0xE0)|(addr & ADDR_MASK);
 800066c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	b25a      	sxtb	r2, r3
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	4313      	orrs	r3, r2
 800067c:	b25b      	sxtb	r3, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	733b      	strb	r3, [r7, #12]
	spiData[1] = data;
 8000682:	797b      	ldrb	r3, [r7, #5]
 8000684:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, spiData, 2, 100);
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2202      	movs	r2, #2
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <enc28j60WriteOp+0x5c>)
 8000690:	f003 fd71 	bl	8004176 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <enc28j60WriteOp+0x58>)
 800069a:	f003 f823 	bl	80036e4 <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	20013b28 	.word	0x20013b28

080006b0 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	80fb      	strh	r3, [r7, #6]
		uint8_t spiData[2];
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <enc28j60ReadBuffer+0x48>)
 80006c2:	f003 f80f 	bl	80036e4 <HAL_GPIO_WritePin>
		spiData[0] = ENC28J60_READ_BUF_MEM;
 80006c6:	233a      	movs	r3, #58	; 0x3a
 80006c8:	733b      	strb	r3, [r7, #12]
//		enc28j60_select();
		HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
 80006ca:	f107 010c 	add.w	r1, r7, #12
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	2201      	movs	r2, #1
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <enc28j60ReadBuffer+0x4c>)
 80006d4:	f003 fd4f 	bl	8004176 <HAL_SPI_Transmit>
//		enc28j60_tx(ENC28J60_READ_BUF_MEM);
//		while(len--)
//		{
			 HAL_SPI_Receive(&hspi1, data, len, 100);
 80006d8:	88fa      	ldrh	r2, [r7, #6]
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	6839      	ldr	r1, [r7, #0]
 80006de:	4807      	ldr	r0, [pc, #28]	; (80006fc <enc28j60ReadBuffer+0x4c>)
 80006e0:	f003 fe85 	bl	80043ee <HAL_SPI_Receive>
//		}
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <enc28j60ReadBuffer+0x48>)
 80006ea:	f002 fffb 	bl	80036e4 <HAL_GPIO_WritePin>
//		enc28j60_release();
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	20013b28 	.word	0x20013b28

08000700 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	80fb      	strh	r3, [r7, #6]
		uint8_t spiData[2];
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <enc28j60WriteBuffer+0x48>)
 8000712:	f002 ffe7 	bl	80036e4 <HAL_GPIO_WritePin>
//		enc28j60_select();
		spiData[0] = ENC28J60_WRITE_BUF_MEM;
 8000716:	237a      	movs	r3, #122	; 0x7a
 8000718:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit(&hspi1, spiData, 1, 100);
 800071a:	f107 010c 	add.w	r1, r7, #12
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	2201      	movs	r2, #1
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <enc28j60WriteBuffer+0x4c>)
 8000724:	f003 fd27 	bl	8004176 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, data, len, 100);
 8000728:	88fa      	ldrh	r2, [r7, #6]
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <enc28j60WriteBuffer+0x4c>)
 8000730:	f003 fd21 	bl	8004176 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <enc28j60WriteBuffer+0x48>)
 800073a:	f002 ffd3 	bl	80036e4 <HAL_GPIO_WritePin>
//			HAL_SPI_Transmit(&hspi1, data++, len, 100);
////			enc28j60_tx(*(data++));
//		}
//		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,GPIO_PIN_SET);
//		enc28j60_release();
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020c00 	.word	0x40020c00
 800074c:	20013b28 	.word	0x20013b28

08000750 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <enc28j60SetBank+0x4c>)
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	4293      	cmp	r3, r2
 8000766:	d015      	beq.n	8000794 <enc28j60SetBank+0x44>
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 8000768:	2203      	movs	r2, #3
 800076a:	211f      	movs	r1, #31
 800076c:	20a0      	movs	r0, #160	; 0xa0
 800076e:	f7ff ff6f 	bl	8000650 <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	115b      	asrs	r3, r3, #5
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	211f      	movs	r1, #31
 8000782:	2080      	movs	r0, #128	; 0x80
 8000784:	f7ff ff64 	bl	8000650 <enc28j60WriteOp>
                Enc28j60Bank = (address & BANK_MASK);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <enc28j60SetBank+0x4c>)
 8000792:	701a      	strb	r2, [r3, #0]
        }
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000a8 	.word	0x200000a8

080007a0 <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
        // set the bank
        enc28j60SetBank(address);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ffcf 	bl	8000750 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff08 	bl	80005cc <enc28j60ReadOp>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <enc28j60Write>:

void enc28j60Write(uint8_t address, uint8_t data)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	460a      	mov	r2, r1
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	4613      	mov	r3, r2
 80007d4:	71bb      	strb	r3, [r7, #6]
        // set the bank
        enc28j60SetBank(address);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffb9 	bl	8000750 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4619      	mov	r1, r3
 80007e4:	2040      	movs	r0, #64	; 0x40
 80007e6:	f7ff ff33 	bl	8000650 <enc28j60WriteOp>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <enc28j60PhyWrite>:

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	460a      	mov	r2, r1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	4613      	mov	r3, r2
 8000800:	80bb      	strh	r3, [r7, #4]
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4619      	mov	r1, r3
 8000806:	20d4      	movs	r0, #212	; 0xd4
 8000808:	f7ff ffdd 	bl	80007c6 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
 800080c:	88bb      	ldrh	r3, [r7, #4]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	20d6      	movs	r0, #214	; 0xd6
 8000814:	f7ff ffd7 	bl	80007c6 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
 8000818:	88bb      	ldrh	r3, [r7, #4]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	b29b      	uxth	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	20d7      	movs	r0, #215	; 0xd7
 8000824:	f7ff ffcf 	bl	80007c6 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8000828:	e002      	b.n	8000830 <enc28j60PhyWrite+0x3e>
                //delayMicroseconds(15);
        	delay_us(15);
 800082a:	200f      	movs	r0, #15
 800082c:	f7ff feb4 	bl	8000598 <delay_us>
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8000830:	20ea      	movs	r0, #234	; 0xea
 8000832:	f7ff ffb5 	bl	80007a0 <enc28j60Read>
 8000836:	4603      	mov	r3, r0
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f4      	bne.n	800082a <enc28j60PhyWrite+0x38>

        }
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
    //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	2075      	movs	r0, #117	; 0x75
 8000860:	f7ff ffb1 	bl	80007c6 <enc28j60Write>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	4856      	ldr	r0, [pc, #344]	; (80009d4 <enc28j60Init+0x168>)
 800087a:	f002 ff33 	bl	80036e4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f001 ffe2 	bl	8002848 <HAL_Delay>
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	2100      	movs	r1, #0
 8000888:	20ff      	movs	r0, #255	; 0xff
 800088a:	f7ff fee1 	bl	8000650 <enc28j60WriteOp>
	HAL_Delay(50);
 800088e:	2032      	movs	r0, #50	; 0x32
 8000890:	f001 ffda 	bl	8002848 <HAL_Delay>

	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	NextPacketPtr = RXSTART_INIT;
 8000894:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <enc28j60Init+0x16c>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 800089a:	2100      	movs	r1, #0
 800089c:	2008      	movs	r0, #8
 800089e:	f7ff ff92 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 80008a2:	2100      	movs	r1, #0
 80008a4:	2009      	movs	r0, #9
 80008a6:	f7ff ff8e 	bl	80007c6 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 80008aa:	2100      	movs	r1, #0
 80008ac:	200c      	movs	r0, #12
 80008ae:	f7ff ff8a 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 80008b2:	2100      	movs	r1, #0
 80008b4:	200d      	movs	r0, #13
 80008b6:	f7ff ff86 	bl	80007c6 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 80008ba:	21fe      	movs	r1, #254	; 0xfe
 80008bc:	200a      	movs	r0, #10
 80008be:	f7ff ff82 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 80008c2:	2119      	movs	r1, #25
 80008c4:	200b      	movs	r0, #11
 80008c6:	f7ff ff7e 	bl	80007c6 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 80008ca:	21ff      	movs	r1, #255	; 0xff
 80008cc:	2004      	movs	r0, #4
 80008ce:	f7ff ff7a 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 80008d2:	2119      	movs	r1, #25
 80008d4:	2005      	movs	r0, #5
 80008d6:	f7ff ff76 	bl	80007c6 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 80008da:	21ff      	movs	r1, #255	; 0xff
 80008dc:	2006      	movs	r0, #6
 80008de:	f7ff ff72 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 80008e2:	211f      	movs	r1, #31
 80008e4:	2007      	movs	r0, #7
 80008e6:	f7ff ff6e 	bl	80007c6 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
 80008ea:	21b0      	movs	r1, #176	; 0xb0
 80008ec:	2038      	movs	r0, #56	; 0x38
 80008ee:	f7ff ff6a 	bl	80007c6 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
 80008f2:	213f      	movs	r1, #63	; 0x3f
 80008f4:	2028      	movs	r0, #40	; 0x28
 80008f6:	f7ff ff66 	bl	80007c6 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
 80008fa:	2130      	movs	r1, #48	; 0x30
 80008fc:	2029      	movs	r0, #41	; 0x29
 80008fe:	f7ff ff62 	bl	80007c6 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
 8000902:	21f9      	movs	r1, #249	; 0xf9
 8000904:	2030      	movs	r0, #48	; 0x30
 8000906:	f7ff ff5e 	bl	80007c6 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
 800090a:	21f7      	movs	r1, #247	; 0xf7
 800090c:	2031      	movs	r0, #49	; 0x31
 800090e:	f7ff ff5a 	bl	80007c6 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8000912:	210d      	movs	r1, #13
 8000914:	20c0      	movs	r0, #192	; 0xc0
 8000916:	f7ff ff56 	bl	80007c6 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
 800091a:	2100      	movs	r1, #0
 800091c:	20c1      	movs	r0, #193	; 0xc1
 800091e:	f7ff ff52 	bl	80007c6 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 8000922:	2232      	movs	r2, #50	; 0x32
 8000924:	21c2      	movs	r1, #194	; 0xc2
 8000926:	2080      	movs	r0, #128	; 0x80
 8000928:	f7ff fe92 	bl	8000650 <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
 800092c:	2112      	movs	r1, #18
 800092e:	20c6      	movs	r0, #198	; 0xc6
 8000930:	f7ff ff49 	bl	80007c6 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
 8000934:	210c      	movs	r1, #12
 8000936:	20c7      	movs	r0, #199	; 0xc7
 8000938:	f7ff ff45 	bl	80007c6 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
 800093c:	2112      	movs	r1, #18
 800093e:	20c4      	movs	r0, #196	; 0xc4
 8000940:	f7ff ff41 	bl	80007c6 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);
 8000944:	21dc      	movs	r1, #220	; 0xdc
 8000946:	20ca      	movs	r0, #202	; 0xca
 8000948:	f7ff ff3d 	bl	80007c6 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 800094c:	2105      	movs	r1, #5
 800094e:	20cb      	movs	r0, #203	; 0xcb
 8000950:	f7ff ff39 	bl	80007c6 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	20e4      	movs	r0, #228	; 0xe4
 800095c:	f7ff ff33 	bl	80007c6 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	20e5      	movs	r0, #229	; 0xe5
 800096a:	f7ff ff2c 	bl	80007c6 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3302      	adds	r3, #2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	20e2      	movs	r0, #226	; 0xe2
 8000978:	f7ff ff25 	bl	80007c6 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3303      	adds	r3, #3
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	20e3      	movs	r0, #227	; 0xe3
 8000986:	f7ff ff1e 	bl	80007c6 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3304      	adds	r3, #4
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	20e0      	movs	r0, #224	; 0xe0
 8000994:	f7ff ff17 	bl	80007c6 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3305      	adds	r3, #5
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	20e1      	movs	r0, #225	; 0xe1
 80009a2:	f7ff ff10 	bl	80007c6 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 80009a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009aa:	2010      	movs	r0, #16
 80009ac:	f7ff ff21 	bl	80007f2 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
 80009b0:	201f      	movs	r0, #31
 80009b2:	f7ff fecd 	bl	8000750 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 80009b6:	22c0      	movs	r2, #192	; 0xc0
 80009b8:	211b      	movs	r1, #27
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	f7ff fe48 	bl	8000650 <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 80009c0:	2204      	movs	r2, #4
 80009c2:	211f      	movs	r1, #31
 80009c4:	2080      	movs	r0, #128	; 0x80
 80009c6:	f7ff fe43 	bl	8000650 <enc28j60WriteOp>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	200000aa 	.word	0x200000aa

080009dc <enc28j60PacketSend>:
{
	return(enc28j60Read(EREVID));
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	80fb      	strh	r3, [r7, #6]
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 80009e8:	21ff      	movs	r1, #255	; 0xff
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff feeb 	bl	80007c6 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 80009f0:	2119      	movs	r1, #25
 80009f2:	2003      	movs	r0, #3
 80009f4:	f7ff fee7 	bl	80007c6 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	3b01      	subs	r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	2006      	movs	r0, #6
 8000a04:	f7ff fedf 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 8000a0e:	331f      	adds	r3, #31
 8000a10:	121b      	asrs	r3, r3, #8
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	2007      	movs	r0, #7
 8000a18:	f7ff fed5 	bl	80007c6 <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	207a      	movs	r0, #122	; 0x7a
 8000a22:	f7ff fe15 	bl	8000650 <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe68 	bl	8000700 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8000a30:	2208      	movs	r2, #8
 8000a32:	211f      	movs	r1, #31
 8000a34:	2080      	movs	r0, #128	; 0x80
 8000a36:	f7ff fe0b 	bl	8000650 <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f7ff feb0 	bl	80007a0 <enc28j60Read>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <enc28j60PacketSend+0x78>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	211f      	movs	r1, #31
 8000a4e:	20a0      	movs	r0, #160	; 0xa0
 8000a50:	f7ff fdfe 	bl	8000650 <enc28j60WriteOp>
        }
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	80fb      	strh	r3, [r7, #6]
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
 8000a68:	2039      	movs	r0, #57	; 0x39
 8000a6a:	f7ff fe99 	bl	80007a0 <enc28j60Read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <enc28j60PacketReceive+0x1c>
		return(0);
 8000a74:	2300      	movs	r3, #0
 8000a76:	e077      	b.n	8000b68 <enc28j60PacketReceive+0x10c>
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fea0 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
 8000a86:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fe97 	bl	80007c6 <enc28j60Write>
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	203a      	movs	r0, #58	; 0x3a
 8000a9c:	f7ff fd96 	bl	80005cc <enc28j60ReadOp>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000aa6:	801a      	strh	r2, [r3, #0]
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	203a      	movs	r0, #58	; 0x3a
 8000aac:	f7ff fd8e 	bl	80005cc <enc28j60ReadOp>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000ac4:	801a      	strh	r2, [r3, #0]
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	203a      	movs	r0, #58	; 0x3a
 8000aca:	f7ff fd7f 	bl	80005cc <enc28j60ReadOp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	81fb      	strh	r3, [r7, #14]
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	203a      	movs	r0, #58	; 0x3a
 8000ad6:	f7ff fd79 	bl	80005cc <enc28j60ReadOp>
 8000ada:	4603      	mov	r3, r0
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	81fb      	strh	r3, [r7, #14]
        len-=4; //remove the CRC count
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	3b04      	subs	r3, #4
 8000aee:	81fb      	strh	r3, [r7, #14]
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	203a      	movs	r0, #58	; 0x3a
 8000af4:	f7ff fd6a 	bl	80005cc <enc28j60ReadOp>
 8000af8:	4603      	mov	r3, r0
 8000afa:	81bb      	strh	r3, [r7, #12]
	rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 8000afc:	2100      	movs	r1, #0
 8000afe:	203a      	movs	r0, #58	; 0x3a
 8000b00:	f7ff fd64 	bl	80005cc <enc28j60ReadOp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	81bb      	strh	r3, [r7, #12]
	// limit retrieve length
        if (len>maxlen-1){
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d802      	bhi.n	8000b22 <enc28j60PacketReceive+0xc6>
                len=maxlen-1;
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	81fb      	strh	r3, [r7, #14]
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <enc28j60PacketReceive+0xd6>
                // invalid
                len=0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	81fb      	strh	r3, [r7, #14]
 8000b30:	e004      	b.n	8000b3c <enc28j60PacketReceive+0xe0>
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
 8000b32:	89fb      	ldrh	r3, [r7, #14]
 8000b34:	6839      	ldr	r1, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fdba 	bl	80006b0 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4619      	mov	r1, r3
 8000b44:	200c      	movs	r0, #12
 8000b46:	f7ff fe3e 	bl	80007c6 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <enc28j60PacketReceive+0x114>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	200d      	movs	r0, #13
 8000b58:	f7ff fe35 	bl	80007c6 <enc28j60Write>
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	211e      	movs	r1, #30
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	f7ff fd75 	bl	8000650 <enc28j60WriteOp>
	return(len);
 8000b66:	89fb      	ldrh	r3, [r7, #14]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000aa 	.word	0x200000aa

08000b74 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	707b      	strb	r3, [r7, #1]
        // type 0=ip
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d107      	bne.n	8000b9e <checksum+0x2a>
                sum+=IP_PROTO_UDP_V; // protocol udp
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3311      	adds	r3, #17
 8000b92:	60fb      	str	r3, [r7, #12]
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	3b08      	subs	r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
        }
        if(type==2){
 8000b9e:	787b      	ldrb	r3, [r7, #1]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d119      	bne.n	8000bd8 <checksum+0x64>
                sum+=IP_PROTO_TCP_V;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3306      	adds	r3, #6
 8000ba8:	60fb      	str	r3, [r7, #12]
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	60fb      	str	r3, [r7, #12]
        }
        // build the sum of 16bit words
        while(len >1){
 8000bb4:	e010      	b.n	8000bd8 <checksum+0x64>
                sum += 0xFFFF & (*buf<<8|*(buf+1));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	3201      	adds	r2, #1
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
                buf+=2;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
                len-=2;
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	3b02      	subs	r3, #2
 8000bd6:	807b      	strh	r3, [r7, #2]
        while(len >1){
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d8eb      	bhi.n	8000bb6 <checksum+0x42>
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00d      	beq.n	8000c00 <checksum+0x8c>
                sum += (0xFF & *buf)<<8;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 8000bf2:	e005      	b.n	8000c00 <checksum+0x8c>
                sum = (sum & 0xFFFF)+(sum >> 16);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	4413      	add	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
        while (sum>>16){
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0c1b      	lsrs	r3, r3, #16
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f5      	bne.n	8000bf4 <checksum+0x80>
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	b29b      	uxth	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	71fb      	strb	r3, [r7, #7]
        uint8_t i=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75fb      	strb	r3, [r7, #23]
        wwwport=wwwp;
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <init_ip_arp_udp_tcp+0x64>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	7013      	strb	r3, [r2, #0]
        while(i<4){
 8000c34:	e009      	b.n	8000c4a <init_ip_arp_udp_tcp+0x2e>
                ipaddr[i]=myip[i];
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	441a      	add	r2, r3
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	7811      	ldrb	r1, [r2, #0]
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <init_ip_arp_udp_tcp+0x68>)
 8000c42:	54d1      	strb	r1, [r2, r3]
                i++;
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	3301      	adds	r3, #1
 8000c48:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d9f2      	bls.n	8000c36 <init_ip_arp_udp_tcp+0x1a>
        }
        i=0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8000c54:	e009      	b.n	8000c6a <init_ip_arp_udp_tcp+0x4e>
                macaddr[i]=mymac[i];
 8000c56:	7dfb      	ldrb	r3, [r7, #23]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	441a      	add	r2, r3
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	7811      	ldrb	r1, [r2, #0]
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <init_ip_arp_udp_tcp+0x6c>)
 8000c62:	54d1      	strb	r1, [r2, r3]
                i++;
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	3301      	adds	r3, #1
 8000c68:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d9f2      	bls.n	8000c56 <init_ip_arp_udp_tcp+0x3a>
        }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000
 8000c84:	200000b4 	.word	0x200000b4
 8000c88:	200000ac 	.word	0x200000ac

08000c8c <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
        //
        if (len<41){
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	2b28      	cmp	r3, #40	; 0x28
 8000ca0:	d801      	bhi.n	8000ca6 <eth_type_is_arp_and_my_ip+0x1a>
                return(0);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e01f      	b.n	8000ce6 <eth_type_is_arp_and_my_ip+0x5a>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	330c      	adds	r3, #12
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d104      	bne.n	8000cba <eth_type_is_arp_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	330d      	adds	r3, #13
 8000cb4:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V ||
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d011      	beq.n	8000cde <eth_type_is_arp_and_my_ip+0x52>
                return(0);
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e013      	b.n	8000ce6 <eth_type_is_arp_and_my_ip+0x5a>
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3326      	adds	r3, #38	; 0x26
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4909      	ldr	r1, [pc, #36]	; (8000cf4 <eth_type_is_arp_and_my_ip+0x68>)
 8000cce:	5ccb      	ldrb	r3, [r1, r3]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d001      	beq.n	8000cd8 <eth_type_is_arp_and_my_ip+0x4c>
                        return(0);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e006      	b.n	8000ce6 <eth_type_is_arp_and_my_ip+0x5a>
                }
                i++;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d9ec      	bls.n	8000cbe <eth_type_is_arp_and_my_ip+0x32>
        }
        return(1);
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200000b4 	.word	0x200000b4

08000cf8 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
        //eth+ip+udp header is 42
        if (len<42){
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	2b29      	cmp	r3, #41	; 0x29
 8000d0c:	d801      	bhi.n	8000d12 <eth_type_is_ip_and_my_ip+0x1a>
                return(0);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e026      	b.n	8000d60 <eth_type_is_ip_and_my_ip+0x68>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V ||
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	330c      	adds	r3, #12
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d104      	bne.n	8000d26 <eth_type_is_ip_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	330d      	adds	r3, #13
 8000d20:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V ||
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <eth_type_is_ip_and_my_ip+0x32>
                return(0);
 8000d26:	2300      	movs	r3, #0
 8000d28:	e01a      	b.n	8000d60 <eth_type_is_ip_and_my_ip+0x68>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	330e      	adds	r3, #14
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b45      	cmp	r3, #69	; 0x45
 8000d32:	d011      	beq.n	8000d58 <eth_type_is_ip_and_my_ip+0x60>
                // must be IP V4 and 20 byte header
                return(0);
 8000d34:	2300      	movs	r3, #0
 8000d36:	e013      	b.n	8000d60 <eth_type_is_ip_and_my_ip+0x68>
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	331e      	adds	r3, #30
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	4909      	ldr	r1, [pc, #36]	; (8000d6c <eth_type_is_ip_and_my_ip+0x74>)
 8000d48:	5ccb      	ldrb	r3, [r1, r3]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d001      	beq.n	8000d52 <eth_type_is_ip_and_my_ip+0x5a>
                        return(0);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e006      	b.n	8000d60 <eth_type_is_ip_and_my_ip+0x68>
                }
                i++;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	3301      	adds	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d9ec      	bls.n	8000d38 <eth_type_is_ip_and_my_ip+0x40>
        }
        return(1);
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	200000b4 	.word	0x200000b4

08000d70 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8000d7c:	e015      	b.n	8000daa <make_eth+0x3a>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3306      	adds	r3, #6
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	441a      	add	r2, r3
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3306      	adds	r3, #6
 8000d98:	4619      	mov	r1, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <make_eth+0x50>)
 8000da0:	5c8a      	ldrb	r2, [r1, r2]
 8000da2:	701a      	strb	r2, [r3, #0]
                i++;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3301      	adds	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b05      	cmp	r3, #5
 8000dae:	d9e6      	bls.n	8000d7e <make_eth+0xe>
        }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200000ac 	.word	0x200000ac

08000dc4 <fill_ip_hdr_checksum>:
		buf[ ETH_TYPE_L_P ] = ETHTYPE_IP_L_V;
}


void fill_ip_hdr_checksum(uint8_t *buf)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3319      	adds	r3, #25
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P]=0x40; // don't fragment
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3314      	adds	r3, #20
 8000de0:	2240      	movs	r2, #64	; 0x40
 8000de2:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3315      	adds	r3, #21
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
        buf[IP_TTL_P]=64; // ttl
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3316      	adds	r3, #22
 8000df0:	2240      	movs	r2, #64	; 0x40
 8000df2:	701a      	strb	r2, [r3, #0]
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	330e      	adds	r3, #14
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2114      	movs	r1, #20
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff feb9 	bl	8000b74 <checksum>
 8000e02:	4603      	mov	r3, r0
 8000e04:	81fb      	strh	r3, [r7, #14]
        buf[IP_CHECKSUM_P]=ck>>8;
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3318      	adds	r3, #24
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3319      	adds	r3, #25
 8000e18:	89fa      	ldrh	r2, [r7, #14]
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <make_ip>:
}


// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000e34:	e017      	b.n	8000e66 <make_ip+0x3e>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	331a      	adds	r3, #26
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	441a      	add	r2, r3
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	331e      	adds	r3, #30
 8000e44:	4619      	mov	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	440b      	add	r3, r1
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	331a      	adds	r3, #26
 8000e54:	4619      	mov	r1, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	440b      	add	r3, r1
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <make_ip+0x54>)
 8000e5c:	5c8a      	ldrb	r2, [r1, r2]
 8000e5e:	701a      	strb	r2, [r3, #0]
                i++;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d9e4      	bls.n	8000e36 <make_ip+0xe>
        }
        fill_ip_hdr_checksum(buf);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ffa9 	bl	8000dc4 <fill_ip_hdr_checksum>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200000b4 	.word	0x200000b4

08000e80 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	460b      	mov	r3, r1
 8000e94:	707b      	strb	r3, [r7, #1]
 8000e96:	4613      	mov	r3, r2
 8000e98:	703b      	strb	r3, [r7, #0]
        uint8_t i=0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
        uint8_t tseq;
        while(i<2){
 8000e9e:	e015      	b.n	8000ecc <make_tcphead+0x4c>
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	3322      	adds	r3, #34	; 0x22
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	441a      	add	r2, r3
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	3324      	adds	r3, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	440b      	add	r3, r1
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3322      	adds	r3, #34	; 0x22
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
                i++;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
        while(i<2){
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d9e6      	bls.n	8000ea0 <make_tcphead+0x20>
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3323      	adds	r3, #35	; 0x23
 8000ed6:	4a3c      	ldr	r2, [pc, #240]	; (8000fc8 <make_tcphead+0x148>)
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	701a      	strb	r2, [r3, #0]
        i=4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	73fb      	strb	r3, [r7, #15]
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 8000ee0:	e02b      	b.n	8000f3a <make_tcphead+0xba>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3325      	adds	r3, #37	; 0x25
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	807b      	strh	r3, [r7, #2]
                tseq=buf[TCP_SEQACK_H_P+i-1];
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	3329      	adds	r3, #41	; 0x29
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	73bb      	strb	r3, [r7, #14]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	3329      	adds	r3, #41	; 0x29
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]
                if (cp_seq){
 8000f0e:	783b      	ldrb	r3, [r7, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <make_tcphead+0xa2>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	3325      	adds	r3, #37	; 0x25
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	7bba      	ldrb	r2, [r7, #14]
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e005      	b.n	8000f2e <make_tcphead+0xae>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3325      	adds	r3, #37	; 0x25
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
                }
                rel_ack_num=rel_ack_num>>8;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	807b      	strh	r3, [r7, #2]
                i--;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
        while(i>0){
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1d0      	bne.n	8000ee2 <make_tcphead+0x62>
        }
        if (cp_seq==0){
 8000f40:	783b      	ldrb	r3, [r7, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <make_tcphead+0xf4>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3326      	adds	r3, #38	; 0x26
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
                buf[TCP_SEQ_H_P+1]= 0;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3327      	adds	r3, #39	; 0x27
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
                // we step only the second byte, this allows us to send packts
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3328      	adds	r3, #40	; 0x28
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <make_tcphead+0x14c>)
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	701a      	strb	r2, [r3, #0]
                buf[TCP_SEQ_H_P+3]= 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3329      	adds	r3, #41	; 0x29
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <make_tcphead+0x14c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <make_tcphead+0x14c>)
 8000f72:	701a      	strb	r2, [r3, #0]
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3332      	adds	r3, #50	; 0x32
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3333      	adds	r3, #51	; 0x33
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
 8000f84:	787b      	ldrb	r3, [r7, #1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d014      	beq.n	8000fb4 <make_tcphead+0x134>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3336      	adds	r3, #54	; 0x36
 8000f8e:	2202      	movs	r2, #2
 8000f90:	701a      	strb	r2, [r3, #0]
                buf[TCP_OPTIONS_P+1]=4;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3337      	adds	r3, #55	; 0x37
 8000f96:	2204      	movs	r2, #4
 8000f98:	701a      	strb	r2, [r3, #0]
                buf[TCP_OPTIONS_P+2]=0x05;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3338      	adds	r3, #56	; 0x38
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	701a      	strb	r2, [r3, #0]
                buf[TCP_OPTIONS_P+3]=0x80;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3339      	adds	r3, #57	; 0x39
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	701a      	strb	r2, [r3, #0]
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	332e      	adds	r3, #46	; 0x2e
 8000fae:	2260      	movs	r2, #96	; 0x60
 8000fb0:	701a      	strb	r2, [r3, #0]
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
        }
}
 8000fb2:	e003      	b.n	8000fbc <make_tcphead+0x13c>
                buf[TCP_HEADER_LEN_P]=0x50;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	332e      	adds	r3, #46	; 0x2e
 8000fb8:	2250      	movs	r2, #80	; 0x50
 8000fba:	701a      	strb	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000001 	.word	0x20000001

08000fd0 <make_arp_answer_from_request>:




void make_arp_answer_from_request(uint8_t *buf)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
        //
        make_eth(buf);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff fec7 	bl	8000d70 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3314      	adds	r3, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3315      	adds	r3, #21
 8000fee:	2202      	movs	r2, #2
 8000ff0:	701a      	strb	r2, [r3, #0]
        // fill the mac addresses:
        while(i<6){
 8000ff2:	e017      	b.n	8001024 <make_arp_answer_from_request+0x54>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3316      	adds	r3, #22
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	441a      	add	r2, r3
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3320      	adds	r3, #32
 8001002:	4619      	mov	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	440b      	add	r3, r1
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3316      	adds	r3, #22
 8001012:	4619      	mov	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	440b      	add	r3, r1
 8001018:	4917      	ldr	r1, [pc, #92]	; (8001078 <make_arp_answer_from_request+0xa8>)
 800101a:	5c8a      	ldrb	r2, [r1, r2]
 800101c:	701a      	strb	r2, [r3, #0]
                i++;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	3301      	adds	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d9e4      	bls.n	8000ff4 <make_arp_answer_from_request+0x24>
        }
        i=0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 800102e:	e017      	b.n	8001060 <make_arp_answer_from_request+0x90>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	331c      	adds	r3, #28
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	441a      	add	r2, r3
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3326      	adds	r3, #38	; 0x26
 800103e:	4619      	mov	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	440b      	add	r3, r1
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	331c      	adds	r3, #28
 800104e:	4619      	mov	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	440b      	add	r3, r1
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <make_arp_answer_from_request+0xac>)
 8001056:	5c8a      	ldrb	r2, [r1, r2]
 8001058:	701a      	strb	r2, [r3, #0]
                i++;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3301      	adds	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d9e4      	bls.n	8001030 <make_arp_answer_from_request+0x60>
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf);
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	202a      	movs	r0, #42	; 0x2a
 800106a:	f7ff fcb7 	bl	80009dc <enc28j60PacketSend>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000ac 	.word	0x200000ac
 800107c:	200000b4 	.word	0x200000b4

08001080 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
        make_eth(buf);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fe6f 	bl	8000d70 <make_eth>
        make_ip(buf);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fec8 	bl	8000e28 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3322      	adds	r3, #34	; 0x22
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3324      	adds	r3, #36	; 0x24
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2bf7      	cmp	r3, #247	; 0xf7
 80010a8:	d905      	bls.n	80010b6 <make_echo_reply_from_request+0x36>
                buf[ICMP_CHECKSUM_P+1]++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3325      	adds	r3, #37	; 0x25
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	3201      	adds	r2, #1
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3324      	adds	r3, #36	; 0x24
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3324      	adds	r3, #36	; 0x24
 80010c0:	3208      	adds	r2, #8
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]
        //
        enc28j60PacketSend(len,buf);
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fc86 	bl	80009dc <enc28j60PacketSend>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <make_tcp_synack_from_syn>:
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

void make_tcp_synack_from_syn(uint8_t *buf)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        make_eth(buf);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fe45 	bl	8000d70 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3310      	adds	r3, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3311      	adds	r3, #17
 80010f2:	222c      	movs	r2, #44	; 0x2c
 80010f4:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fe96 	bl	8000e28 <make_ip>
        buf[TCP_FLAG_P]=TCP_FLAGS_SYNACK_V;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	332f      	adds	r3, #47	; 0x2f
 8001100:	2212      	movs	r2, #18
 8001102:	701a      	strb	r2, [r3, #0]
        make_tcphead(buf,1,1,0);
 8001104:	2300      	movs	r3, #0
 8001106:	2201      	movs	r2, #1
 8001108:	2101      	movs	r1, #1
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff feb8 	bl	8000e80 <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	331a      	adds	r3, #26
 8001114:	2202      	movs	r2, #2
 8001116:	2120      	movs	r1, #32
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fd2b 	bl	8000b74 <checksum>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3332      	adds	r3, #50	; 0x32
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3333      	adds	r3, #51	; 0x33
 8001134:	89fa      	ldrh	r2, [r7, #14]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	203a      	movs	r0, #58	; 0x3a
 800113e:	f7ff fc4d 	bl	80009dc <enc28j60PacketSend>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <get_tcp_data_pointer>:

// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
        if (info_data_len){
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <get_tcp_data_pointer+0x28>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <get_tcp_data_pointer+0x1c>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <get_tcp_data_pointer+0x2c>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	b29b      	uxth	r3, r3
 8001162:	3322      	adds	r3, #34	; 0x22
 8001164:	b29b      	uxth	r3, r3
 8001166:	e000      	b.n	800116a <get_tcp_data_pointer+0x1e>
        }else{
                return(0);
 8001168:	2300      	movs	r3, #0
        }
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	200000ba 	.word	0x200000ba
 8001178:	200000b8 	.word	0x200000b8

0800117c <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
        info_data_len=(buf[IP_TOTLEN_H_P]<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3310      	adds	r3, #16
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3311      	adds	r3, #17
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <init_len_info+0x80>)
 800119c:	801a      	strh	r2, [r3, #0]
        info_data_len-=IP_HEADER_LEN;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <init_len_info+0x80>)
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3b14      	subs	r3, #20
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <init_len_info+0x80>)
 80011ae:	801a      	strh	r2, [r3, #0]
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	332e      	adds	r3, #46	; 0x2e
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <init_len_info+0x84>)
 80011c4:	801a      	strh	r2, [r3, #0]
        info_data_len-=info_hdr_len;
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <init_len_info+0x80>)
 80011c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <init_len_info+0x84>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <init_len_info+0x80>)
 80011de:	801a      	strh	r2, [r3, #0]
        if (info_data_len<=0){
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <init_len_info+0x80>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dc02      	bgt.n	80011f0 <init_len_info+0x74>
                info_data_len=0;
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <init_len_info+0x80>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	801a      	strh	r2, [r3, #0]
        }
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200000ba 	.word	0x200000ba
 8001200:	200000b8 	.word	0x200000b8

08001204 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	817b      	strh	r3, [r7, #10]
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
 8001212:	e00d      	b.n	8001230 <fill_tcp_data+0x2c>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
 8001214:	897b      	ldrh	r3, [r7, #10]
 8001216:	3336      	adds	r3, #54	; 0x36
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	701a      	strb	r2, [r3, #0]
                pos++;
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	3301      	adds	r3, #1
 8001228:	817b      	strh	r3, [r7, #10]
                s++;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
        while (*s) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ed      	bne.n	8001214 <fill_tcp_data+0x10>
        }
        return(pos);
 8001238:	897b      	ldrh	r3, [r7, #10]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
        uint16_t j;
        make_eth(buf);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fd8d 	bl	8000d70 <make_eth>
        // fill the header:
        buf[TCP_FLAG_P]=TCP_FLAG_ACK_V;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	332f      	adds	r3, #47	; 0x2f
 800125a:	2210      	movs	r2, #16
 800125c:	701a      	strb	r2, [r3, #0]
        if (info_data_len==0){
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <make_tcp_ack_from_any+0x9c>)
 8001260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d106      	bne.n	8001276 <make_tcp_ack_from_any+0x2e>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	2101      	movs	r1, #1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fe06 	bl	8000e80 <make_tcphead>
 8001274:	e008      	b.n	8001288 <make_tcp_ack_from_any+0x40>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <make_tcp_ack_from_any+0x9c>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	b299      	uxth	r1, r3
 800127e:	2301      	movs	r3, #1
 8001280:	2200      	movs	r2, #0
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fdfc 	bl	8000e80 <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options)
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 8001288:	2328      	movs	r3, #40	; 0x28
 800128a:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3310      	adds	r3, #16
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3311      	adds	r3, #17
 800129e:	89fa      	ldrh	r2, [r7, #14]
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff fdbf 	bl	8000e28 <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	331a      	adds	r3, #26
 80012ae:	2202      	movs	r2, #2
 80012b0:	211c      	movs	r1, #28
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fc5e 	bl	8000b74 <checksum>
 80012b8:	4603      	mov	r3, r0
 80012ba:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3332      	adds	r3, #50	; 0x32
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3333      	adds	r3, #51	; 0x33
 80012ce:	89fa      	ldrh	r2, [r7, #14]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	2036      	movs	r0, #54	; 0x36
 80012d8:	f7ff fb80 	bl	80009dc <enc28j60PacketSend>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000ba 	.word	0x200000ba

080012e8 <make_tcp_ack_with_data_single>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data_single(uint8_t *buf,uint16_t dlen)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAG_P]=TCP_FLAG_ACK_V|TCP_FLAG_PUSH_V|TCP_FLAG_FIN_V;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	332f      	adds	r3, #47	; 0x2f
 80012f8:	2219      	movs	r2, #25
 80012fa:	701a      	strb	r2, [r3, #0]

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	3328      	adds	r3, #40	; 0x28
 8001300:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3310      	adds	r3, #16
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3311      	adds	r3, #17
 8001314:	89fa      	ldrh	r2, [r7, #14]
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
        fill_ip_hdr_checksum(buf);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fd52 	bl	8000dc4 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3332      	adds	r3, #50	; 0x32
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3333      	adds	r3, #51	; 0x33
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f103 001a 	add.w	r0, r3, #26
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	331c      	adds	r3, #28
 800133a:	b29b      	uxth	r3, r3
 800133c:	2202      	movs	r2, #2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc18 	bl	8000b74 <checksum>
 8001344:	4603      	mov	r3, r0
 8001346:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3332      	adds	r3, #50	; 0x32
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3333      	adds	r3, #51	; 0x33
 800135a:	89fa      	ldrh	r2, [r7, #14]
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	3336      	adds	r3, #54	; 0x36
 8001364:	b29b      	uxth	r3, r3
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fb37 	bl	80009dc <enc28j60PacketSend>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f001 fa21 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f85d 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 fa39 	bl	80017fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800138a:	f000 f949 	bl	8001620 <MX_TIM2_Init>
  MX_ADC1_Init();
 800138e:	f000 f8bf 	bl	8001510 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001392:	f000 fa09 	bl	80017a8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001396:	f000 f90d 	bl	80015b4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800139a:	f000 f9b7 	bl	800170c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800139e:	481d      	ldr	r0, [pc, #116]	; (8001414 <main+0x9c>)
 80013a0:	f003 fc58 	bl	8004c54 <HAL_TIM_Base_Start>
  setup_server(mac, ip, port);
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <main+0xa0>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	491c      	ldr	r1, [pc, #112]	; (800141c <main+0xa4>)
 80013ac:	481c      	ldr	r0, [pc, #112]	; (8001420 <main+0xa8>)
 80013ae:	f001 f875 	bl	800249c <setup_server>
//  fclose(fp);
//  fp = fopen("/rediect.html", "r");
//  fread(redi, sizeof(char), 500,fp);
//  fclose(fp);

  redirect();
 80013b2:	f000 fd07 	bl	8001dc4 <redirect>
  frottemp();
 80013b6:	f000 fbcb 	bl	8001b50 <frottemp>
  backtemp();
 80013ba:	f000 fccf 	bl	8001d5c <backtemp>

  xSemaphore = xSemaphoreCreateBinary();
 80013be:	2203      	movs	r2, #3
 80013c0:	2100      	movs	r1, #0
 80013c2:	2001      	movs	r0, #1
 80013c4:	f005 f8a0 	bl	8006508 <xQueueGenericCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <main+0xac>)
 80013cc:	6013      	str	r3, [r2, #0]

  memset(&writeValue,0,sizeof(writeValue));
 80013ce:	223c      	movs	r2, #60	; 0x3c
 80013d0:	2100      	movs	r1, #0
 80013d2:	4815      	ldr	r0, [pc, #84]	; (8001428 <main+0xb0>)
 80013d4:	f007 fd38 	bl	8008e48 <memset>
//  ENC28_Init();
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80013d8:	2100      	movs	r1, #0
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <main+0xb4>)
 80013dc:	f003 fd6c 	bl	8004eb8 <HAL_TIM_PWM_Start>
//  xTaskCreate(servo_Motor,"servoMotor",1000,NULL,1,NULL);
  xTaskCreate(vHandlerTask,"Handler_Task",1000,NULL,1,NULL);
 80013e0:	2300      	movs	r3, #0
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ee:	4910      	ldr	r1, [pc, #64]	; (8001430 <main+0xb8>)
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <main+0xbc>)
 80013f2:	f005 fe25 	bl	8007040 <xTaskCreate>
  xTaskCreate(server,"WebServer",3000,NULL,2,NULL);
 80013f6:	2300      	movs	r3, #0
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2302      	movs	r3, #2
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <main+0xc0>)
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <main+0xc4>)
 8001408:	f005 fe1a 	bl	8007040 <xTaskCreate>
  vTaskStartScheduler();
 800140c:	f005 ff5e 	bl	80072cc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001410:	e7fe      	b.n	8001410 <main+0x98>
 8001412:	bf00      	nop
 8001414:	20013844 	.word	0x20013844
 8001418:	20000010 	.word	0x20000010
 800141c:	2000000c 	.word	0x2000000c
 8001420:	20000004 	.word	0x20000004
 8001424:	20013840 	.word	0x20013840
 8001428:	20013800 	.word	0x20013800
 800142c:	20013b80 	.word	0x20013b80
 8001430:	080096d4 	.word	0x080096d4
 8001434:	08001905 	.word	0x08001905
 8001438:	080096e4 	.word	0x080096e4
 800143c:	08001a31 	.word	0x08001a31

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f007 fcfa 	bl	8008e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <SystemClock_Config+0xc8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <SystemClock_Config+0xc8>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <SystemClock_Config+0xc8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <SystemClock_Config+0xcc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a20      	ldr	r2, [pc, #128]	; (800150c <SystemClock_Config+0xcc>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <SystemClock_Config+0xcc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80014b4:	2390      	movs	r3, #144	; 0x90
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 f927 	bl	8003718 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 fd90 	bl	8001ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2102      	movs	r1, #2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fb89 	bl	8003c08 <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014fc:	f000 fd7a 	bl	8001ff4 <Error_Handler>
  }
}
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	; 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <MX_ADC1_Init+0x9c>)
 8001526:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_ADC1_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_ADC1_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_ADC1_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <MX_ADC1_Init+0xa0>)
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_ADC1_Init+0x98>)
 800155c:	2201      	movs	r2, #1
 800155e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_ADC1_Init+0x98>)
 800156a:	2201      	movs	r2, #1
 800156c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800156e:	480e      	ldr	r0, [pc, #56]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001570:	f001 f98e 	bl	8002890 <HAL_ADC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 fd3b 	bl	8001ff4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800157e:	2301      	movs	r3, #1
 8001580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_ADC1_Init+0x98>)
 8001590:	f001 fc02 	bl	8002d98 <HAL_ADC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800159a:	f000 fd2b 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20013a84 	.word	0x20013a84
 80015ac:	40012000 	.word	0x40012000
 80015b0:	0f000001 	.word	0x0f000001

080015b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <MX_SPI1_Init+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x64>)
 80015e8:	2208      	movs	r2, #8
 80015ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x64>)
 8001600:	220a      	movs	r2, #10
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_SPI1_Init+0x64>)
 8001606:	f002 fd2d 	bl	8004064 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001610:	f000 fcf0 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20013b28 	.word	0x20013b28
 800161c:	40013000 	.word	0x40013000

08001620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <MX_TIM2_Init+0xe8>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <MX_TIM2_Init+0xe8>)
 800165a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800165e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <MX_TIM2_Init+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <MX_TIM2_Init+0xe8>)
 8001668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800166c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_TIM2_Init+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <MX_TIM2_Init+0xe8>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167a:	4823      	ldr	r0, [pc, #140]	; (8001708 <MX_TIM2_Init+0xe8>)
 800167c:	f003 fa9a 	bl	8004bb4 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001686:	f000 fcb5 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001694:	4619      	mov	r1, r3
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_TIM2_Init+0xe8>)
 8001698:	f003 fe9c 	bl	80053d4 <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80016a2:	f000 fca7 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <MX_TIM2_Init+0xe8>)
 80016a8:	f003 fbac 	bl	8004e04 <HAL_TIM_PWM_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80016b2:	f000 fc9f 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	4619      	mov	r1, r3
 80016c4:	4810      	ldr	r0, [pc, #64]	; (8001708 <MX_TIM2_Init+0xe8>)
 80016c6:	f004 fa81 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016d0:	f000 fc90 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	2360      	movs	r3, #96	; 0x60
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4807      	ldr	r0, [pc, #28]	; (8001708 <MX_TIM2_Init+0xe8>)
 80016ec:	f003 fdb4 	bl	8005258 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80016f6:	f000 fc7d 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <MX_TIM2_Init+0xe8>)
 80016fc:	f000 fd78 	bl	80021f0 <HAL_TIM_MspPostInit>

}
 8001700:	bf00      	nop
 8001702:	3738      	adds	r7, #56	; 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20013b80 	.word	0x20013b80

0800170c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM3_Init+0x94>)
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <MX_TIM3_Init+0x98>)
 800172c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001730:	2247      	movs	r2, #71	; 0x47
 8001732:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM3_Init+0x94>)
 800173c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001740:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM3_Init+0x94>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800174e:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001750:	f003 fa30 	bl	8004bb4 <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800175a:	f000 fc4b 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM3_Init+0x94>)
 800176c:	f003 fe32 	bl	80053d4 <HAL_TIM_ConfigClockSource>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001776:	f000 fc3d 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM3_Init+0x94>)
 8001788:	f004 fa20 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001792:	f000 fc2f 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20013844 	.word	0x20013844
 80017a4:	40000400 	.word	0x40000400

080017a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <MX_USART3_UART_Init+0x50>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017e0:	f004 fa84 	bl	8005cec <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017ea:	f000 fc03 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200137bc 	.word	0x200137bc
 80017f8:	40004800 	.word	0x40004800

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <MX_GPIO_Init+0xfc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <MX_GPIO_Init+0xfc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_GPIO_Init+0xfc>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <MX_GPIO_Init+0xfc>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_GPIO_Init+0xfc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2110      	movs	r1, #16
 80018a2:	4816      	ldr	r0, [pc, #88]	; (80018fc <MX_GPIO_Init+0x100>)
 80018a4:	f001 ff1e 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f241 0181 	movw	r1, #4225	; 0x1081
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_GPIO_Init+0x104>)
 80018b0:	f001 ff18 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018b4:	2310      	movs	r3, #16
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_GPIO_Init+0x100>)
 80018cc:	f001 fd6e 	bl	80033ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_7;
 80018d0:	f241 0381 	movw	r3, #4225	; 0x1081
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_GPIO_Init+0x104>)
 80018ea:	f001 fd5f 	bl	80033ac <HAL_GPIO_Init>

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020c00 	.word	0x40020c00

08001904 <vHandlerTask>:
	  TIM2->CCR1 = 60;
	  HAL_Delay(2000);
	}
}

void vHandlerTask(void *parameters){
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
//void water_height(void){
	for(;;){
	  char show[80];

	  sprintf(show, "Water is detected! The level : %d  The flag = %d \n\r", waterlevel, flag);
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <vHandlerTask+0x74>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <vHandlerTask+0x78>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f107 0008 	add.w	r0, r7, #8
 8001918:	4919      	ldr	r1, [pc, #100]	; (8001980 <vHandlerTask+0x7c>)
 800191a:	f007 fa9d 	bl	8008e58 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)show, strlen(show) ,0xffff);
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc5e 	bl	80001e4 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	f107 0108 	add.w	r1, r7, #8
 8001930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001934:	4813      	ldr	r0, [pc, #76]	; (8001984 <vHandlerTask+0x80>)
 8001936:	f004 fa26 	bl	8005d86 <HAL_UART_Transmit>
	  if(flag == 1){
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <vHandlerTask+0x78>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <vHandlerTask+0x4a>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2101      	movs	r1, #1
 8001946:	4810      	ldr	r0, [pc, #64]	; (8001988 <vHandlerTask+0x84>)
 8001948:	f001 fecc 	bl	80036e4 <HAL_GPIO_WritePin>
 800194c:	e008      	b.n	8001960 <vHandlerTask+0x5c>

	  }
	  else if(flag == 2){
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <vHandlerTask+0x78>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d104      	bne.n	8001960 <vHandlerTask+0x5c>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	480b      	ldr	r0, [pc, #44]	; (8001988 <vHandlerTask+0x84>)
 800195c:	f001 fec2 	bl	80036e4 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 8001960:	2064      	movs	r0, #100	; 0x64
 8001962:	f000 ff71 	bl	8002848 <HAL_Delay>

	  xSemaphoreGive(xSemaphore);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <vHandlerTask+0x88>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	f004 fe4c 	bl	800660c <xQueueGenericSend>
	for(;;){
 8001974:	e7ca      	b.n	800190c <vHandlerTask+0x8>
 8001976:	bf00      	nop
 8001978:	20013ad0 	.word	0x20013ad0
 800197c:	200000bc 	.word	0x200000bc
 8001980:	080096f0 	.word	0x080096f0
 8001984:	200137bc 	.word	0x200137bc
 8001988:	40020c00 	.word	0x40020c00
 800198c:	20013840 	.word	0x20013840

08001990 <HAL_ADC_ConvCpltCallback>:
//	  HAL_ADC_Start_IT(&hadc1);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
//	BaseType_t xHigherPriorityTaskWoken;
//	xHigherPriorityTaskWoken = pdFALSE;
	adc_value = HAL_ADC_GetValue(hadc);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f001 f9dc 	bl	8002d56 <HAL_ADC_GetValue>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x90>)
 80019a4:	801a      	strh	r2, [r3, #0]

	waterlevel = adc_value*40/3000;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x90>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x94>)
 80019ac:	fb82 1203 	smull	r1, r2, r2, r3
 80019b0:	10d2      	asrs	r2, r2, #3
 80019b2:	17db      	asrs	r3, r3, #31
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019b8:	6013      	str	r3, [r2, #0]
	if(waterlevel<18)
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b11      	cmp	r3, #17
 80019c0:	dc03      	bgt.n	80019ca <HAL_ADC_ConvCpltCallback+0x3a>
	{
		waterlevel = 30;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019c4:	221e      	movs	r2, #30
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e00a      	b.n	80019e0 <HAL_ADC_ConvCpltCallback+0x50>
	}
	else if(waterlevel < 30 && waterlevel >= 18){
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b1d      	cmp	r3, #29
 80019d0:	dc06      	bgt.n	80019e0 <HAL_ADC_ConvCpltCallback+0x50>
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	dd02      	ble.n	80019e0 <HAL_ADC_ConvCpltCallback+0x50>
		waterlevel = 31;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019dc:	221f      	movs	r2, #31
 80019de:	601a      	str	r2, [r3, #0]
	}

	waterlevel = waterlevel-30;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3b1e      	subs	r3, #30
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x98>)
 80019e8:	6013      	str	r3, [r2, #0]

	if( adc_value < 2200 && adc_value >10){
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x90>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	f640 0297 	movw	r2, #2199	; 0x897
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d807      	bhi.n	8001a06 <HAL_ADC_ConvCpltCallback+0x76>
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x90>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	d903      	bls.n	8001a06 <HAL_ADC_ConvCpltCallback+0x76>
		flag = 1;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
	else if(adc_value > 2700){
		flag = 2;
	}
//	xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
//	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
 8001a04:	e008      	b.n	8001a18 <HAL_ADC_ConvCpltCallback+0x88>
	else if(adc_value > 2700){
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x90>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d902      	bls.n	8001a18 <HAL_ADC_ConvCpltCallback+0x88>
		flag = 2;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a14:	2202      	movs	r2, #2
 8001a16:	701a      	strb	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20013a80 	.word	0x20013a80
 8001a24:	1b4e81b5 	.word	0x1b4e81b5
 8001a28:	20013ad0 	.word	0x20013ad0
 8001a2c:	200000bc 	.word	0x200000bc

08001a30 <server>:
int adc=0;
void server(void *parameters){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

	for(;;){
		adc += 1;
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <server+0xe8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a36      	ldr	r2, [pc, #216]	; (8001b18 <server+0xe8>)
 8001a40:	6013      	str	r3, [r2, #0]
//

		if(xSemaphoreTake(xSemaphore, portMAX_DELAY)){
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <server+0xec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 f866 	bl	8006b1c <xQueueSemaphoreTake>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <server+0x8>

			request = serviceRequest();
 8001a56:	f000 fd6f 	bl	8002538 <serviceRequest>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <server+0xf0>)
 8001a5e:	6013      	str	r3, [r2, #0]
			if(request != NULL){
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <server+0xf0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d053      	beq.n	8001b10 <server+0xe0>
				if(strcmp(request,"?control=spray")==0){
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <server+0xf0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <server+0xf4>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbae 	bl	80001d0 <strcmp>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11b      	bne.n	8001ab2 <server+0x82>

					TIM2->CCR1 = 35;
 8001a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7e:	2223      	movs	r2, #35	; 0x23
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(1000);
 8001a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a86:	f000 fedf 	bl	8002848 <HAL_Delay>
					TIM2->CCR1 = 55;
 8001a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a8e:	2237      	movs	r2, #55	; 0x37
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(1000);
 8001a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a96:	f000 fed7 	bl	8002848 <HAL_Delay>

					TIM2->CCR1 = 35;
 8001a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9e:	2223      	movs	r2, #35	; 0x23
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa6:	f000 fecf 	bl	8002848 <HAL_Delay>

					print_text(redi);
 8001aaa:	481f      	ldr	r0, [pc, #124]	; (8001b28 <server+0xf8>)
 8001aac:	f000 fe22 	bl	80026f4 <print_text>
 8001ab0:	e01d      	b.n	8001aee <server+0xbe>
				}
				else if(strcmp(request,"?control=add")==0){
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <server+0xf0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	491d      	ldr	r1, [pc, #116]	; (8001b2c <server+0xfc>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fb89 	bl	80001d0 <strcmp>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <server+0xb8>

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4819      	ldr	r0, [pc, #100]	; (8001b30 <server+0x100>)
 8001aca:	f001 fe0b 	bl	80036e4 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8001ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad2:	f000 feb9 	bl	8002848 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4815      	ldr	r0, [pc, #84]	; (8001b30 <server+0x100>)
 8001adc:	f001 fe02 	bl	80036e4 <HAL_GPIO_WritePin>

					print_text(redi);
 8001ae0:	4811      	ldr	r0, [pc, #68]	; (8001b28 <server+0xf8>)
 8001ae2:	f000 fe07 	bl	80026f4 <print_text>
 8001ae6:	e002      	b.n	8001aee <server+0xbe>

				}
				else{
					print_text(front);
 8001ae8:	4812      	ldr	r0, [pc, #72]	; (8001b34 <server+0x104>)
 8001aea:	f000 fe03 	bl	80026f4 <print_text>
				}

//				sprintf(data,"<p>Water is detected! The level : %d ,  the flag = %d</p>", adc_value, flag);
				sprintf(data,"<p>The water level : %d ,  the flag = %d</p>", waterlevel, flag);
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <server+0x108>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <server+0x10c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4912      	ldr	r1, [pc, #72]	; (8001b40 <server+0x110>)
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <server+0x114>)
 8001afa:	f007 f9ad 	bl	8008e58 <siprintf>
				print_text(data);
 8001afe:	4811      	ldr	r0, [pc, #68]	; (8001b44 <server+0x114>)
 8001b00:	f000 fdf8 	bl	80026f4 <print_text>
				print_text(back);
 8001b04:	4810      	ldr	r0, [pc, #64]	; (8001b48 <server+0x118>)
 8001b06:	f000 fdf5 	bl	80026f4 <print_text>

				respond_single();
 8001b0a:	f000 fe1d 	bl	8002748 <respond_single>
 8001b0e:	e793      	b.n	8001a38 <server+0x8>

//				HAL_UART_Transmit(&huart3, (uint8_t *)request, strlen(request) ,0xffff);
			}
			else{
				HAL_ADC_Start_IT(&hadc1);
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <server+0x11c>)
 8001b12:	f000 ff01 	bl	8002918 <HAL_ADC_Start_IT>
		adc += 1;
 8001b16:	e78f      	b.n	8001a38 <server+0x8>
 8001b18:	200000c0 	.word	0x200000c0
 8001b1c:	20013840 	.word	0x20013840
 8001b20:	20013ad4 	.word	0x20013ad4
 8001b24:	08009724 	.word	0x08009724
 8001b28:	200135c8 	.word	0x200135c8
 8001b2c:	08009734 	.word	0x08009734
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	2001388c 	.word	0x2001388c
 8001b38:	20013ad0 	.word	0x20013ad0
 8001b3c:	200000bc 	.word	0x200000bc
 8001b40:	08009744 	.word	0x08009744
 8001b44:	20013ad8 	.word	0x20013ad8
 8001b48:	2001349c 	.word	0x2001349c
 8001b4c:	20013a84 	.word	0x20013a84

08001b50 <frottemp>:
			}

		}
	}
}
void frottemp(){
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    // frontHTML template
	strcat(front,"<!DOCTYPE html>");
 8001b54:	4873      	ldr	r0, [pc, #460]	; (8001d24 <frottemp+0x1d4>)
 8001b56:	f7fe fb45 	bl	80001e4 <strlen>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <frottemp+0x1d4>)
 8001b60:	4413      	add	r3, r2
 8001b62:	4a71      	ldr	r2, [pc, #452]	; (8001d28 <frottemp+0x1d8>)
 8001b64:	461c      	mov	r4, r3
 8001b66:	4615      	mov	r5, r2
 8001b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6a:	6020      	str	r0, [r4, #0]
 8001b6c:	6061      	str	r1, [r4, #4]
 8001b6e:	60a2      	str	r2, [r4, #8]
 8001b70:	60e3      	str	r3, [r4, #12]
	strcat(front,"<html lang=\"en\">");
 8001b72:	486c      	ldr	r0, [pc, #432]	; (8001d24 <frottemp+0x1d4>)
 8001b74:	f7fe fb36 	bl	80001e4 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <frottemp+0x1d4>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a6a      	ldr	r2, [pc, #424]	; (8001d2c <frottemp+0x1dc>)
 8001b82:	461d      	mov	r5, r3
 8001b84:	4614      	mov	r4, r2
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	6028      	str	r0, [r5, #0]
 8001b8a:	6069      	str	r1, [r5, #4]
 8001b8c:	60aa      	str	r2, [r5, #8]
 8001b8e:	60eb      	str	r3, [r5, #12]
 8001b90:	7823      	ldrb	r3, [r4, #0]
 8001b92:	742b      	strb	r3, [r5, #16]
	strcat(front,"<head>");
 8001b94:	4863      	ldr	r0, [pc, #396]	; (8001d24 <frottemp+0x1d4>)
 8001b96:	f7fe fb25 	bl	80001e4 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <frottemp+0x1d4>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a63      	ldr	r2, [pc, #396]	; (8001d30 <frottemp+0x1e0>)
 8001ba4:	6810      	ldr	r0, [r2, #0]
 8001ba6:	6018      	str	r0, [r3, #0]
 8001ba8:	8891      	ldrh	r1, [r2, #4]
 8001baa:	7992      	ldrb	r2, [r2, #6]
 8001bac:	8099      	strh	r1, [r3, #4]
 8001bae:	719a      	strb	r2, [r3, #6]
	strcat(front,"<meta charset=\"UTF-8\">");
 8001bb0:	485c      	ldr	r0, [pc, #368]	; (8001d24 <frottemp+0x1d4>)
 8001bb2:	f7fe fb17 	bl	80001e4 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <frottemp+0x1d4>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <frottemp+0x1e4>)
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	4615      	mov	r5, r2
 8001bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc6:	6020      	str	r0, [r4, #0]
 8001bc8:	6061      	str	r1, [r4, #4]
 8001bca:	60a2      	str	r2, [r4, #8]
 8001bcc:	60e3      	str	r3, [r4, #12]
 8001bce:	6828      	ldr	r0, [r5, #0]
 8001bd0:	6120      	str	r0, [r4, #16]
 8001bd2:	88ab      	ldrh	r3, [r5, #4]
 8001bd4:	79aa      	ldrb	r2, [r5, #6]
 8001bd6:	82a3      	strh	r3, [r4, #20]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	75a3      	strb	r3, [r4, #22]
	strcat(front,"<meta http-equiv=\"refresh\" content=\"10; url= http://192.168.0.116\">");
 8001bdc:	4851      	ldr	r0, [pc, #324]	; (8001d24 <frottemp+0x1d4>)
 8001bde:	f7fe fb01 	bl	80001e4 <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <frottemp+0x1d4>)
 8001be8:	4413      	add	r3, r2
 8001bea:	4a53      	ldr	r2, [pc, #332]	; (8001d38 <frottemp+0x1e8>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	4611      	mov	r1, r2
 8001bf0:	2344      	movs	r3, #68	; 0x44
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f007 f91a 	bl	8008e2c <memcpy>
//	strcat(front,"<meta http-equiv=\"refresh\" content=\"10\">");
	strcat(front,"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
 8001bf8:	484a      	ldr	r0, [pc, #296]	; (8001d24 <frottemp+0x1d4>)
 8001bfa:	f7fe faf3 	bl	80001e4 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <frottemp+0x1d4>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4a4d      	ldr	r2, [pc, #308]	; (8001d3c <frottemp+0x1ec>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	2347      	movs	r3, #71	; 0x47
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f007 f90c 	bl	8008e2c <memcpy>
	strcat(front,"<title>Auto Irrigation System</title>");
 8001c14:	4843      	ldr	r0, [pc, #268]	; (8001d24 <frottemp+0x1d4>)
 8001c16:	f7fe fae5 	bl	80001e4 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <frottemp+0x1d4>)
 8001c20:	4413      	add	r3, r2
 8001c22:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <frottemp+0x1f0>)
 8001c24:	4614      	mov	r4, r2
 8001c26:	469c      	mov	ip, r3
 8001c28:	f104 0e20 	add.w	lr, r4, #32
 8001c2c:	4665      	mov	r5, ip
 8001c2e:	4626      	mov	r6, r4
 8001c30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c32:	6028      	str	r0, [r5, #0]
 8001c34:	6069      	str	r1, [r5, #4]
 8001c36:	60aa      	str	r2, [r5, #8]
 8001c38:	60eb      	str	r3, [r5, #12]
 8001c3a:	3410      	adds	r4, #16
 8001c3c:	f10c 0c10 	add.w	ip, ip, #16
 8001c40:	4574      	cmp	r4, lr
 8001c42:	d1f3      	bne.n	8001c2c <frottemp+0xdc>
 8001c44:	4663      	mov	r3, ip
 8001c46:	4622      	mov	r2, r4
 8001c48:	6810      	ldr	r0, [r2, #0]
 8001c4a:	6018      	str	r0, [r3, #0]
 8001c4c:	8892      	ldrh	r2, [r2, #4]
 8001c4e:	809a      	strh	r2, [r3, #4]
	strcat(front,"</head>");
 8001c50:	4834      	ldr	r0, [pc, #208]	; (8001d24 <frottemp+0x1d4>)
 8001c52:	f7fe fac7 	bl	80001e4 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <frottemp+0x1d4>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4939      	ldr	r1, [pc, #228]	; (8001d44 <frottemp+0x1f4>)
 8001c60:	461a      	mov	r2, r3
 8001c62:	460b      	mov	r3, r1
 8001c64:	cb03      	ldmia	r3!, {r0, r1}
 8001c66:	6010      	str	r0, [r2, #0]
 8001c68:	6051      	str	r1, [r2, #4]
	strcat(front,"<body>");
 8001c6a:	482e      	ldr	r0, [pc, #184]	; (8001d24 <frottemp+0x1d4>)
 8001c6c:	f7fe faba 	bl	80001e4 <strlen>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <frottemp+0x1d4>)
 8001c76:	4413      	add	r3, r2
 8001c78:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <frottemp+0x1f8>)
 8001c7a:	6810      	ldr	r0, [r2, #0]
 8001c7c:	6018      	str	r0, [r3, #0]
 8001c7e:	8891      	ldrh	r1, [r2, #4]
 8001c80:	7992      	ldrb	r2, [r2, #6]
 8001c82:	8099      	strh	r1, [r3, #4]
 8001c84:	719a      	strb	r2, [r3, #6]
	strcat(front,"<h1>Auto Irrigation System</h1>");
 8001c86:	4827      	ldr	r0, [pc, #156]	; (8001d24 <frottemp+0x1d4>)
 8001c88:	f7fe faac 	bl	80001e4 <strlen>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <frottemp+0x1d4>)
 8001c92:	4413      	add	r3, r2
 8001c94:	4a2d      	ldr	r2, [pc, #180]	; (8001d4c <frottemp+0x1fc>)
 8001c96:	461c      	mov	r4, r3
 8001c98:	4615      	mov	r5, r2
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	6020      	str	r0, [r4, #0]
 8001c9e:	6061      	str	r1, [r4, #4]
 8001ca0:	60a2      	str	r2, [r4, #8]
 8001ca2:	60e3      	str	r3, [r4, #12]
 8001ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca6:	6120      	str	r0, [r4, #16]
 8001ca8:	6161      	str	r1, [r4, #20]
 8001caa:	61a2      	str	r2, [r4, #24]
 8001cac:	61e3      	str	r3, [r4, #28]

    strcat(front,"<form action=\"http://192.168.0.116\" method=\"GET\">");
 8001cae:	481d      	ldr	r0, [pc, #116]	; (8001d24 <frottemp+0x1d4>)
 8001cb0:	f7fe fa98 	bl	80001e4 <strlen>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <frottemp+0x1d4>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <frottemp+0x200>)
 8001cbe:	4614      	mov	r4, r2
 8001cc0:	469c      	mov	ip, r3
 8001cc2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001cc6:	4665      	mov	r5, ip
 8001cc8:	4626      	mov	r6, r4
 8001cca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ccc:	6028      	str	r0, [r5, #0]
 8001cce:	6069      	str	r1, [r5, #4]
 8001cd0:	60aa      	str	r2, [r5, #8]
 8001cd2:	60eb      	str	r3, [r5, #12]
 8001cd4:	3410      	adds	r4, #16
 8001cd6:	f10c 0c10 	add.w	ip, ip, #16
 8001cda:	4574      	cmp	r4, lr
 8001cdc:	d1f3      	bne.n	8001cc6 <frottemp+0x176>
 8001cde:	4662      	mov	r2, ip
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	8013      	strh	r3, [r2, #0]
	strcat(front,"<button name = \"control\" type = \"submit\" value = \"add\">add water</button>");
 8001ce6:	480f      	ldr	r0, [pc, #60]	; (8001d24 <frottemp+0x1d4>)
 8001ce8:	f7fe fa7c 	bl	80001e4 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <frottemp+0x1d4>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <frottemp+0x204>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	234a      	movs	r3, #74	; 0x4a
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f007 f895 	bl	8008e2c <memcpy>
	strcat(front,"<button name = \"control\" type = \"submit\" value = \"spray\">spray water</button>");
 8001d02:	4808      	ldr	r0, [pc, #32]	; (8001d24 <frottemp+0x1d4>)
 8001d04:	f7fe fa6e 	bl	80001e4 <strlen>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <frottemp+0x1d4>)
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <frottemp+0x208>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	4611      	mov	r1, r2
 8001d16:	234e      	movs	r3, #78	; 0x4e
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f007 f887 	bl	8008e2c <memcpy>
}
 8001d1e:	bf00      	nop
 8001d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2001388c 	.word	0x2001388c
 8001d28:	08009774 	.word	0x08009774
 8001d2c:	08009784 	.word	0x08009784
 8001d30:	08009798 	.word	0x08009798
 8001d34:	080097a0 	.word	0x080097a0
 8001d38:	080097b8 	.word	0x080097b8
 8001d3c:	080097fc 	.word	0x080097fc
 8001d40:	08009844 	.word	0x08009844
 8001d44:	0800986c 	.word	0x0800986c
 8001d48:	08009874 	.word	0x08009874
 8001d4c:	0800987c 	.word	0x0800987c
 8001d50:	0800989c 	.word	0x0800989c
 8001d54:	080098d0 	.word	0x080098d0
 8001d58:	0800991c 	.word	0x0800991c

08001d5c <backtemp>:
void backtemp(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    // back HTML template
	strcat(back,"</form>");
 8001d60:	4814      	ldr	r0, [pc, #80]	; (8001db4 <backtemp+0x58>)
 8001d62:	f7fe fa3f 	bl	80001e4 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <backtemp+0x58>)
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4912      	ldr	r1, [pc, #72]	; (8001db8 <backtemp+0x5c>)
 8001d70:	461a      	mov	r2, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	cb03      	ldmia	r3!, {r0, r1}
 8001d76:	6010      	str	r0, [r2, #0]
 8001d78:	6051      	str	r1, [r2, #4]
	strcat(back,"</body>");
 8001d7a:	480e      	ldr	r0, [pc, #56]	; (8001db4 <backtemp+0x58>)
 8001d7c:	f7fe fa32 	bl	80001e4 <strlen>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <backtemp+0x58>)
 8001d86:	4413      	add	r3, r2
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <backtemp+0x60>)
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	cb03      	ldmia	r3!, {r0, r1}
 8001d90:	6010      	str	r0, [r2, #0]
 8001d92:	6051      	str	r1, [r2, #4]
	strcat(back,"</html>");
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <backtemp+0x58>)
 8001d96:	f7fe fa25 	bl	80001e4 <strlen>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <backtemp+0x58>)
 8001da0:	4413      	add	r3, r2
 8001da2:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <backtemp+0x64>)
 8001da4:	461a      	mov	r2, r3
 8001da6:	460b      	mov	r3, r1
 8001da8:	cb03      	ldmia	r3!, {r0, r1}
 8001daa:	6010      	str	r0, [r2, #0]
 8001dac:	6051      	str	r1, [r2, #4]
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2001349c 	.word	0x2001349c
 8001db8:	0800996c 	.word	0x0800996c
 8001dbc:	08009974 	.word	0x08009974
 8001dc0:	0800997c 	.word	0x0800997c

08001dc4 <redirect>:


void redirect(void){
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	strcat(redi,"<!DOCTYPE html>");
 8001dc8:	4873      	ldr	r0, [pc, #460]	; (8001f98 <redirect+0x1d4>)
 8001dca:	f7fe fa0b 	bl	80001e4 <strlen>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b71      	ldr	r3, [pc, #452]	; (8001f98 <redirect+0x1d4>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a71      	ldr	r2, [pc, #452]	; (8001f9c <redirect+0x1d8>)
 8001dd8:	461c      	mov	r4, r3
 8001dda:	4615      	mov	r5, r2
 8001ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dde:	6020      	str	r0, [r4, #0]
 8001de0:	6061      	str	r1, [r4, #4]
 8001de2:	60a2      	str	r2, [r4, #8]
 8001de4:	60e3      	str	r3, [r4, #12]
	strcat(redi,"<html lang=\"en\">");
 8001de6:	486c      	ldr	r0, [pc, #432]	; (8001f98 <redirect+0x1d4>)
 8001de8:	f7fe f9fc 	bl	80001e4 <strlen>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <redirect+0x1d4>)
 8001df2:	4413      	add	r3, r2
 8001df4:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <redirect+0x1dc>)
 8001df6:	461d      	mov	r5, r3
 8001df8:	4614      	mov	r4, r2
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	6028      	str	r0, [r5, #0]
 8001dfe:	6069      	str	r1, [r5, #4]
 8001e00:	60aa      	str	r2, [r5, #8]
 8001e02:	60eb      	str	r3, [r5, #12]
 8001e04:	7823      	ldrb	r3, [r4, #0]
 8001e06:	742b      	strb	r3, [r5, #16]
	strcat(redi,"<head>");
 8001e08:	4863      	ldr	r0, [pc, #396]	; (8001f98 <redirect+0x1d4>)
 8001e0a:	f7fe f9eb 	bl	80001e4 <strlen>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <redirect+0x1d4>)
 8001e14:	4413      	add	r3, r2
 8001e16:	4a63      	ldr	r2, [pc, #396]	; (8001fa4 <redirect+0x1e0>)
 8001e18:	6810      	ldr	r0, [r2, #0]
 8001e1a:	6018      	str	r0, [r3, #0]
 8001e1c:	8891      	ldrh	r1, [r2, #4]
 8001e1e:	7992      	ldrb	r2, [r2, #6]
 8001e20:	8099      	strh	r1, [r3, #4]
 8001e22:	719a      	strb	r2, [r3, #6]
	strcat(redi,"<meta charset=\"UTF-8\">");
 8001e24:	485c      	ldr	r0, [pc, #368]	; (8001f98 <redirect+0x1d4>)
 8001e26:	f7fe f9dd 	bl	80001e4 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <redirect+0x1d4>)
 8001e30:	4413      	add	r3, r2
 8001e32:	4a5d      	ldr	r2, [pc, #372]	; (8001fa8 <redirect+0x1e4>)
 8001e34:	461c      	mov	r4, r3
 8001e36:	4615      	mov	r5, r2
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	6020      	str	r0, [r4, #0]
 8001e3c:	6061      	str	r1, [r4, #4]
 8001e3e:	60a2      	str	r2, [r4, #8]
 8001e40:	60e3      	str	r3, [r4, #12]
 8001e42:	6828      	ldr	r0, [r5, #0]
 8001e44:	6120      	str	r0, [r4, #16]
 8001e46:	88ab      	ldrh	r3, [r5, #4]
 8001e48:	79aa      	ldrb	r2, [r5, #6]
 8001e4a:	82a3      	strh	r3, [r4, #20]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	75a3      	strb	r3, [r4, #22]
	strcat(redi,"<meta http-equiv=\"refresh\" content=\"0; url= http://192.168.0.116\">");
 8001e50:	4851      	ldr	r0, [pc, #324]	; (8001f98 <redirect+0x1d4>)
 8001e52:	f7fe f9c7 	bl	80001e4 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <redirect+0x1d4>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a53      	ldr	r2, [pc, #332]	; (8001fac <redirect+0x1e8>)
 8001e60:	4618      	mov	r0, r3
 8001e62:	4611      	mov	r1, r2
 8001e64:	2343      	movs	r3, #67	; 0x43
 8001e66:	461a      	mov	r2, r3
 8001e68:	f006 ffe0 	bl	8008e2c <memcpy>
//	strcat(redi,"<meta http-equiv=\"refresh\" content=\"10\">");
	strcat(redi,"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
 8001e6c:	484a      	ldr	r0, [pc, #296]	; (8001f98 <redirect+0x1d4>)
 8001e6e:	f7fe f9b9 	bl	80001e4 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <redirect+0x1d4>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <redirect+0x1ec>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4611      	mov	r1, r2
 8001e80:	2347      	movs	r3, #71	; 0x47
 8001e82:	461a      	mov	r2, r3
 8001e84:	f006 ffd2 	bl	8008e2c <memcpy>
	strcat(redi,"<title>Auto Irrigation System</title>");
 8001e88:	4843      	ldr	r0, [pc, #268]	; (8001f98 <redirect+0x1d4>)
 8001e8a:	f7fe f9ab 	bl	80001e4 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <redirect+0x1d4>)
 8001e94:	4413      	add	r3, r2
 8001e96:	4a47      	ldr	r2, [pc, #284]	; (8001fb4 <redirect+0x1f0>)
 8001e98:	4614      	mov	r4, r2
 8001e9a:	469c      	mov	ip, r3
 8001e9c:	f104 0e20 	add.w	lr, r4, #32
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	4626      	mov	r6, r4
 8001ea4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ea6:	6028      	str	r0, [r5, #0]
 8001ea8:	6069      	str	r1, [r5, #4]
 8001eaa:	60aa      	str	r2, [r5, #8]
 8001eac:	60eb      	str	r3, [r5, #12]
 8001eae:	3410      	adds	r4, #16
 8001eb0:	f10c 0c10 	add.w	ip, ip, #16
 8001eb4:	4574      	cmp	r4, lr
 8001eb6:	d1f3      	bne.n	8001ea0 <redirect+0xdc>
 8001eb8:	4663      	mov	r3, ip
 8001eba:	4622      	mov	r2, r4
 8001ebc:	6810      	ldr	r0, [r2, #0]
 8001ebe:	6018      	str	r0, [r3, #0]
 8001ec0:	8892      	ldrh	r2, [r2, #4]
 8001ec2:	809a      	strh	r2, [r3, #4]
	strcat(redi,"</head>");
 8001ec4:	4834      	ldr	r0, [pc, #208]	; (8001f98 <redirect+0x1d4>)
 8001ec6:	f7fe f98d 	bl	80001e4 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <redirect+0x1d4>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4939      	ldr	r1, [pc, #228]	; (8001fb8 <redirect+0x1f4>)
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	cb03      	ldmia	r3!, {r0, r1}
 8001eda:	6010      	str	r0, [r2, #0]
 8001edc:	6051      	str	r1, [r2, #4]
	strcat(redi,"<body>");
 8001ede:	482e      	ldr	r0, [pc, #184]	; (8001f98 <redirect+0x1d4>)
 8001ee0:	f7fe f980 	bl	80001e4 <strlen>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <redirect+0x1d4>)
 8001eea:	4413      	add	r3, r2
 8001eec:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <redirect+0x1f8>)
 8001eee:	6810      	ldr	r0, [r2, #0]
 8001ef0:	6018      	str	r0, [r3, #0]
 8001ef2:	8891      	ldrh	r1, [r2, #4]
 8001ef4:	7992      	ldrb	r2, [r2, #6]
 8001ef6:	8099      	strh	r1, [r3, #4]
 8001ef8:	719a      	strb	r2, [r3, #6]
	strcat(redi,"<h1>Auto Irrigation System</h1>");
 8001efa:	4827      	ldr	r0, [pc, #156]	; (8001f98 <redirect+0x1d4>)
 8001efc:	f7fe f972 	bl	80001e4 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <redirect+0x1d4>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <redirect+0x1fc>)
 8001f0a:	461c      	mov	r4, r3
 8001f0c:	4615      	mov	r5, r2
 8001f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f10:	6020      	str	r0, [r4, #0]
 8001f12:	6061      	str	r1, [r4, #4]
 8001f14:	60a2      	str	r2, [r4, #8]
 8001f16:	60e3      	str	r3, [r4, #12]
 8001f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1a:	6120      	str	r0, [r4, #16]
 8001f1c:	6161      	str	r1, [r4, #20]
 8001f1e:	61a2      	str	r2, [r4, #24]
 8001f20:	61e3      	str	r3, [r4, #28]
	strcat(redi,"<form action=\"http://192.168.0.116\" method=\"GET\">");
 8001f22:	481d      	ldr	r0, [pc, #116]	; (8001f98 <redirect+0x1d4>)
 8001f24:	f7fe f95e 	bl	80001e4 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <redirect+0x1d4>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <redirect+0x200>)
 8001f32:	4614      	mov	r4, r2
 8001f34:	469c      	mov	ip, r3
 8001f36:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001f3a:	4665      	mov	r5, ip
 8001f3c:	4626      	mov	r6, r4
 8001f3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f40:	6028      	str	r0, [r5, #0]
 8001f42:	6069      	str	r1, [r5, #4]
 8001f44:	60aa      	str	r2, [r5, #8]
 8001f46:	60eb      	str	r3, [r5, #12]
 8001f48:	3410      	adds	r4, #16
 8001f4a:	f10c 0c10 	add.w	ip, ip, #16
 8001f4e:	4574      	cmp	r4, lr
 8001f50:	d1f3      	bne.n	8001f3a <redirect+0x176>
 8001f52:	4662      	mov	r2, ip
 8001f54:	4623      	mov	r3, r4
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	8013      	strh	r3, [r2, #0]
	strcat(redi,"<button name = \"control\" type = \"submit\" value = \"add\">add water</button>");
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <redirect+0x1d4>)
 8001f5c:	f7fe f942 	bl	80001e4 <strlen>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <redirect+0x1d4>)
 8001f66:	4413      	add	r3, r2
 8001f68:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <redirect+0x204>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	234a      	movs	r3, #74	; 0x4a
 8001f70:	461a      	mov	r2, r3
 8001f72:	f006 ff5b 	bl	8008e2c <memcpy>
	strcat(redi,"<button name = \"control\" type = \"submit\" value = \"spray\">spray water</button>");
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <redirect+0x1d4>)
 8001f78:	f7fe f934 	bl	80001e4 <strlen>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <redirect+0x1d4>)
 8001f82:	4413      	add	r3, r2
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <redirect+0x208>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	4611      	mov	r1, r2
 8001f8a:	234e      	movs	r3, #78	; 0x4e
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f006 ff4d 	bl	8008e2c <memcpy>
}
 8001f92:	bf00      	nop
 8001f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200135c8 	.word	0x200135c8
 8001f9c:	08009774 	.word	0x08009774
 8001fa0:	08009784 	.word	0x08009784
 8001fa4:	08009798 	.word	0x08009798
 8001fa8:	080097a0 	.word	0x080097a0
 8001fac:	08009984 	.word	0x08009984
 8001fb0:	080097fc 	.word	0x080097fc
 8001fb4:	08009844 	.word	0x08009844
 8001fb8:	0800986c 	.word	0x0800986c
 8001fbc:	08009874 	.word	0x08009874
 8001fc0:	0800987c 	.word	0x0800987c
 8001fc4:	0800989c 	.word	0x0800989c
 8001fc8:	080098d0 	.word	0x080098d0
 8001fcc:	0800991c 	.word	0x0800991c

08001fd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fe2:	f000 fc11 	bl	8002808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40001000 	.word	0x40001000

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <Error_Handler+0x8>
	...

08002000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_MspInit+0x4c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_MspInit+0x4c>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_MspInit+0x4c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_MspInit+0x4c>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_ADC_MspInit+0x8c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d12f      	bne.n	80020d2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_ADC_MspInit+0x90>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_ADC_MspInit+0x90>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_ADC_MspInit+0x90>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_ADC_MspInit+0x90>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_ADC_MspInit+0x90>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_ADC_MspInit+0x90>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020aa:	2302      	movs	r3, #2
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <HAL_ADC_MspInit+0x94>)
 80020be:	f001 f975 	bl	80033ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2106      	movs	r1, #6
 80020c6:	2012      	movs	r0, #18
 80020c8:	f001 f946 	bl	8003358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020cc:	2012      	movs	r0, #18
 80020ce:	f001 f95f 	bl	8003390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40012000 	.word	0x40012000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000

080020e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_SPI_MspInit+0x84>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12b      	bne.n	8002162 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_SPI_MspInit+0x88>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_SPI_MspInit+0x88>)
 8002114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_SPI_MspInit+0x88>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_SPI_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_SPI_MspInit+0x88>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_SPI_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002142:	23e0      	movs	r3, #224	; 0xe0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002152:	2305      	movs	r3, #5
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_SPI_MspInit+0x8c>)
 800215e:	f001 f925 	bl	80033ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40013000 	.word	0x40013000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d116      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_TIM_Base_MspInit+0x70>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_TIM_Base_MspInit+0x70>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_TIM_Base_MspInit+0x70>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	201c      	movs	r0, #28
 80021ac:	f001 f8d4 	bl	8003358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021b0:	201c      	movs	r0, #28
 80021b2:	f001 f8ed 	bl	8003390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021b6:	e012      	b.n	80021de <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_TIM_Base_MspInit+0x74>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10d      	bne.n	80021de <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_TIM_Base_MspInit+0x70>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_TIM_Base_MspInit+0x70>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_TIM_Base_MspInit+0x70>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40000400 	.word	0x40000400

080021f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d11d      	bne.n	800224e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_TIM_MspPostInit+0x68>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_TIM_MspPostInit+0x68>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_TIM_MspPostInit+0x68>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800222e:	2301      	movs	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800223e:	2301      	movs	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4619      	mov	r1, r3
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <HAL_TIM_MspPostInit+0x6c>)
 800224a:	f001 f8af 	bl	80033ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000

08002260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_UART_MspInit+0x84>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d12c      	bne.n	80022dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_UART_MspInit+0x88>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_UART_MspInit+0x88>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_MspInit+0x88>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_UART_MspInit+0x88>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_UART_MspInit+0x88>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022cc:	2307      	movs	r3, #7
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_UART_MspInit+0x8c>)
 80022d8:	f001 f868 	bl	80033ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40004800 	.word	0x40004800
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020400 	.word	0x40020400

080022f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	2036      	movs	r0, #54	; 0x36
 8002306:	f001 f827 	bl	8003358 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f001 f840 	bl	8003390 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_InitTick+0xa4>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_InitTick+0xa4>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_InitTick+0xa4>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800232c:	f107 0210 	add.w	r2, r7, #16
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f001 fe62 	bl	8004000 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800233c:	f001 fe38 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8002340:	4603      	mov	r3, r0
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_InitTick+0xa8>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	3b01      	subs	r3, #1
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_InitTick+0xac>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <HAL_InitTick+0xb0>)
 8002358:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_InitTick+0xac>)
 800235c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002360:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_InitTick+0xac>)
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_InitTick+0xac>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_InitTick+0xac>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <HAL_InitTick+0xac>)
 8002376:	f002 fc1d 	bl	8004bb4 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_InitTick+0xac>)
 8002382:	f002 fccf 	bl	8004d24 <HAL_TIM_Base_Start_IT>
 8002386:	4603      	mov	r3, r0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3730      	adds	r7, #48	; 0x30
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	431bde83 	.word	0x431bde83
 800239c:	20013bc8 	.word	0x20013bc8
 80023a0:	40001000 	.word	0x40001000

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <DebugMon_Handler>:
//
///**
//  * @brief This function handles Debug monitor.
//  */
void DebugMon_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <ADC_IRQHandler+0x10>)
 80023d6:	f000 fb7d 	bl	8002ad4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20013a84 	.word	0x20013a84

080023e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <TIM2_IRQHandler+0x10>)
 80023ea:	f002 fe2d 	bl	8005048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20013b80 	.word	0x20013b80

080023f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <TIM6_DAC_IRQHandler+0x10>)
 80023fe:	f002 fe23 	bl	8005048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20013bc8 	.word	0x20013bc8

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f006 fccc 	bl	8008dd8 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20020000 	.word	0x20020000
 800246c:	00000400 	.word	0x00000400
 8002470:	200000c4 	.word	0x200000c4
 8002474:	20013c68 	.word	0x20013c68

08002478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <setup_server>:
/******************************************************************************
 * User API
 ******************************************************************************/

void setup_server(uint8_t macAddress[], uint8_t ipAddress[], uint16_t port)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
	_port = port;
 80024aa:	4a22      	ldr	r2, [pc, #136]	; (8002534 <setup_server+0x98>)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	8013      	strh	r3, [r2, #0]
    enc28j60Init(macAddress);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7fe f9db 	bl	800086c <enc28j60Init>
    enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
 80024b6:	2002      	movs	r0, #2
 80024b8:	f7fe f9c7 	bl	800084a <enc28j60clkout>
    HAL_Delay(10);
 80024bc:	200a      	movs	r0, #10
 80024be:	f000 f9c3 	bl	8002848 <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x880);
 80024c2:	f44f 6108 	mov.w	r1, #2176	; 0x880
 80024c6:	2014      	movs	r0, #20
 80024c8:	f7fe f993 	bl	80007f2 <enc28j60PhyWrite>
	HAL_Delay(500);
 80024cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024d0:	f000 f9ba 	bl	8002848 <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x990);
 80024d4:	f44f 6119 	mov.w	r1, #2448	; 0x990
 80024d8:	2014      	movs	r0, #20
 80024da:	f7fe f98a 	bl	80007f2 <enc28j60PhyWrite>
	HAL_Delay(500);
 80024de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024e2:	f000 f9b1 	bl	8002848 <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x880);
 80024e6:	f44f 6108 	mov.w	r1, #2176	; 0x880
 80024ea:	2014      	movs	r0, #20
 80024ec:	f7fe f981 	bl	80007f2 <enc28j60PhyWrite>
	HAL_Delay(500);
 80024f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024f4:	f000 f9a8 	bl	8002848 <HAL_Delay>
	enc28j60PhyWrite(PHLCON,0x990);
 80024f8:	f44f 6119 	mov.w	r1, #2448	; 0x990
 80024fc:	2014      	movs	r0, #20
 80024fe:	f7fe f978 	bl	80007f2 <enc28j60PhyWrite>
	HAL_Delay(500);
 8002502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002506:	f000 f99f 	bl	8002848 <HAL_Delay>
    enc28j60PhyWrite(PHLCON,0x476);
 800250a:	f240 4176 	movw	r1, #1142	; 0x476
 800250e:	2014      	movs	r0, #20
 8002510:	f7fe f96f 	bl	80007f2 <enc28j60PhyWrite>
    HAL_Delay(500);
 8002514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002518:	f000 f996 	bl	8002848 <HAL_Delay>
    init_ip_arp_udp_tcp(macAddress, ipAddress, _port);
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <setup_server+0x98>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7fe fb78 	bl	8000c1c <init_ip_arp_udp_tcp>
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2001383e 	.word	0x2001383e

08002538 <serviceRequest>:


char* serviceRequest()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
	uint16_t dat_p;
	plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
 800253e:	4965      	ldr	r1, [pc, #404]	; (80026d4 <serviceRequest+0x19c>)
 8002540:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002544:	f7fe fa8a 	bl	8000a5c <enc28j60PacketReceive>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <serviceRequest+0x1a0>)
 800254e:	801a      	strh	r2, [r3, #0]

	/*plen will ne unequal to zero if there is a valid packet (without crc error) */
	if(plen!=0)
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <serviceRequest+0x1a0>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80b9 	beq.w	80026cc <serviceRequest+0x194>
	{
		// arp is broadcast if unknown but a host may also verify the mac address by sending it to a unicast address.
	    if (eth_type_is_arp_and_my_ip(buf, plen))
 800255a:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <serviceRequest+0x1a0>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	485c      	ldr	r0, [pc, #368]	; (80026d4 <serviceRequest+0x19c>)
 8002562:	f7fe fb93 	bl	8000c8c <eth_type_is_arp_and_my_ip>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <serviceRequest+0x3e>
		{
	      make_arp_answer_from_request(buf);
 800256c:	4859      	ldr	r0, [pc, #356]	; (80026d4 <serviceRequest+0x19c>)
 800256e:	f7fe fd2f 	bl	8000fd0 <make_arp_answer_from_request>
	      return 0;
 8002572:	2300      	movs	r3, #0
 8002574:	e0aa      	b.n	80026cc <serviceRequest+0x194>
	    }
	    // check if ip packets are for us:
	    if (eth_type_is_ip_and_my_ip(buf, plen) == 0)
 8002576:	4b58      	ldr	r3, [pc, #352]	; (80026d8 <serviceRequest+0x1a0>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	4855      	ldr	r0, [pc, #340]	; (80026d4 <serviceRequest+0x19c>)
 800257e:	f7fe fbbb 	bl	8000cf8 <eth_type_is_ip_and_my_ip>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <serviceRequest+0x54>
	 	{
	      return 0;
 8002588:	2300      	movs	r3, #0
 800258a:	e09f      	b.n	80026cc <serviceRequest+0x194>
	    }
	    if (buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V)
 800258c:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <serviceRequest+0x19c>)
 800258e:	7ddb      	ldrb	r3, [r3, #23]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10c      	bne.n	80025ae <serviceRequest+0x76>
 8002594:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <serviceRequest+0x19c>)
 8002596:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800259a:	2b08      	cmp	r3, #8
 800259c:	d107      	bne.n	80025ae <serviceRequest+0x76>
		{
	      make_echo_reply_from_request(buf, plen);
 800259e:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <serviceRequest+0x1a0>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	484b      	ldr	r0, [pc, #300]	; (80026d4 <serviceRequest+0x19c>)
 80025a6:	f7fe fd6b 	bl	8001080 <make_echo_reply_from_request>
	      return 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e08e      	b.n	80026cc <serviceRequest+0x194>
	    }
	    // tcp port www start, compare only the lower byte
	    if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P] == _port)
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <serviceRequest+0x19c>)
 80025b0:	7ddb      	ldrb	r3, [r3, #23]
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	f040 808a 	bne.w	80026cc <serviceRequest+0x194>
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <serviceRequest+0x19c>)
 80025ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8084 	bne.w	80026cc <serviceRequest+0x194>
 80025c4:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <serviceRequest+0x19c>)
 80025c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <serviceRequest+0x1a4>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d17b      	bne.n	80026cc <serviceRequest+0x194>
		{
	    	if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <serviceRequest+0x19c>)
 80025d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <serviceRequest+0xb4>
			{
	         	make_tcp_synack_from_syn(buf); // make_tcp_synack_from_syn does already send the syn,ack
 80025e2:	483c      	ldr	r0, [pc, #240]	; (80026d4 <serviceRequest+0x19c>)
 80025e4:	f7fe fd78 	bl	80010d8 <make_tcp_synack_from_syn>
	         	return 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e06f      	b.n	80026cc <serviceRequest+0x194>
	      	}
	      	if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <serviceRequest+0x19c>)
 80025ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d068      	beq.n	80026cc <serviceRequest+0x194>
			{
	        	init_len_info(buf); // init some data structures
 80025fa:	4836      	ldr	r0, [pc, #216]	; (80026d4 <serviceRequest+0x19c>)
 80025fc:	f7fe fdbe 	bl	800117c <init_len_info>
	        	dat_p=get_tcp_data_pointer();
 8002600:	f7fe fda4 	bl	800114c <get_tcp_data_pointer>
 8002604:	4603      	mov	r3, r0
 8002606:	807b      	strh	r3, [r7, #2]
	        	if (dat_p==0)
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <serviceRequest+0xee>
				{ // we can possibly have no data, just ack:
	          		if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <serviceRequest+0x19c>)
 8002610:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <serviceRequest+0xea>
					{
	            		make_tcp_ack_from_any(buf);
 800261c:	482d      	ldr	r0, [pc, #180]	; (80026d4 <serviceRequest+0x19c>)
 800261e:	f7fe fe13 	bl	8001248 <make_tcp_ack_from_any>
	          		}
	          		return 0;
 8002622:	2300      	movs	r3, #0
 8002624:	e052      	b.n	80026cc <serviceRequest+0x194>
	        	}
	        	//Verfica se n�o recebeu GET
	        	if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0)
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <serviceRequest+0x19c>)
 800262a:	4413      	add	r3, r2
 800262c:	2204      	movs	r2, #4
 800262e:	4619      	mov	r1, r3
 8002630:	482b      	ldr	r0, [pc, #172]	; (80026e0 <serviceRequest+0x1a8>)
 8002632:	f006 fc31 	bl	8008e98 <strncmp>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <serviceRequest+0x130>
				{
	          		// head, post and other methods for possible status codes see:
	            	// http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
	            	plen=fill_tcp_data(buf,0,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>200 OK</h1>");
 800263c:	4a29      	ldr	r2, [pc, #164]	; (80026e4 <serviceRequest+0x1ac>)
 800263e:	2100      	movs	r1, #0
 8002640:	4824      	ldr	r0, [pc, #144]	; (80026d4 <serviceRequest+0x19c>)
 8002642:	f7fe fddf 	bl	8001204 <fill_tcp_data>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <serviceRequest+0x1a0>)
 800264c:	801a      	strh	r2, [r3, #0]
					plen=fill_tcp_data(buf,plen,"<h1>A</h1>");
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <serviceRequest+0x1a0>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <serviceRequest+0x1b0>)
 8002654:	4619      	mov	r1, r3
 8002656:	481f      	ldr	r0, [pc, #124]	; (80026d4 <serviceRequest+0x19c>)
 8002658:	f7fe fdd4 	bl	8001204 <fill_tcp_data>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <serviceRequest+0x1a0>)
 8002662:	801a      	strh	r2, [r3, #0]
					respond_single();
 8002664:	f000 f870 	bl	8002748 <respond_single>
	        	}
	        	//Verifica se recebeu GET + request action
	 			if (strncmp("/",(char *)&(buf[dat_p+4]),1)==0) // was "/ " and 2
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	3304      	adds	r3, #4
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <serviceRequest+0x19c>)
 800266e:	4413      	add	r3, r2
 8002670:	2201      	movs	r2, #1
 8002672:	4619      	mov	r1, r3
 8002674:	481d      	ldr	r0, [pc, #116]	; (80026ec <serviceRequest+0x1b4>)
 8002676:	f006 fc0f 	bl	8008e98 <strncmp>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d125      	bne.n	80026cc <serviceRequest+0x194>
				{
					// Copy the request action before we overwrite it with the response
					int i = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
					while (buf[dat_p+5+i] != ' ' && i < STR_BUFFER_SIZE)
 8002684:	e00d      	b.n	80026a2 <serviceRequest+0x16a>
					{
						strbuf[i] = buf[dat_p+5+i];
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	1d5a      	adds	r2, r3, #5
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <serviceRequest+0x19c>)
 8002690:	5cd1      	ldrb	r1, [r2, r3]
 8002692:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <serviceRequest+0x1b8>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	460a      	mov	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
						i++;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3301      	adds	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
					while (buf[dat_p+5+i] != ' ' && i < STR_BUFFER_SIZE)
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	1d5a      	adds	r2, r3, #5
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <serviceRequest+0x19c>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d002      	beq.n	80026b8 <serviceRequest+0x180>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b7f      	cmp	r3, #127	; 0x7f
 80026b6:	dde6      	ble.n	8002686 <serviceRequest+0x14e>
					}
					strbuf[i] = '\0';
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <serviceRequest+0x1b8>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
					//plen=fill_tcp_data(buf,0,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
					//plen=fill_tcp_data(buf,0,"HTTP/1.0 200 OK\r\nContent-Type: application/octet-stream\r\n\r\n");
					plen = 0;
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <serviceRequest+0x1a0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
					return (char*)strbuf;
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <serviceRequest+0x1b8>)
 80026ca:	e7ff      	b.n	80026cc <serviceRequest+0x194>
	         	}
	      }
		}
	}
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200000c8 	.word	0x200000c8
 80026d8:	20013c10 	.word	0x20013c10
 80026dc:	2001383e 	.word	0x2001383e
 80026e0:	080099c8 	.word	0x080099c8
 80026e4:	080099d0 	.word	0x080099d0
 80026e8:	08009a0c 	.word	0x08009a0c
 80026ec:	08009a18 	.word	0x08009a18
 80026f0:	200006a8 	.word	0x200006a8

080026f4 <print_text>:


void print_text(char* text)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	int j = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  	while (text[j])
 8002700:	e011      	b.n	8002726 <print_text+0x32>
	{
    	buf[TCP_CHECKSUM_L_P+3+plen]=text[j++];
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	441a      	add	r2, r3
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <print_text+0x4c>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	3336      	adds	r3, #54	; 0x36
 8002714:	7811      	ldrb	r1, [r2, #0]
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <print_text+0x50>)
 8002718:	54d1      	strb	r1, [r2, r3]
    	plen++;
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <print_text+0x4c>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <print_text+0x4c>)
 8002724:	801a      	strh	r2, [r3, #0]
  	while (text[j])
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e7      	bne.n	8002702 <print_text+0xe>
  	}
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	20013c10 	.word	0x20013c10
 8002744:	200000c8 	.word	0x200000c8

08002748 <respond_single>:
  sprintf(tempString, "%d",number);
  print_text(tempString);
}

void respond_single()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	make_tcp_ack_from_any(buf); // send ack for http get
 800274c:	4806      	ldr	r0, [pc, #24]	; (8002768 <respond_single+0x20>)
 800274e:	f7fe fd7b 	bl	8001248 <make_tcp_ack_from_any>
	make_tcp_ack_with_data_single(buf,plen); // send data
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <respond_single+0x24>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	4619      	mov	r1, r3
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <respond_single+0x20>)
 800275a:	f7fe fdc5 	bl	80012e8 <make_tcp_ack_with_data_single>
	plen = 0;
 800275e:	4b03      	ldr	r3, [pc, #12]	; (800276c <respond_single+0x24>)
 8002760:	2200      	movs	r2, #0
 8002762:	801a      	strh	r2, [r3, #0]
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200000c8 	.word	0x200000c8
 800276c:	20013c10 	.word	0x20013c10

08002770 <Reset_Handler>:
 8002770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a8 <LoopFillZerobss+0x12>
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <LoopFillZerobss+0x16>)
 8002776:	490e      	ldr	r1, [pc, #56]	; (80027b0 <LoopFillZerobss+0x1a>)
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <LoopFillZerobss+0x1e>)
 800277a:	2300      	movs	r3, #0
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:
 800277e:	58d4      	ldr	r4, [r2, r3]
 8002780:	50c4      	str	r4, [r0, r3]
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:
 8002784:	18c4      	adds	r4, r0, r3
 8002786:	428c      	cmp	r4, r1
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <LoopFillZerobss+0x22>)
 800278c:	4c0b      	ldr	r4, [pc, #44]	; (80027bc <LoopFillZerobss+0x26>)
 800278e:	2300      	movs	r3, #0
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:
 8002796:	42a2      	cmp	r2, r4
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>
 800279a:	f7ff fe6d 	bl	8002478 <SystemInit>
 800279e:	f006 fb21 	bl	8008de4 <__libc_init_array>
 80027a2:	f7fe fde9 	bl	8001378 <main>
 80027a6:	4770      	bx	lr
 80027a8:	20020000 	.word	0x20020000
 80027ac:	20000000 	.word	0x20000000
 80027b0:	2000008c 	.word	0x2000008c
 80027b4:	08009a94 	.word	0x08009a94
 80027b8:	2000008c 	.word	0x2000008c
 80027bc:	20013c68 	.word	0x20013c68

080027c0 <CAN1_RX0_IRQHandler>:
 80027c0:	e7fe      	b.n	80027c0 <CAN1_RX0_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <HAL_Init+0x40>)
 80027ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_Init+0x40>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_Init+0x40>)
 80027da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_Init+0x40>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ec:	2003      	movs	r0, #3
 80027ee:	f000 fda8 	bl	8003342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7ff fd7c 	bl	80022f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f8:	f7ff fc02 	bl	8002000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00

08002808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x20>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_IncTick+0x24>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	2000001c 	.word	0x2000001c
 800282c:	20013c14 	.word	0x20013c14

08002830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return uwTick;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_GetTick+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20013c14 	.word	0x20013c14

08002848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff ffee 	bl	8002830 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d005      	beq.n	800286e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_Delay+0x44>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800286e:	bf00      	nop
 8002870:	f7ff ffde 	bl	8002830 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f7      	bhi.n	8002870 <HAL_Delay+0x28>
  {
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000001c 	.word	0x2000001c

08002890 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e033      	b.n	800290e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fbce 	bl	8002050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028d6:	f023 0302 	bic.w	r3, r3, #2
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fb7a 	bl	8002fdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
 80028fe:	e001      	b.n	8002904 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Start_IT+0x1a>
 800292e:	2302      	movs	r3, #2
 8002930:	e0bd      	b.n	8002aae <HAL_ADC_Start_IT+0x196>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d018      	beq.n	800297a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002958:	4b58      	ldr	r3, [pc, #352]	; (8002abc <HAL_ADC_Start_IT+0x1a4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_ADC_Start_IT+0x1a8>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9a      	lsrs	r2, r3, #18
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800296c:	e002      	b.n	8002974 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3b01      	subs	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f9      	bne.n	800296e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 8085 	bne.w	8002a94 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f023 0206 	bic.w	r2, r3, #6
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
 80029d6:	e002      	b.n	80029de <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_ADC_Start_IT+0x1ac>)
 80029e8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029f2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a02:	f043 0320 	orr.w	r3, r3, #32
 8002a06:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12a      	bne.n	8002a6a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <HAL_ADC_Start_IT+0x1b0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d015      	beq.n	8002a4a <HAL_ADC_Start_IT+0x132>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <HAL_ADC_Start_IT+0x1b4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_Start_IT+0x11c>
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_ADC_Start_IT+0x1ac>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <HAL_ADC_Start_IT+0x1b8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d136      	bne.n	8002aac <HAL_ADC_Start_IT+0x194>
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_ADC_Start_IT+0x1ac>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d130      	bne.n	8002aac <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d129      	bne.n	8002aac <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e020      	b.n	8002aac <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_ADC_Start_IT+0x1b0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d11b      	bne.n	8002aac <HAL_ADC_Start_IT+0x194>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	e00b      	b.n	8002aac <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0210 	orr.w	r2, r3, #16
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000014 	.word	0x20000014
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	40012000 	.word	0x40012000
 8002acc:	40012100 	.word	0x40012100
 8002ad0:	40012200 	.word	0x40012200

08002ad4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d049      	beq.n	8002baa <HAL_ADC_IRQHandler+0xd6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d046      	beq.n	8002baa <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d12b      	bne.n	8002b9a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d127      	bne.n	8002b9a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0220 	bic.w	r2, r2, #32
 8002b74:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fef8 	bl	8001990 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0212 	mvn.w	r2, #18
 8002ba8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d057      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x1b8>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d054      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d139      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12b      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d124      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d11d      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d119      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 faa9 	bl	80031d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 020c 	mvn.w	r2, #12
 8002c8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d017      	beq.n	8002cee <HAL_ADC_IRQHandler+0x21a>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d014      	beq.n	8002cee <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10d      	bne.n	8002cee <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f846 	bl	8002d70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0201 	mvn.w	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_ADC_IRQHandler+0x27a>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0220 	mvn.w	r2, #32
 8002d3c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f820 	bl	8002d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0220 	mvn.w	r2, #32
 8002d4c:	601a      	str	r2, [r3, #0]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e105      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x228>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b09      	cmp	r3, #9
 8002dc2:	d925      	bls.n	8002e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b1e      	subs	r3, #30
 8002dda:	2207      	movs	r2, #7
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43da      	mvns	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	400a      	ands	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68d9      	ldr	r1, [r3, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4403      	add	r3, r0
 8002e02:	3b1e      	subs	r3, #30
 8002e04:	409a      	lsls	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e022      	b.n	8002e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	2207      	movs	r2, #7
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	400a      	ands	r2, r1
 8002e32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6919      	ldr	r1, [r3, #16]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4403      	add	r3, r0
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d824      	bhi.n	8002ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b05      	subs	r3, #5
 8002e70:	221f      	movs	r2, #31
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	3b05      	subs	r3, #5
 8002e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea6:	e04c      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d824      	bhi.n	8002efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b23      	subs	r3, #35	; 0x23
 8002ec2:	221f      	movs	r2, #31
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	400a      	ands	r2, r1
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b23      	subs	r3, #35	; 0x23
 8002eec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef8:	e023      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b41      	subs	r3, #65	; 0x41
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b41      	subs	r3, #65	; 0x41
 8002f36:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_ADC_ConfigChannel+0x234>)
 8002f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <HAL_ADC_ConfigChannel+0x238>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d109      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1cc>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b12      	cmp	r3, #18
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_ADC_ConfigChannel+0x238>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d123      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x21e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d003      	beq.n	8002f7e <HAL_ADC_ConfigChannel+0x1e6>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b11      	cmp	r3, #17
 8002f7c:	d11b      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d111      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_ADC_ConfigChannel+0x23c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_ADC_ConfigChannel+0x240>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0c9a      	lsrs	r2, r3, #18
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fa8:	e002      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f9      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	40012000 	.word	0x40012000
 8002fd4:	20000014 	.word	0x20000014
 8002fd8:	431bde83 	.word	0x431bde83

08002fdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <ADC_Init+0x1f0>)
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	021a      	lsls	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <ADC_Init+0x1f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e00f      	b.n	80030da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0202 	bic.w	r2, r2, #2
 80030e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
 80030f4:	005a      	lsls	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003116:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003126:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	3b01      	subs	r3, #1
 8003134:	035a      	lsls	r2, r3, #13
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	e007      	b.n	8003150 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	3b01      	subs	r3, #1
 800316c:	051a      	lsls	r2, r3, #20
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003192:	025a      	lsls	r2, r3, #9
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	029a      	lsls	r2, r3, #10
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40012300 	.word	0x40012300
 80031d0:	0f000001 	.word	0x0f000001

080031d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ff4c 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800336a:	f7ff ff61 	bl	8003230 <__NVIC_GetPriorityGrouping>
 800336e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	6978      	ldr	r0, [r7, #20]
 8003376:	f7ff ffb1 	bl	80032dc <NVIC_EncodePriority>
 800337a:	4602      	mov	r2, r0
 800337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff80 	bl	8003288 <__NVIC_SetPriority>
}
 8003388:	bf00      	nop
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff54 	bl	800324c <__NVIC_EnableIRQ>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e16b      	b.n	80036a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c8:	2201      	movs	r2, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	f040 815a 	bne.w	800369a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d005      	beq.n	80033fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d130      	bne.n	8003460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003434:	2201      	movs	r2, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 0201 	and.w	r2, r3, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b03      	cmp	r3, #3
 800346a:	d017      	beq.n	800349c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	2203      	movs	r2, #3
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d123      	bne.n	80034f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	220f      	movs	r2, #15
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	08da      	lsrs	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3208      	adds	r2, #8
 80034ea:	69b9      	ldr	r1, [r7, #24]
 80034ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80b4 	beq.w	800369a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b60      	ldr	r3, [pc, #384]	; (80036b8 <HAL_GPIO_Init+0x30c>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4a5f      	ldr	r2, [pc, #380]	; (80036b8 <HAL_GPIO_Init+0x30c>)
 800353c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_GPIO_Init+0x30c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354e:	4a5b      	ldr	r2, [pc, #364]	; (80036bc <HAL_GPIO_Init+0x310>)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	220f      	movs	r2, #15
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <HAL_GPIO_Init+0x314>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02b      	beq.n	80035d2 <HAL_GPIO_Init+0x226>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a51      	ldr	r2, [pc, #324]	; (80036c4 <HAL_GPIO_Init+0x318>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d025      	beq.n	80035ce <HAL_GPIO_Init+0x222>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a50      	ldr	r2, [pc, #320]	; (80036c8 <HAL_GPIO_Init+0x31c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01f      	beq.n	80035ca <HAL_GPIO_Init+0x21e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4f      	ldr	r2, [pc, #316]	; (80036cc <HAL_GPIO_Init+0x320>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d019      	beq.n	80035c6 <HAL_GPIO_Init+0x21a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4e      	ldr	r2, [pc, #312]	; (80036d0 <HAL_GPIO_Init+0x324>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x216>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_GPIO_Init+0x328>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x212>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_GPIO_Init+0x32c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x20e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <HAL_GPIO_Init+0x330>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x20a>
 80035b2:	2307      	movs	r3, #7
 80035b4:	e00e      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035b6:	2308      	movs	r3, #8
 80035b8:	e00c      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035ba:	2306      	movs	r3, #6
 80035bc:	e00a      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035be:	2305      	movs	r3, #5
 80035c0:	e008      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035c2:	2304      	movs	r3, #4
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e004      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_GPIO_Init+0x228>
 80035d2:	2300      	movs	r3, #0
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f002 0203 	and.w	r2, r2, #3
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	4093      	lsls	r3, r2
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e4:	4935      	ldr	r1, [pc, #212]	; (80036bc <HAL_GPIO_Init+0x310>)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3302      	adds	r3, #2
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f2:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_GPIO_Init+0x334>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003616:	4a32      	ldr	r2, [pc, #200]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_GPIO_Init+0x334>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366a:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_GPIO_Init+0x334>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_GPIO_Init+0x334>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	f67f ae90 	bls.w	80033c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40020800 	.word	0x40020800
 80036cc:	40020c00 	.word	0x40020c00
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40021400 	.word	0x40021400
 80036d8:	40021800 	.word	0x40021800
 80036dc:	40021c00 	.word	0x40021c00
 80036e0:	40013c00 	.word	0x40013c00

080036e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f4:	787b      	ldrb	r3, [r7, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003700:	e003      	b.n	800370a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	041a      	lsls	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	619a      	str	r2, [r3, #24]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e264      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d075      	beq.n	8003822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	4ba3      	ldr	r3, [pc, #652]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4ba0      	ldr	r3, [pc, #640]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374e:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375a:	d10b      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4b99      	ldr	r3, [pc, #612]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05b      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d157      	bne.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e23f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x74>
 800377e:	4b91      	ldr	r3, [pc, #580]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a90      	ldr	r2, [pc, #576]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x98>
 8003796:	4b8b      	ldr	r3, [pc, #556]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a8a      	ldr	r2, [pc, #552]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a87      	ldr	r2, [pc, #540]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 80037b0:	4b84      	ldr	r3, [pc, #528]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a83      	ldr	r2, [pc, #524]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b81      	ldr	r3, [pc, #516]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a80      	ldr	r2, [pc, #512]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7ff f82e 	bl	8002830 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7ff f82a 	bl	8002830 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e204      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xc0>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7ff f81a 	bl	8002830 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7ff f816 	bl	8002830 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1f0      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b6c      	ldr	r3, [pc, #432]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0xe8>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1c4      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4952      	ldr	r1, [pc, #328]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_OscConfig+0x2b0>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fe ffcf 	bl	8002830 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003896:	f7fe ffcb 	bl	8002830 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1a5      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4940      	ldr	r1, [pc, #256]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_OscConfig+0x2b0>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe ffae 	bl	8002830 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fe ffaa 	bl	8002830 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e184      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d030      	beq.n	8003964 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_RCC_OscConfig+0x2b4>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe ff8e 	bl	8002830 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003918:	f7fe ff8a 	bl	8002830 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e164      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x200>
 8003936:	e015      	b.n	8003964 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_OscConfig+0x2b4>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe ff77 	bl	8002830 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003946:	f7fe ff73 	bl	8002830 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e14d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a0 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x2b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d121      	bne.n	80039f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCC_OscConfig+0x2b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <HAL_RCC_OscConfig+0x2b8>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fe ff39 	bl	8002830 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e011      	b.n	80039e6 <HAL_RCC_OscConfig+0x2ce>
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	42470000 	.word	0x42470000
 80039cc:	42470e80 	.word	0x42470e80
 80039d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fe ff2c 	bl	8002830 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e106      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	4b85      	ldr	r3, [pc, #532]	; (8003bfc <HAL_RCC_OscConfig+0x4e4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
 80039fa:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a80      	ldr	r2, [pc, #512]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x32a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x312>
 8003a10:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a7a      	ldr	r2, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b78      	ldr	r3, [pc, #480]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a77      	ldr	r2, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x32a>
 8003a2a:	4b75      	ldr	r3, [pc, #468]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a74      	ldr	r2, [pc, #464]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b72      	ldr	r3, [pc, #456]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a71      	ldr	r2, [pc, #452]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fef1 	bl	8002830 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe feed 	bl	8002830 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0c5      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x33a>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fedb 	bl	8002830 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe fed7 	bl	8002830 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0af      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b5a      	ldr	r3, [pc, #360]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a55      	ldr	r2, [pc, #340]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 809b 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d05c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d141      	bne.n	8003b54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCC_OscConfig+0x4ec>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe feab 	bl	8002830 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fea7 	bl	8002830 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e081      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	4937      	ldr	r1, [pc, #220]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <HAL_RCC_OscConfig+0x4ec>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fe80 	bl	8002830 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fe7c 	bl	8002830 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e056      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x41c>
 8003b52:	e04e      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_OscConfig+0x4ec>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fe69 	bl	8002830 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fe fe65 	bl	8002830 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e03f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x44a>
 8003b80:	e037      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e032      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <HAL_RCC_OscConfig+0x4e8>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d028      	beq.n	8003bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d121      	bne.n	8003bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d11a      	bne.n	8003bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d111      	bne.n	8003bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	40023800 	.word	0x40023800
 8003c04:	42470060 	.word	0x42470060

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cc      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90c      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e067      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4934      	ldr	r1, [pc, #208]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fe fd9a 	bl	8002830 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fe fd96 	bl	8002830 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20c      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f821 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	490a      	ldr	r1, [pc, #40]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fa9e 	bl	80022f0 <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08009a38 	.word	0x08009a38
 8003dcc:	20000014 	.word	0x20000014
 8003dd0:	20000018 	.word	0x20000018

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	2300      	movs	r3, #0
 8003de6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dec:	4b67      	ldr	r3, [pc, #412]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x40>
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	f200 80bd 	bhi.w	8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e06:	e0b7      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e0a:	60bb      	str	r3, [r7, #8]
       break;
 8003e0c:	e0b7      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0e:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e10:	60bb      	str	r3, [r7, #8]
      break;
 8003e12:	e0b4      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e14:	4b5d      	ldr	r3, [pc, #372]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1e:	4b5b      	ldr	r3, [pc, #364]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d04d      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2a:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	099b      	lsrs	r3, r3, #6
 8003e30:	461a      	mov	r2, r3
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	ea02 0800 	and.w	r8, r2, r0
 8003e42:	ea03 0901 	and.w	r9, r3, r1
 8003e46:	4640      	mov	r0, r8
 8003e48:	4649      	mov	r1, r9
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	014b      	lsls	r3, r1, #5
 8003e54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e58:	0142      	lsls	r2, r0, #5
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	ebb0 0008 	subs.w	r0, r0, r8
 8003e62:	eb61 0109 	sbc.w	r1, r1, r9
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	018b      	lsls	r3, r1, #6
 8003e70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e74:	0182      	lsls	r2, r0, #6
 8003e76:	1a12      	subs	r2, r2, r0
 8003e78:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	00d9      	lsls	r1, r3, #3
 8003e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8a:	00d0      	lsls	r0, r2, #3
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	eb12 0208 	adds.w	r2, r2, r8
 8003e94:	eb43 0309 	adc.w	r3, r3, r9
 8003e98:	f04f 0000 	mov.w	r0, #0
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	0259      	lsls	r1, r3, #9
 8003ea2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ea6:	0250      	lsls	r0, r2, #9
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f7fc f9f2 	bl	80002a0 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e04a      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	ea02 0400 	and.w	r4, r2, r0
 8003ede:	ea03 0501 	and.w	r5, r3, r1
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	014b      	lsls	r3, r1, #5
 8003ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ef4:	0142      	lsls	r2, r0, #5
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	1b00      	subs	r0, r0, r4
 8003efc:	eb61 0105 	sbc.w	r1, r1, r5
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	018b      	lsls	r3, r1, #6
 8003f0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f0e:	0182      	lsls	r2, r0, #6
 8003f10:	1a12      	subs	r2, r2, r0
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	f04f 0000 	mov.w	r0, #0
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f24:	00d0      	lsls	r0, r2, #3
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	1912      	adds	r2, r2, r4
 8003f2c:	eb45 0303 	adc.w	r3, r5, r3
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	0299      	lsls	r1, r3, #10
 8003f3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f3e:	0290      	lsls	r0, r2, #10
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	f7fc f9a6 	bl	80002a0 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	60bb      	str	r3, [r7, #8]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f7a:	60bb      	str	r3, [r7, #8]
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	007a1200 	.word	0x007a1200

08003f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000014 	.word	0x20000014

08003fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fb4:	f7ff fff0 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0a9b      	lsrs	r3, r3, #10
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	08009a48 	.word	0x08009a48

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fdc:	f7ff ffdc 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0b5b      	lsrs	r3, r3, #13
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	08009a48 	.word	0x08009a48

08004000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	220f      	movs	r2, #15
 800400e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004010:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_GetClockConfig+0x5c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCC_GetClockConfig+0x5c>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCC_GetClockConfig+0x5c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCC_GetClockConfig+0x5c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <HAL_RCC_GetClockConfig+0x60>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0207 	and.w	r2, r3, #7
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	40023c00 	.word	0x40023c00

08004064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07b      	b.n	800416e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004086:	d009      	beq.n	800409c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	61da      	str	r2, [r3, #28]
 800408e:	e005      	b.n	800409c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fe f816 	bl	80020e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	ea42 0103 	orr.w	r1, r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0104 	and.w	r1, r3, #4
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f003 0210 	and.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b088      	sub	sp, #32
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_SPI_Transmit+0x22>
 8004194:	2302      	movs	r3, #2
 8004196:	e126      	b.n	80043e6 <HAL_SPI_Transmit+0x270>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041a0:	f7fe fb46 	bl	8002830 <HAL_GetTick>
 80041a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
 80041b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041ba:	e10b      	b.n	80043d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Transmit+0x52>
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041cc:	e102      	b.n	80043d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2203      	movs	r2, #3
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	88fa      	ldrh	r2, [r7, #6]
 80041e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004214:	d10f      	bne.n	8004236 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004234:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d007      	beq.n	8004254 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d14b      	bne.n	80042f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_Transmit+0xf6>
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d13e      	bne.n	80042ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004290:	e02b      	b.n	80042ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d112      	bne.n	80042c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80042c4:	e011      	b.n	80042ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c6:	f7fe fab3 	bl	8002830 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d803      	bhi.n	80042de <HAL_SPI_Transmit+0x168>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Transmit+0x16e>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042e8:	e074      	b.n	80043d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ce      	bne.n	8004292 <HAL_SPI_Transmit+0x11c>
 80042f4:	e04c      	b.n	8004390 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_SPI_Transmit+0x18e>
 80042fe:	8afb      	ldrh	r3, [r7, #22]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d140      	bne.n	8004386 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800432a:	e02c      	b.n	8004386 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d113      	bne.n	8004362 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004360:	e011      	b.n	8004386 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004362:	f7fe fa65 	bl	8002830 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d803      	bhi.n	800437a <HAL_SPI_Transmit+0x204>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d102      	bne.n	8004380 <HAL_SPI_Transmit+0x20a>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004384:	e026      	b.n	80043d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1cd      	bne.n	800432c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fbcb 	bl	8004b30 <SPI_EndRxTxTransaction>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e000      	b.n	80043d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80043d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b088      	sub	sp, #32
 80043f2:	af02      	add	r7, sp, #8
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440a:	d112      	bne.n	8004432 <HAL_SPI_Receive+0x44>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10e      	bne.n	8004432 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2204      	movs	r2, #4
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800441c:	88fa      	ldrh	r2, [r7, #6]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f8f1 	bl	8004610 <HAL_SPI_TransmitReceive>
 800442e:	4603      	mov	r3, r0
 8004430:	e0ea      	b.n	8004608 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_SPI_Receive+0x52>
 800443c:	2302      	movs	r3, #2
 800443e:	e0e3      	b.n	8004608 <HAL_SPI_Receive+0x21a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004448:	f7fe f9f2 	bl	8002830 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d002      	beq.n	8004460 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800445a:	2302      	movs	r3, #2
 800445c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800445e:	e0ca      	b.n	80045f6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_SPI_Receive+0x7e>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004470:	e0c1      	b.n	80045f6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2204      	movs	r2, #4
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b8:	d10f      	bne.n	80044da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d007      	beq.n	80044f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d162      	bne.n	80045c6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004500:	e02e      	b.n	8004560 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d115      	bne.n	800453c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f103 020c 	add.w	r2, r3, #12
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800453a:	e011      	b.n	8004560 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453c:	f7fe f978 	bl	8002830 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d803      	bhi.n	8004554 <HAL_SPI_Receive+0x166>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d102      	bne.n	800455a <HAL_SPI_Receive+0x16c>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800455e:	e04a      	b.n	80045f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1cb      	bne.n	8004502 <HAL_SPI_Receive+0x114>
 800456a:	e031      	b.n	80045d0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d113      	bne.n	80045a2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	b292      	uxth	r2, r2
 8004586:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a0:	e011      	b.n	80045c6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a2:	f7fe f945 	bl	8002830 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_Receive+0x1cc>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_Receive+0x1d2>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045c4:	e017      	b.n	80045f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1cd      	bne.n	800456c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fa45 	bl	8004a64 <SPI_EndRxTransaction>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
 80045f2:	e000      	b.n	80045f6 <HAL_SPI_Receive+0x208>
  }

error :
 80045f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	; 0x30
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800461e:	2301      	movs	r3, #1
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x26>
 8004632:	2302      	movs	r3, #2
 8004634:	e18a      	b.n	800494c <HAL_SPI_TransmitReceive+0x33c>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463e:	f7fe f8f7 	bl	8002830 <HAL_GetTick>
 8004642:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800465c:	2b01      	cmp	r3, #1
 800465e:	d00f      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x70>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d107      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x68>
 8004670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004674:	2b04      	cmp	r3, #4
 8004676:	d003      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004678:	2302      	movs	r3, #2
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800467e:	e15b      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x82>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x82>
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004698:	e14e      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2205      	movs	r2, #5
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	887a      	ldrh	r2, [r7, #2]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d007      	beq.n	8004702 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004700:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470a:	d178      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_TransmitReceive+0x10a>
 8004714:	8b7b      	ldrh	r3, [r7, #26]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d166      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800473e:	e053      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d11b      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x176>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d016      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x176>
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d113      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d119      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x1b8>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d014      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	b292      	uxth	r2, r2
 80047aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	1c9a      	adds	r2, r3, #2
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c4:	2301      	movs	r3, #1
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c8:	f7fe f832 	bl	8002830 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d807      	bhi.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d003      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047e6:	e0a7      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1a6      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x130>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1a1      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x130>
 80047fc:	e07c      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_SPI_TransmitReceive+0x1fc>
 8004806:	8b7b      	ldrh	r3, [r7, #26]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d16b      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004832:	e057      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d11c      	bne.n	800487c <HAL_SPI_TransmitReceive+0x26c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d017      	beq.n	800487c <HAL_SPI_TransmitReceive+0x26c>
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d114      	bne.n	800487c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d119      	bne.n	80048be <HAL_SPI_TransmitReceive+0x2ae>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d014      	beq.n	80048be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ba:	2301      	movs	r3, #1
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048be:	f7fd ffb7 	bl	8002830 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d803      	bhi.n	80048d6 <HAL_SPI_TransmitReceive+0x2c6>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x2cc>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048e2:	e029      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1a2      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x224>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d19d      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f917 	bl	8004b30 <SPI_EndRxTxTransaction>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004914:	e010      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	e000      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800494c:	4618      	mov	r0, r3
 800494e:	3730      	adds	r7, #48	; 0x30
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004964:	f7fd ff64 	bl	8002830 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	4413      	add	r3, r2
 8004972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004974:	f7fd ff5c 	bl	8002830 <HAL_GetTick>
 8004978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800497a:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	015b      	lsls	r3, r3, #5
 8004980:	0d1b      	lsrs	r3, r3, #20
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800498a:	e054      	b.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d050      	beq.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004994:	f7fd ff4c 	bl	8002830 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d902      	bls.n	80049aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d13d      	bne.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c2:	d111      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	d004      	beq.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d6:	d107      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f0:	d10f      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e017      	b.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d19b      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000014 	.word	0x20000014

08004a64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a78:	d111      	bne.n	8004a9e <SPI_EndRxTransaction+0x3a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a82:	d004      	beq.n	8004a8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8c:	d107      	bne.n	8004a9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa6:	d12a      	bne.n	8004afe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d012      	beq.n	8004ad8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7ff ff49 	bl	8004954 <SPI_WaitFlagStateUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02d      	beq.n	8004b24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	f043 0220 	orr.w	r2, r3, #32
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e026      	b.n	8004b26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff ff36 	bl	8004954 <SPI_WaitFlagStateUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01a      	beq.n	8004b24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e013      	b.n	8004b26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2101      	movs	r1, #1
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff ff23 	bl	8004954 <SPI_WaitFlagStateUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e000      	b.n	8004b26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <SPI_EndRxTxTransaction+0x7c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <SPI_EndRxTxTransaction+0x80>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0d5b      	lsrs	r3, r3, #21
 8004b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5a:	d112      	bne.n	8004b82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff fef4 	bl	8004954 <SPI_WaitFlagStateUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e00f      	b.n	8004ba2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	d0f2      	beq.n	8004b82 <SPI_EndRxTxTransaction+0x52>
 8004b9c:	e000      	b.n	8004ba0 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b9e:	bf00      	nop
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000014 	.word	0x20000014
 8004bb0:	165e9f81 	.word	0x165e9f81

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd facc 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fcda 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e046      	b.n	8004cfa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <HAL_TIM_Base_Start+0xb4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <HAL_TIM_Base_Start+0xb8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <HAL_TIM_Base_Start+0xbc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <HAL_TIM_Base_Start+0xc0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_TIM_Base_Start+0xc4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <HAL_TIM_Base_Start+0xc8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <HAL_TIM_Base_Start+0xcc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d111      	bne.n	8004ce8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d010      	beq.n	8004cf8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce6:	e007      	b.n	8004cf8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40000c00 	.word	0x40000c00
 8004d18:	40010400 	.word	0x40010400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40001800 	.word	0x40001800

08004d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d001      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e04e      	b.n	8004dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d66:	d01d      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <HAL_TIM_Base_Start_IT+0xc8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x80>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d010      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	e007      	b.n	8004dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	40010400 	.word	0x40010400
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40001800 	.word	0x40001800

08004e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e041      	b.n	8004e9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f839 	bl	8004ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 fbb2 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x24>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e022      	b.n	8004f22 <HAL_TIM_PWM_Start+0x6a>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d109      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0x3e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e015      	b.n	8004f22 <HAL_TIM_PWM_Start+0x6a>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start+0x58>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e008      	b.n	8004f22 <HAL_TIM_PWM_Start+0x6a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e07c      	b.n	8005024 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x82>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	e013      	b.n	8004f62 <HAL_TIM_PWM_Start+0xaa>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Start+0x92>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f48:	e00b      	b.n	8004f62 <HAL_TIM_PWM_Start+0xaa>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Start+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	e003      	b.n	8004f62 <HAL_TIM_PWM_Start+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fe08 	bl	8005b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2d      	ldr	r2, [pc, #180]	; (800502c <HAL_TIM_PWM_Start+0x174>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_TIM_PWM_Start+0xcc>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <HAL_TIM_PWM_Start+0x178>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_PWM_Start+0xd0>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_TIM_PWM_Start+0xd2>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a22      	ldr	r2, [pc, #136]	; (800502c <HAL_TIM_PWM_Start+0x174>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d01d      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_TIM_PWM_Start+0x17c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <HAL_TIM_PWM_Start+0x180>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_TIM_PWM_Start+0x184>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_TIM_PWM_Start+0x178>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_TIM_PWM_Start+0x188>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIM_PWM_Start+0x136>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a16      	ldr	r2, [pc, #88]	; (8005044 <HAL_TIM_PWM_Start+0x18c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d111      	bne.n	8005012 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d010      	beq.n	8005022 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	e007      	b.n	8005022 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40010000 	.word	0x40010000
 8005030:	40010400 	.word	0x40010400
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40014000 	.word	0x40014000
 8005044:	40001800 	.word	0x40001800

08005048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b02      	cmp	r3, #2
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0202 	mvn.w	r2, #2
 8005074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa70 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa62 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fa73 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d122      	bne.n	80050f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0204 	mvn.w	r2, #4
 80050c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa46 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa38 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa49 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b08      	cmp	r3, #8
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b08      	cmp	r3, #8
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0208 	mvn.w	r2, #8
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2204      	movs	r2, #4
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa1c 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa0e 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fa1f 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b10      	cmp	r3, #16
 8005158:	d122      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b10      	cmp	r3, #16
 8005166:	d11b      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0210 	mvn.w	r2, #16
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2208      	movs	r2, #8
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9f2 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9e4 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9f5 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0201 	mvn.w	r2, #1
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc ff02 	bl	8001fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fd70 	bl	8005cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f9ba 	bl	8005598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b20      	cmp	r3, #32
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0220 	mvn.w	r2, #32
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fd3a 	bl	8005cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800526e:	2302      	movs	r3, #2
 8005270:	e0ac      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x174>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b0c      	cmp	r3, #12
 800527e:	f200 809f 	bhi.w	80053c0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052bd 	.word	0x080052bd
 800528c:	080053c1 	.word	0x080053c1
 8005290:	080053c1 	.word	0x080053c1
 8005294:	080053c1 	.word	0x080053c1
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080053c1 	.word	0x080053c1
 80052a0:	080053c1 	.word	0x080053c1
 80052a4:	080053c1 	.word	0x080053c1
 80052a8:	0800533f 	.word	0x0800533f
 80052ac:	080053c1 	.word	0x080053c1
 80052b0:	080053c1 	.word	0x080053c1
 80052b4:	080053c1 	.word	0x080053c1
 80052b8:	0800537f 	.word	0x0800537f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fa12 	bl	80056ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0208 	orr.w	r2, r2, #8
 80052d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0204 	bic.w	r2, r2, #4
 80052e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	619a      	str	r2, [r3, #24]
      break;
 80052fa:	e062      	b.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa62 	bl	80057cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	619a      	str	r2, [r3, #24]
      break;
 800533c:	e041      	b.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fab7 	bl	80058b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0208 	orr.w	r2, r2, #8
 8005358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0204 	bic.w	r2, r2, #4
 8005368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69d9      	ldr	r1, [r3, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	61da      	str	r2, [r3, #28]
      break;
 800537c:	e021      	b.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb0b 	bl	80059a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	021a      	lsls	r2, r3, #8
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	61da      	str	r2, [r3, #28]
      break;
 80053be:	e000      	b.n	80053c2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80053c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIM_ConfigClockSource+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e0b3      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x180>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800540a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005412:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005424:	d03e      	beq.n	80054a4 <HAL_TIM_ConfigClockSource+0xd0>
 8005426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542a:	f200 8087 	bhi.w	800553c <HAL_TIM_ConfigClockSource+0x168>
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	f000 8085 	beq.w	8005540 <HAL_TIM_ConfigClockSource+0x16c>
 8005436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543a:	d87f      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 800543c:	2b70      	cmp	r3, #112	; 0x70
 800543e:	d01a      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0xa2>
 8005440:	2b70      	cmp	r3, #112	; 0x70
 8005442:	d87b      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 8005444:	2b60      	cmp	r3, #96	; 0x60
 8005446:	d050      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x116>
 8005448:	2b60      	cmp	r3, #96	; 0x60
 800544a:	d877      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 800544c:	2b50      	cmp	r3, #80	; 0x50
 800544e:	d03c      	beq.n	80054ca <HAL_TIM_ConfigClockSource+0xf6>
 8005450:	2b50      	cmp	r3, #80	; 0x50
 8005452:	d873      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d058      	beq.n	800550a <HAL_TIM_ConfigClockSource+0x136>
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d86f      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 800545c:	2b30      	cmp	r3, #48	; 0x30
 800545e:	d064      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x156>
 8005460:	2b30      	cmp	r3, #48	; 0x30
 8005462:	d86b      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d060      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x156>
 8005468:	2b20      	cmp	r3, #32
 800546a:	d867      	bhi.n	800553c <HAL_TIM_ConfigClockSource+0x168>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d05c      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x156>
 8005470:	2b10      	cmp	r3, #16
 8005472:	d05a      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005474:	e062      	b.n	800553c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6899      	ldr	r1, [r3, #8]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f000 fb5b 	bl	8005b40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005498:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	609a      	str	r2, [r3, #8]
      break;
 80054a2:	e04e      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6899      	ldr	r1, [r3, #8]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f000 fb44 	bl	8005b40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c6:	609a      	str	r2, [r3, #8]
      break;
 80054c8:	e03b      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f000 fab8 	bl	8005a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2150      	movs	r1, #80	; 0x50
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fb11 	bl	8005b0a <TIM_ITRx_SetConfig>
      break;
 80054e8:	e02b      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6859      	ldr	r1, [r3, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f000 fad7 	bl	8005aaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2160      	movs	r1, #96	; 0x60
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fb01 	bl	8005b0a <TIM_ITRx_SetConfig>
      break;
 8005508:	e01b      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	461a      	mov	r2, r3
 8005518:	f000 fa98 	bl	8005a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2140      	movs	r1, #64	; 0x40
 8005522:	4618      	mov	r0, r3
 8005524:	f000 faf1 	bl	8005b0a <TIM_ITRx_SetConfig>
      break;
 8005528:	e00b      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f000 fae8 	bl	8005b0a <TIM_ITRx_SetConfig>
        break;
 800553a:	e002      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005540:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a40      	ldr	r2, [pc, #256]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3d      	ldr	r2, [pc, #244]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3c      	ldr	r2, [pc, #240]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <TIM_Base_SetConfig+0x120>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d02b      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d027      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d023      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <TIM_Base_SetConfig+0x120>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <TIM_Base_SetConfig+0x128>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <TIM_Base_SetConfig+0x12c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a26      	ldr	r2, [pc, #152]	; (80056dc <TIM_Base_SetConfig+0x130>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a25      	ldr	r2, [pc, #148]	; (80056e0 <TIM_Base_SetConfig+0x134>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a24      	ldr	r2, [pc, #144]	; (80056e4 <TIM_Base_SetConfig+0x138>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a23      	ldr	r2, [pc, #140]	; (80056e8 <TIM_Base_SetConfig+0x13c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a0c      	ldr	r2, [pc, #48]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d103      	bne.n	80056ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	615a      	str	r2, [r3, #20]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40010400 	.word	0x40010400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	40001800 	.word	0x40001800
 80056e4:	40001c00 	.word	0x40001c00
 80056e8:	40002000 	.word	0x40002000

080056ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 0302 	bic.w	r3, r3, #2
 8005734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <TIM_OC1_SetConfig+0xd8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_OC1_SetConfig+0x64>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <TIM_OC1_SetConfig+0xdc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10c      	bne.n	800576a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0308 	bic.w	r3, r3, #8
 8005756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <TIM_OC1_SetConfig+0xd8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_OC1_SetConfig+0x8e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <TIM_OC1_SetConfig+0xdc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d111      	bne.n	800579e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	621a      	str	r2, [r3, #32]
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40010400 	.word	0x40010400

080057cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0210 	bic.w	r2, r3, #16
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0320 	bic.w	r3, r3, #32
 8005816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <TIM_OC2_SetConfig+0xe4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC2_SetConfig+0x68>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <TIM_OC2_SetConfig+0xe8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10d      	bne.n	8005850 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <TIM_OC2_SetConfig+0xe4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_OC2_SetConfig+0x94>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <TIM_OC2_SetConfig+0xe8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d113      	bne.n	8005888 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400

080058b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_OC3_SetConfig+0xe0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC3_SetConfig+0x66>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <TIM_OC3_SetConfig+0xe4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10d      	bne.n	800593a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <TIM_OC3_SetConfig+0xe0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC3_SetConfig+0x92>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <TIM_OC3_SetConfig+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d113      	bne.n	8005972 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40010000 	.word	0x40010000
 800599c:	40010400 	.word	0x40010400

080059a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	031b      	lsls	r3, r3, #12
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <TIM_OC4_SetConfig+0xa4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC4_SetConfig+0x68>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a11      	ldr	r2, [pc, #68]	; (8005a48 <TIM_OC4_SetConfig+0xa8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d109      	bne.n	8005a1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 030a 	bic.w	r3, r3, #10
 8005a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	621a      	str	r2, [r3, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b087      	sub	sp, #28
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0210 	bic.w	r2, r3, #16
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f043 0307 	orr.w	r3, r3, #7
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	609a      	str	r2, [r3, #8]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2201      	movs	r2, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e05a      	b.n	8005c9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d01d      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10c      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40001800 	.word	0x40001800

08005cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e03f      	b.n	8005d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fc faa4 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	; 0x24
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f905 	bl	8005f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	; 0x28
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d17c      	bne.n	8005ea0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_UART_Transmit+0x2c>
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e075      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Transmit+0x3e>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e06e      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2221      	movs	r2, #33	; 0x21
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dda:	f7fc fd29 	bl	8002830 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	88fa      	ldrh	r2, [r7, #6]
 8005de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df4:	d108      	bne.n	8005e08 <HAL_UART_Transmit+0x82>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e003      	b.n	8005e10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e18:	e02a      	b.n	8005e70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f840 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e036      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	e007      	b.n	8005e62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1cf      	bne.n	8005e1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2200      	movs	r2, #0
 8005e82:	2140      	movs	r1, #64	; 0x40
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f810 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e000      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
  }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	e02c      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d028      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x30>
 8005eca:	f7fc fcb1 	bl	8002830 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d21d      	bcs.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ee8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e00f      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d0c3      	beq.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	b09f      	sub	sp, #124	; 0x7c
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	68d9      	ldr	r1, [r3, #12]
 8005f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	ea40 0301 	orr.w	r3, r0, r1
 8005f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f84:	f021 010c 	bic.w	r1, r1, #12
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9e:	6999      	ldr	r1, [r3, #24]
 8005fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	ea40 0301 	orr.w	r3, r0, r1
 8005fa8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4bc5      	ldr	r3, [pc, #788]	; (80062c4 <UART_SetConfig+0x384>)
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d004      	beq.n	8005fbe <UART_SetConfig+0x7e>
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4bc3      	ldr	r3, [pc, #780]	; (80062c8 <UART_SetConfig+0x388>)
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d103      	bne.n	8005fc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fbe:	f7fe f80b 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 8005fc2:	6778      	str	r0, [r7, #116]	; 0x74
 8005fc4:	e002      	b.n	8005fcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fc6:	f7fd fff3 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8005fca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd4:	f040 80b6 	bne.w	8006144 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fda:	461c      	mov	r4, r3
 8005fdc:	f04f 0500 	mov.w	r5, #0
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	6439      	str	r1, [r7, #64]	; 0x40
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	647b      	str	r3, [r7, #68]	; 0x44
 8005fec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ff0:	1912      	adds	r2, r2, r4
 8005ff2:	eb45 0303 	adc.w	r3, r5, r3
 8005ff6:	f04f 0000 	mov.w	r0, #0
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	00d9      	lsls	r1, r3, #3
 8006000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006004:	00d0      	lsls	r0, r2, #3
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	1911      	adds	r1, r2, r4
 800600c:	6639      	str	r1, [r7, #96]	; 0x60
 800600e:	416b      	adcs	r3, r5
 8006010:	667b      	str	r3, [r7, #100]	; 0x64
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	461a      	mov	r2, r3
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	1891      	adds	r1, r2, r2
 800601e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006020:	415b      	adcs	r3, r3
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006028:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800602c:	f7fa f938 	bl	80002a0 <__aeabi_uldivmod>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4ba5      	ldr	r3, [pc, #660]	; (80062cc <UART_SetConfig+0x38c>)
 8006036:	fba3 2302 	umull	r2, r3, r3, r2
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	011e      	lsls	r6, r3, #4
 800603e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006040:	461c      	mov	r4, r3
 8006042:	f04f 0500 	mov.w	r5, #0
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	1891      	adds	r1, r2, r2
 800604c:	6339      	str	r1, [r7, #48]	; 0x30
 800604e:	415b      	adcs	r3, r3
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006056:	1912      	adds	r2, r2, r4
 8006058:	eb45 0303 	adc.w	r3, r5, r3
 800605c:	f04f 0000 	mov.w	r0, #0
 8006060:	f04f 0100 	mov.w	r1, #0
 8006064:	00d9      	lsls	r1, r3, #3
 8006066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800606a:	00d0      	lsls	r0, r2, #3
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	1911      	adds	r1, r2, r4
 8006072:	65b9      	str	r1, [r7, #88]	; 0x58
 8006074:	416b      	adcs	r3, r5
 8006076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	461a      	mov	r2, r3
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	1891      	adds	r1, r2, r2
 8006084:	62b9      	str	r1, [r7, #40]	; 0x28
 8006086:	415b      	adcs	r3, r3
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800608a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800608e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006092:	f7fa f905 	bl	80002a0 <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b8c      	ldr	r3, [pc, #560]	; (80062cc <UART_SetConfig+0x38c>)
 800609c:	fba3 1302 	umull	r1, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	2164      	movs	r1, #100	; 0x64
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	3332      	adds	r3, #50	; 0x32
 80060ae:	4a87      	ldr	r2, [pc, #540]	; (80062cc <UART_SetConfig+0x38c>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060bc:	441e      	add	r6, r3
 80060be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c0:	4618      	mov	r0, r3
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	1894      	adds	r4, r2, r2
 80060cc:	623c      	str	r4, [r7, #32]
 80060ce:	415b      	adcs	r3, r3
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060d6:	1812      	adds	r2, r2, r0
 80060d8:	eb41 0303 	adc.w	r3, r1, r3
 80060dc:	f04f 0400 	mov.w	r4, #0
 80060e0:	f04f 0500 	mov.w	r5, #0
 80060e4:	00dd      	lsls	r5, r3, #3
 80060e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060ea:	00d4      	lsls	r4, r2, #3
 80060ec:	4622      	mov	r2, r4
 80060ee:	462b      	mov	r3, r5
 80060f0:	1814      	adds	r4, r2, r0
 80060f2:	653c      	str	r4, [r7, #80]	; 0x50
 80060f4:	414b      	adcs	r3, r1
 80060f6:	657b      	str	r3, [r7, #84]	; 0x54
 80060f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	461a      	mov	r2, r3
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	1891      	adds	r1, r2, r2
 8006104:	61b9      	str	r1, [r7, #24]
 8006106:	415b      	adcs	r3, r3
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800610e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006112:	f7fa f8c5 	bl	80002a0 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <UART_SetConfig+0x38c>)
 800611c:	fba3 1302 	umull	r1, r3, r3, r2
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	2164      	movs	r1, #100	; 0x64
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	3332      	adds	r3, #50	; 0x32
 800612e:	4a67      	ldr	r2, [pc, #412]	; (80062cc <UART_SetConfig+0x38c>)
 8006130:	fba2 2303 	umull	r2, r3, r2, r3
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	f003 0207 	and.w	r2, r3, #7
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4432      	add	r2, r6
 8006140:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006142:	e0b9      	b.n	80062b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006146:	461c      	mov	r4, r3
 8006148:	f04f 0500 	mov.w	r5, #0
 800614c:	4622      	mov	r2, r4
 800614e:	462b      	mov	r3, r5
 8006150:	1891      	adds	r1, r2, r2
 8006152:	6139      	str	r1, [r7, #16]
 8006154:	415b      	adcs	r3, r3
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800615c:	1912      	adds	r2, r2, r4
 800615e:	eb45 0303 	adc.w	r3, r5, r3
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	00d9      	lsls	r1, r3, #3
 800616c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006170:	00d0      	lsls	r0, r2, #3
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	eb12 0804 	adds.w	r8, r2, r4
 800617a:	eb43 0905 	adc.w	r9, r3, r5
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4618      	mov	r0, r3
 8006184:	f04f 0100 	mov.w	r1, #0
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	008b      	lsls	r3, r1, #2
 8006192:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006196:	0082      	lsls	r2, r0, #2
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa f880 	bl	80002a0 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4b49      	ldr	r3, [pc, #292]	; (80062cc <UART_SetConfig+0x38c>)
 80061a6:	fba3 2302 	umull	r2, r3, r3, r2
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	011e      	lsls	r6, r3, #4
 80061ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b0:	4618      	mov	r0, r3
 80061b2:	f04f 0100 	mov.w	r1, #0
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	1894      	adds	r4, r2, r2
 80061bc:	60bc      	str	r4, [r7, #8]
 80061be:	415b      	adcs	r3, r3
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c6:	1812      	adds	r2, r2, r0
 80061c8:	eb41 0303 	adc.w	r3, r1, r3
 80061cc:	f04f 0400 	mov.w	r4, #0
 80061d0:	f04f 0500 	mov.w	r5, #0
 80061d4:	00dd      	lsls	r5, r3, #3
 80061d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061da:	00d4      	lsls	r4, r2, #3
 80061dc:	4622      	mov	r2, r4
 80061de:	462b      	mov	r3, r5
 80061e0:	1814      	adds	r4, r2, r0
 80061e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80061e4:	414b      	adcs	r3, r1
 80061e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f04f 0100 	mov.w	r1, #0
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	008b      	lsls	r3, r1, #2
 80061fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006200:	0082      	lsls	r2, r0, #2
 8006202:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006206:	f7fa f84b 	bl	80002a0 <__aeabi_uldivmod>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <UART_SetConfig+0x38c>)
 8006210:	fba3 1302 	umull	r1, r3, r3, r2
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	2164      	movs	r1, #100	; 0x64
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	3332      	adds	r3, #50	; 0x32
 8006222:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <UART_SetConfig+0x38c>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800622e:	441e      	add	r6, r3
 8006230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006232:	4618      	mov	r0, r3
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	1894      	adds	r4, r2, r2
 800623e:	603c      	str	r4, [r7, #0]
 8006240:	415b      	adcs	r3, r3
 8006242:	607b      	str	r3, [r7, #4]
 8006244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006248:	1812      	adds	r2, r2, r0
 800624a:	eb41 0303 	adc.w	r3, r1, r3
 800624e:	f04f 0400 	mov.w	r4, #0
 8006252:	f04f 0500 	mov.w	r5, #0
 8006256:	00dd      	lsls	r5, r3, #3
 8006258:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800625c:	00d4      	lsls	r4, r2, #3
 800625e:	4622      	mov	r2, r4
 8006260:	462b      	mov	r3, r5
 8006262:	eb12 0a00 	adds.w	sl, r2, r0
 8006266:	eb43 0b01 	adc.w	fp, r3, r1
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	008b      	lsls	r3, r1, #2
 800627e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006282:	0082      	lsls	r2, r0, #2
 8006284:	4650      	mov	r0, sl
 8006286:	4659      	mov	r1, fp
 8006288:	f7fa f80a 	bl	80002a0 <__aeabi_uldivmod>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <UART_SetConfig+0x38c>)
 8006292:	fba3 1302 	umull	r1, r3, r3, r2
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	2164      	movs	r1, #100	; 0x64
 800629a:	fb01 f303 	mul.w	r3, r1, r3
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	3332      	adds	r3, #50	; 0x32
 80062a4:	4a09      	ldr	r2, [pc, #36]	; (80062cc <UART_SetConfig+0x38c>)
 80062a6:	fba2 2303 	umull	r2, r3, r2, r3
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4432      	add	r2, r6
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	377c      	adds	r7, #124	; 0x7c
 80062bc:	46bd      	mov	sp, r7
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	bf00      	nop
 80062c4:	40011000 	.word	0x40011000
 80062c8:	40011400 	.word	0x40011400
 80062cc:	51eb851f 	.word	0x51eb851f

080062d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f103 0208 	add.w	r2, r3, #8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f103 0208 	add.w	r2, r3, #8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f103 0208 	add.w	r2, r3, #8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d103      	bne.n	8006392 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	e00c      	b.n	80063ac <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3308      	adds	r3, #8
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e002      	b.n	80063a0 <vListInsert+0x2e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d2f6      	bcs.n	800639a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6892      	ldr	r2, [r2, #8]
 80063fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6852      	ldr	r2, [r2, #4]
 8006404:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d103      	bne.n	8006418 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006462:	f002 f999 	bl	8008798 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006472:	fb01 f303 	mul.w	r3, r1, r3
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	3b01      	subs	r3, #1
 8006494:	68f9      	ldr	r1, [r7, #12]
 8006496:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	441a      	add	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	22ff      	movs	r2, #255	; 0xff
 80064a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	22ff      	movs	r2, #255	; 0xff
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d114      	bne.n	80064e2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01a      	beq.n	80064f6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3310      	adds	r3, #16
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 f971 	bl	80077ac <xTaskRemoveFromEventList>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d012      	beq.n	80064f6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <xQueueGenericReset+0xcc>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	e009      	b.n	80064f6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3310      	adds	r3, #16
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff fef2 	bl	80062d0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff feed 	bl	80062d0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80064f6:	f002 f97f 	bl	80087f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80064fa:	2301      	movs	r3, #1
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	; 0x30
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xQueueGenericCreate+0x2a>
        __asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	61bb      	str	r3, [r7, #24]
    }
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <xQueueGenericCreate+0x48>
 8006542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	429a      	cmp	r2, r3
 800654e:	d101      	bne.n	8006554 <xQueueGenericCreate+0x4c>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <xQueueGenericCreate+0x4e>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xQueueGenericCreate+0x68>
        __asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	617b      	str	r3, [r7, #20]
    }
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006576:	d90a      	bls.n	800658e <xQueueGenericCreate+0x86>
        __asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
    }
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	3350      	adds	r3, #80	; 0x50
 8006592:	4618      	mov	r0, r3
 8006594:	f002 fa22 	bl	80089dc <pvPortMalloc>
 8006598:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00d      	beq.n	80065bc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3350      	adds	r3, #80	; 0x50
 80065a8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065aa:	79fa      	ldrb	r2, [r7, #7]
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f805 	bl	80065c6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
    }
 80065be:	4618      	mov	r0, r3
 80065c0:	3728      	adds	r7, #40	; 0x28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e002      	b.n	80065e8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f4:	2101      	movs	r1, #1
 80065f6:	69b8      	ldr	r0, [r7, #24]
 80065f8:	f7ff ff1e 	bl	8006438 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08e      	sub	sp, #56	; 0x38
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800661a:	2300      	movs	r3, #0
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <xQueueGenericSend+0x32>
        __asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <xQueueGenericSend+0x40>
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <xQueueGenericSend+0x44>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <xQueueGenericSend+0x46>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <xQueueGenericSend+0x60>
        __asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d103      	bne.n	800667a <xQueueGenericSend+0x6e>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <xQueueGenericSend+0x72>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <xQueueGenericSend+0x74>
 800667e:	2300      	movs	r3, #0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericSend+0x8e>
        __asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	623b      	str	r3, [r7, #32]
    }
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800669a:	f001 fa23 	bl	8007ae4 <xTaskGetSchedulerState>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d102      	bne.n	80066aa <xQueueGenericSend+0x9e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <xQueueGenericSend+0xa2>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <xQueueGenericSend+0xa4>
 80066ae:	2300      	movs	r3, #0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xQueueGenericSend+0xbe>
        __asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	61fb      	str	r3, [r7, #28]
    }
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80066ca:	f002 f865 	bl	8008798 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d302      	bcc.n	80066e0 <xQueueGenericSend+0xd4>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d129      	bne.n	8006734 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e6:	f000 fb3d 	bl	8006d64 <prvCopyDataToQueue>
 80066ea:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d010      	beq.n	8006716 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	3324      	adds	r3, #36	; 0x24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f857 	bl	80077ac <xTaskRemoveFromEventList>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d013      	beq.n	800672c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006704:	4b3f      	ldr	r3, [pc, #252]	; (8006804 <xQueueGenericSend+0x1f8>)
 8006706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	e00a      	b.n	800672c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800671c:	4b39      	ldr	r3, [pc, #228]	; (8006804 <xQueueGenericSend+0x1f8>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800672c:	f002 f864 	bl	80087f8 <vPortExitCritical>
                return pdPASS;
 8006730:	2301      	movs	r3, #1
 8006732:	e063      	b.n	80067fc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800673a:	f002 f85d 	bl	80087f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800673e:	2300      	movs	r3, #0
 8006740:	e05c      	b.n	80067fc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006748:	f107 0314 	add.w	r3, r7, #20
 800674c:	4618      	mov	r0, r3
 800674e:	f001 f88f 	bl	8007870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006752:	2301      	movs	r3, #1
 8006754:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006756:	f002 f84f 	bl	80087f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800675a:	f000 fe09 	bl	8007370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800675e:	f002 f81b 	bl	8008798 <vPortEnterCritical>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006768:	b25b      	sxtb	r3, r3
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d103      	bne.n	8006778 <xQueueGenericSend+0x16c>
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800677e:	b25b      	sxtb	r3, r3
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d103      	bne.n	800678e <xQueueGenericSend+0x182>
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800678e:	f002 f833 	bl	80087f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006792:	1d3a      	adds	r2, r7, #4
 8006794:	f107 0314 	add.w	r3, r7, #20
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f001 f87e 	bl	800789c <xTaskCheckForTimeOut>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d124      	bne.n	80067f0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067a8:	f000 fbd4 	bl	8006f54 <prvIsQueueFull>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d018      	beq.n	80067e4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	3310      	adds	r3, #16
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 ffa6 	bl	800770c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80067c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c2:	f000 fb5f 	bl	8006e84 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80067c6:	f000 fde1 	bl	800738c <xTaskResumeAll>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f47f af7c 	bne.w	80066ca <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80067d2:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <xQueueGenericSend+0x1f8>)
 80067d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	e772      	b.n	80066ca <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80067e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067e6:	f000 fb4d 	bl	8006e84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80067ea:	f000 fdcf 	bl	800738c <xTaskResumeAll>
 80067ee:	e76c      	b.n	80066ca <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80067f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f2:	f000 fb47 	bl	8006e84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80067f6:	f000 fdc9 	bl	800738c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80067fa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3738      	adds	r7, #56	; 0x38
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b090      	sub	sp, #64	; 0x40
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d103      	bne.n	8006844 <xQueueGenericSendFromISR+0x3c>
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <xQueueGenericSendFromISR+0x40>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <xQueueGenericSendFromISR+0x42>
 8006848:	2300      	movs	r3, #0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d103      	bne.n	8006872 <xQueueGenericSendFromISR+0x6a>
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <xQueueGenericSendFromISR+0x6e>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <xQueueGenericSendFromISR+0x70>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	623b      	str	r3, [r7, #32]
    }
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006892:	f002 f863 	bl	800895c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006896:	f3ef 8211 	mrs	r2, BASEPRI
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	61fa      	str	r2, [r7, #28]
 80068ac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80068ae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <xQueueGenericSendFromISR+0xbc>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d13e      	bne.n	8006942 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068da:	f000 fa43 	bl	8006d64 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80068de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d112      	bne.n	800690e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d025      	beq.n	800693c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 ff59 	bl	80077ac <xTaskRemoveFromEventList>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01d      	beq.n	800693c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01a      	beq.n	800693c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	e016      	b.n	800693c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800690e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006912:	2b7f      	cmp	r3, #127	; 0x7f
 8006914:	d10a      	bne.n	800692c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	617b      	str	r3, [r7, #20]
    }
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800692c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006930:	3301      	adds	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	b25a      	sxtb	r2, r3
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800693c:	2301      	movs	r3, #1
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006940:	e001      	b.n	8006946 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006950:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006954:	4618      	mov	r0, r3
 8006956:	3740      	adds	r7, #64	; 0x40
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08c      	sub	sp, #48	; 0x30
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006968:	2300      	movs	r3, #0
 800696a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <xQueueReceive+0x30>
        __asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	623b      	str	r3, [r7, #32]
    }
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <xQueueReceive+0x3e>
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <xQueueReceive+0x42>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <xQueueReceive+0x44>
 800699e:	2300      	movs	r3, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <xQueueReceive+0x5e>
        __asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	61fb      	str	r3, [r7, #28]
    }
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ba:	f001 f893 	bl	8007ae4 <xTaskGetSchedulerState>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <xQueueReceive+0x6e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <xQueueReceive+0x72>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <xQueueReceive+0x74>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xQueueReceive+0x8e>
        __asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61bb      	str	r3, [r7, #24]
    }
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80069ea:	f001 fed5 	bl	8008798 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01f      	beq.n	8006a3a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fe:	f000 fa1b 	bl	8006e38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	3310      	adds	r3, #16
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fec8 	bl	80077ac <xTaskRemoveFromEventList>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006a22:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <xQueueReceive+0x1bc>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006a32:	f001 fee1 	bl	80087f8 <vPortExitCritical>
                return pdPASS;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e069      	b.n	8006b0e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006a40:	f001 feda 	bl	80087f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e062      	b.n	8006b0e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4e:	f107 0310 	add.w	r3, r7, #16
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 ff0c 	bl	8007870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006a5c:	f001 fecc 	bl	80087f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006a60:	f000 fc86 	bl	8007370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006a64:	f001 fe98 	bl	8008798 <vPortEnterCritical>
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a6e:	b25b      	sxtb	r3, r3
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d103      	bne.n	8006a7e <xQueueReceive+0x122>
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d103      	bne.n	8006a94 <xQueueReceive+0x138>
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a94:	f001 feb0 	bl	80087f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a98:	1d3a      	adds	r2, r7, #4
 8006a9a:	f107 0310 	add.w	r3, r7, #16
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fefb 	bl	800789c <xTaskCheckForTimeOut>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d123      	bne.n	8006af4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aae:	f000 fa3b 	bl	8006f28 <prvIsQueueEmpty>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	3324      	adds	r3, #36	; 0x24
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fe23 	bl	800770c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac8:	f000 f9dc 	bl	8006e84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006acc:	f000 fc5e 	bl	800738c <xTaskResumeAll>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d189      	bne.n	80069ea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <xQueueReceive+0x1bc>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	e780      	b.n	80069ea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aea:	f000 f9cb 	bl	8006e84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006aee:	f000 fc4d 	bl	800738c <xTaskResumeAll>
 8006af2:	e77a      	b.n	80069ea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af6:	f000 f9c5 	bl	8006e84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006afa:	f000 fc47 	bl	800738c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b00:	f000 fa12 	bl	8006f28 <prvIsQueueEmpty>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f43f af6f 	beq.w	80069ea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006b0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3730      	adds	r7, #48	; 0x30
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	623b      	str	r3, [r7, #32]
    }
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	61fb      	str	r3, [r7, #28]
    }
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6c:	f000 ffba 	bl	8007ae4 <xTaskGetSchedulerState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <xQueueSemaphoreTake+0x60>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <xQueueSemaphoreTake+0x64>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <xQueueSemaphoreTake+0x66>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	61bb      	str	r3, [r7, #24]
    }
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006b9c:	f001 fdfc 	bl	8008798 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d024      	beq.n	8006bf6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	1e5a      	subs	r2, r3, #1
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bbc:	f001 f92e 	bl	8007e1c <pvTaskIncrementMutexHeldCount>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00f      	beq.n	8006bee <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	3310      	adds	r3, #16
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fdea 	bl	80077ac <xTaskRemoveFromEventList>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006bde:	4b54      	ldr	r3, [pc, #336]	; (8006d30 <xQueueSemaphoreTake+0x214>)
 8006be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006bee:	f001 fe03 	bl	80087f8 <vPortExitCritical>
                return pdPASS;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e097      	b.n	8006d26 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d111      	bne.n	8006c20 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	617b      	str	r3, [r7, #20]
    }
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006c18:	f001 fdee 	bl	80087f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e082      	b.n	8006d26 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fe20 	bl	8007870 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006c34:	f001 fde0 	bl	80087f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006c38:	f000 fb9a 	bl	8007370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006c3c:	f001 fdac 	bl	8008798 <vPortEnterCritical>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d103      	bne.n	8006c56 <xQueueSemaphoreTake+0x13a>
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c5c:	b25b      	sxtb	r3, r3
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d103      	bne.n	8006c6c <xQueueSemaphoreTake+0x150>
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c6c:	f001 fdc4 	bl	80087f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c70:	463a      	mov	r2, r7
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4611      	mov	r1, r2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fe0f 	bl	800789c <xTaskCheckForTimeOut>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d132      	bne.n	8006cea <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c86:	f000 f94f 	bl	8006f28 <prvIsQueueEmpty>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d026      	beq.n	8006cde <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8006c98:	f001 fd7e 	bl	8008798 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 ff3d 	bl	8007b20 <xTaskPriorityInherit>
 8006ca6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8006ca8:	f001 fda6 	bl	80087f8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fd29 	bl	800770c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cbc:	f000 f8e2 	bl	8006e84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006cc0:	f000 fb64 	bl	800738c <xTaskResumeAll>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f47f af68 	bne.w	8006b9c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8006ccc:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <xQueueSemaphoreTake+0x214>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	e75e      	b.n	8006b9c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce0:	f000 f8d0 	bl	8006e84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006ce4:	f000 fb52 	bl	800738c <xTaskResumeAll>
 8006ce8:	e758      	b.n	8006b9c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cec:	f000 f8ca 	bl	8006e84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006cf0:	f000 fb4c 	bl	800738c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf6:	f000 f917 	bl	8006f28 <prvIsQueueEmpty>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f43f af4d 	beq.w	8006b9c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8006d08:	f001 fd46 	bl	8008798 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0e:	f000 f811 	bl	8006d34 <prvGetDisinheritPriorityAfterTimeout>
 8006d12:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fff0 	bl	8007d00 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006d20:	f001 fd6a 	bl	80087f8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006d24:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3738      	adds	r7, #56	; 0x38
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1c3 0305 	rsb	r3, r3, #5
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e001      	b.n	8006d56 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006d56:	68fb      	ldr	r3, [r7, #12]
    }
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d14d      	bne.n	8006e26 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 ff3c 	bl	8007c0c <xTaskPriorityDisinherit>
 8006d94:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	609a      	str	r2, [r3, #8]
 8006d9c:	e043      	b.n	8006e26 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d119      	bne.n	8006dd8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6858      	ldr	r0, [r3, #4]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	461a      	mov	r2, r3
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	f002 f83c 	bl	8008e2c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d32b      	bcc.n	8006e26 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	e026      	b.n	8006e26 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68d8      	ldr	r0, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	461a      	mov	r2, r3
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	f002 f822 	bl	8008e2c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	425b      	negs	r3, r3
 8006df2:	441a      	add	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d207      	bcs.n	8006e14 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d105      	bne.n	8006e26 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006e2e:	697b      	ldr	r3, [r7, #20]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d018      	beq.n	8006e7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	441a      	add	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d303      	bcc.n	8006e6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68d9      	ldr	r1, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	461a      	mov	r2, r3
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f001 ffd8 	bl	8008e2c <memcpy>
    }
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006e8c:	f001 fc84 	bl	8008798 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e98:	e011      	b.n	8006ebe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d012      	beq.n	8006ec8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3324      	adds	r3, #36	; 0x24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fc80 	bl	80077ac <xTaskRemoveFromEventList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006eb2:	f000 fd59 	bl	8007968 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dce9      	bgt.n	8006e9a <prvUnlockQueue+0x16>
 8006ec6:	e000      	b.n	8006eca <prvUnlockQueue+0x46>
                        break;
 8006ec8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	22ff      	movs	r2, #255	; 0xff
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006ed2:	f001 fc91 	bl	80087f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006ed6:	f001 fc5f 	bl	8008798 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee2:	e011      	b.n	8006f08 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d012      	beq.n	8006f12 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3310      	adds	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fc5b 	bl	80077ac <xTaskRemoveFromEventList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006efc:	f000 fd34 	bl	8007968 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dce9      	bgt.n	8006ee4 <prvUnlockQueue+0x60>
 8006f10:	e000      	b.n	8006f14 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006f12:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006f1c:	f001 fc6c 	bl	80087f8 <vPortExitCritical>
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006f30:	f001 fc32 	bl	8008798 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e001      	b.n	8006f46 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006f46:	f001 fc57 	bl	80087f8 <vPortExitCritical>

    return xReturn;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006f5c:	f001 fc1c 	bl	8008798 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d102      	bne.n	8006f72 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e001      	b.n	8006f76 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006f76:	f001 fc3f 	bl	80087f8 <vPortExitCritical>

    return xReturn;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e014      	b.n	8006fbe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f94:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <vQueueAddToRegistry+0x50>)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fa0:	490c      	ldr	r1, [pc, #48]	; (8006fd4 <vQueueAddToRegistry+0x50>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <vQueueAddToRegistry+0x50>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006fb6:	e006      	b.n	8006fc6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b07      	cmp	r3, #7
 8006fc2:	d9e7      	bls.n	8006f94 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20013c18 	.word	0x20013c18

08006fd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006fe8:	f001 fbd6 	bl	8008798 <vPortEnterCritical>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d103      	bne.n	8007002 <vQueueWaitForMessageRestricted+0x2a>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007008:	b25b      	sxtb	r3, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <vQueueWaitForMessageRestricted+0x40>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007018:	f001 fbee 	bl	80087f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	2b00      	cmp	r3, #0
 8007022:	d106      	bne.n	8007032 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fb91 	bl	8007754 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007032:	6978      	ldr	r0, [r7, #20]
 8007034:	f7ff ff26 	bl	8006e84 <prvUnlockQueue>
    }
 8007038:	bf00      	nop
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007040:	b580      	push	{r7, lr}
 8007042:	b08c      	sub	sp, #48	; 0x30
 8007044:	af04      	add	r7, sp, #16
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fcc1 	bl	80089dc <pvPortMalloc>
 800705a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00e      	beq.n	8007080 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007062:	2058      	movs	r0, #88	; 0x58
 8007064:	f001 fcba 	bl	80089dc <pvPortMalloc>
 8007068:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
 8007076:	e005      	b.n	8007084 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	f001 fd8f 	bl	8008b9c <vPortFree>
 800707e:	e001      	b.n	8007084 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	2300      	movs	r3, #0
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f80e 	bl	80070c2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80070a6:	69f8      	ldr	r0, [r7, #28]
 80070a8:	f000 f8a2 	bl	80071f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e002      	b.n	80070b8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80070b8:	69bb      	ldr	r3, [r7, #24]
    }
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b088      	sub	sp, #32
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	461a      	mov	r2, r3
 80070da:	21a5      	movs	r1, #165	; 0xa5
 80070dc:	f001 feb4 	bl	8008e48 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070ea:	3b01      	subs	r3, #1
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	f023 0307 	bic.w	r3, r3, #7
 80070f8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <prvInitialiseNewTask+0x58>
        __asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	617b      	str	r3, [r7, #20]
    }
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01f      	beq.n	8007160 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	e012      	b.n	800714c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	7819      	ldrb	r1, [r3, #0]
 800712e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	3334      	adds	r3, #52	; 0x34
 8007136:	460a      	mov	r2, r1
 8007138:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d006      	beq.n	8007154 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b09      	cmp	r3, #9
 8007150:	d9e9      	bls.n	8007126 <prvInitialiseNewTask+0x64>
 8007152:	e000      	b.n	8007156 <prvInitialiseNewTask+0x94>
            {
                break;
 8007154:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800715e:	e003      	b.n	8007168 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	2b04      	cmp	r3, #4
 800716c:	d901      	bls.n	8007172 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800716e:	2304      	movs	r3, #4
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800717c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	2200      	movs	r2, #0
 8007182:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	3304      	adds	r3, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff f8c1 	bl	8006310 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	3318      	adds	r3, #24
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff f8bc 	bl	8006310 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	f1c3 0205 	rsb	r2, r3, #5
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	3350      	adds	r3, #80	; 0x50
 80071b2:	2204      	movs	r2, #4
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fe46 	bl	8008e48 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	3354      	adds	r3, #84	; 0x54
 80071c0:	2201      	movs	r2, #1
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fe3f 	bl	8008e48 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	68f9      	ldr	r1, [r7, #12]
 80071ce:	69b8      	ldr	r0, [r7, #24]
 80071d0:	f001 f9b0 	bl	8008534 <pxPortInitialiseStack>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80071e6:	bf00      	nop
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80071f8:	f001 face 	bl	8008798 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80071fc:	4b2c      	ldr	r3, [pc, #176]	; (80072b0 <prvAddNewTaskToReadyList+0xc0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3301      	adds	r3, #1
 8007202:	4a2b      	ldr	r2, [pc, #172]	; (80072b0 <prvAddNewTaskToReadyList+0xc0>)
 8007204:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007206:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <prvAddNewTaskToReadyList+0xc4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800720e:	4a29      	ldr	r2, [pc, #164]	; (80072b4 <prvAddNewTaskToReadyList+0xc4>)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007214:	4b26      	ldr	r3, [pc, #152]	; (80072b0 <prvAddNewTaskToReadyList+0xc0>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d110      	bne.n	800723e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800721c:	f000 fbc8 	bl	80079b0 <prvInitialiseTaskLists>
 8007220:	e00d      	b.n	800723e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007222:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <prvAddNewTaskToReadyList+0xc8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d109      	bne.n	800723e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800722a:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <prvAddNewTaskToReadyList+0xc4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	429a      	cmp	r2, r3
 8007236:	d802      	bhi.n	800723e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007238:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <prvAddNewTaskToReadyList+0xc4>)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800723e:	4b1f      	ldr	r3, [pc, #124]	; (80072bc <prvAddNewTaskToReadyList+0xcc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <prvAddNewTaskToReadyList+0xcc>)
 8007246:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007248:	4b1c      	ldr	r3, [pc, #112]	; (80072bc <prvAddNewTaskToReadyList+0xcc>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	2201      	movs	r2, #1
 8007256:	409a      	lsls	r2, r3
 8007258:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <prvAddNewTaskToReadyList+0xd0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4313      	orrs	r3, r2
 800725e:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <prvAddNewTaskToReadyList+0xd0>)
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <prvAddNewTaskToReadyList+0xd4>)
 8007270:	441a      	add	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7ff f856 	bl	800632a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800727e:	f001 fabb 	bl	80087f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <prvAddNewTaskToReadyList+0xc8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <prvAddNewTaskToReadyList+0xc4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	429a      	cmp	r2, r3
 8007296:	d207      	bcs.n	80072a8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007298:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <prvAddNewTaskToReadyList+0xd8>)
 800729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000804 	.word	0x20000804
 80072b4:	2000072c 	.word	0x2000072c
 80072b8:	20000810 	.word	0x20000810
 80072bc:	20000820 	.word	0x20000820
 80072c0:	2000080c 	.word	0x2000080c
 80072c4:	20000730 	.word	0x20000730
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80072d2:	4b20      	ldr	r3, [pc, #128]	; (8007354 <vTaskStartScheduler+0x88>)
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	2300      	movs	r3, #0
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	2300      	movs	r3, #0
 80072dc:	2282      	movs	r2, #130	; 0x82
 80072de:	491e      	ldr	r1, [pc, #120]	; (8007358 <vTaskStartScheduler+0x8c>)
 80072e0:	481e      	ldr	r0, [pc, #120]	; (800735c <vTaskStartScheduler+0x90>)
 80072e2:	f7ff fead 	bl	8007040 <xTaskCreate>
 80072e6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d102      	bne.n	80072f4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80072ee:	f000 fe0f 	bl	8007f10 <xTimerCreateTimerTask>
 80072f2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d116      	bne.n	8007328 <vTaskStartScheduler+0x5c>
        __asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	60bb      	str	r3, [r7, #8]
    }
 800730c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800730e:	4b14      	ldr	r3, [pc, #80]	; (8007360 <vTaskStartScheduler+0x94>)
 8007310:	f04f 32ff 	mov.w	r2, #4294967295
 8007314:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007316:	4b13      	ldr	r3, [pc, #76]	; (8007364 <vTaskStartScheduler+0x98>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800731c:	4b12      	ldr	r3, [pc, #72]	; (8007368 <vTaskStartScheduler+0x9c>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007322:	f001 f997 	bl	8008654 <xPortStartScheduler>
 8007326:	e00e      	b.n	8007346 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d10a      	bne.n	8007346 <vTaskStartScheduler+0x7a>
        __asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	607b      	str	r3, [r7, #4]
    }
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <vTaskStartScheduler+0xa0>)
 8007348:	681b      	ldr	r3, [r3, #0]
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000828 	.word	0x20000828
 8007358:	08009a20 	.word	0x08009a20
 800735c:	08007981 	.word	0x08007981
 8007360:	20000824 	.word	0x20000824
 8007364:	20000810 	.word	0x20000810
 8007368:	20000808 	.word	0x20000808
 800736c:	20000020 	.word	0x20000020

08007370 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007374:	4b04      	ldr	r3, [pc, #16]	; (8007388 <vTaskSuspendAll+0x18>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3301      	adds	r3, #1
 800737a:	4a03      	ldr	r2, [pc, #12]	; (8007388 <vTaskSuspendAll+0x18>)
 800737c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800737e:	bf00      	nop
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	2000082c 	.word	0x2000082c

0800738c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007396:	2300      	movs	r3, #0
 8007398:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800739a:	4b41      	ldr	r3, [pc, #260]	; (80074a0 <xTaskResumeAll+0x114>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	603b      	str	r3, [r7, #0]
    }
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80073b8:	f001 f9ee 	bl	8008798 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80073bc:	4b38      	ldr	r3, [pc, #224]	; (80074a0 <xTaskResumeAll+0x114>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4a37      	ldr	r2, [pc, #220]	; (80074a0 <xTaskResumeAll+0x114>)
 80073c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <xTaskResumeAll+0x114>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d161      	bne.n	8007492 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073ce:	4b35      	ldr	r3, [pc, #212]	; (80074a4 <xTaskResumeAll+0x118>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d05d      	beq.n	8007492 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073d6:	e02e      	b.n	8007436 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d8:	4b33      	ldr	r3, [pc, #204]	; (80074a8 <xTaskResumeAll+0x11c>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3318      	adds	r3, #24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fffd 	bl	80063e4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fff8 	bl	80063e4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	2201      	movs	r2, #1
 80073fa:	409a      	lsls	r2, r3
 80073fc:	4b2b      	ldr	r3, [pc, #172]	; (80074ac <xTaskResumeAll+0x120>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4313      	orrs	r3, r2
 8007402:	4a2a      	ldr	r2, [pc, #168]	; (80074ac <xTaskResumeAll+0x120>)
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4a27      	ldr	r2, [pc, #156]	; (80074b0 <xTaskResumeAll+0x124>)
 8007414:	441a      	add	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3304      	adds	r3, #4
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7fe ff84 	bl	800632a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007426:	4b23      	ldr	r3, [pc, #140]	; (80074b4 <xTaskResumeAll+0x128>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	429a      	cmp	r2, r3
 800742e:	d302      	bcc.n	8007436 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8007430:	4b21      	ldr	r3, [pc, #132]	; (80074b8 <xTaskResumeAll+0x12c>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007436:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <xTaskResumeAll+0x11c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1cc      	bne.n	80073d8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007444:	f000 fb32 	bl	8007aac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007448:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <xTaskResumeAll+0x130>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d010      	beq.n	8007476 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007454:	f000 f846 	bl	80074e4 <xTaskIncrementTick>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800745e:	4b16      	ldr	r3, [pc, #88]	; (80074b8 <xTaskResumeAll+0x12c>)
 8007460:	2201      	movs	r2, #1
 8007462:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3b01      	subs	r3, #1
 8007468:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f1      	bne.n	8007454 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8007470:	4b12      	ldr	r3, [pc, #72]	; (80074bc <xTaskResumeAll+0x130>)
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <xTaskResumeAll+0x12c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800747e:	2301      	movs	r3, #1
 8007480:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <xTaskResumeAll+0x134>)
 8007484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007492:	f001 f9b1 	bl	80087f8 <vPortExitCritical>

    return xAlreadyYielded;
 8007496:	68bb      	ldr	r3, [r7, #8]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	2000082c 	.word	0x2000082c
 80074a4:	20000804 	.word	0x20000804
 80074a8:	200007c4 	.word	0x200007c4
 80074ac:	2000080c 	.word	0x2000080c
 80074b0:	20000730 	.word	0x20000730
 80074b4:	2000072c 	.word	0x2000072c
 80074b8:	20000818 	.word	0x20000818
 80074bc:	20000814 	.word	0x20000814
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80074ca:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <xTaskGetTickCount+0x1c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80074d0:	687b      	ldr	r3, [r7, #4]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000808 	.word	0x20000808

080074e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ee:	4b4e      	ldr	r3, [pc, #312]	; (8007628 <xTaskIncrementTick+0x144>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f040 808e 	bne.w	8007614 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074f8:	4b4c      	ldr	r3, [pc, #304]	; (800762c <xTaskIncrementTick+0x148>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007500:	4a4a      	ldr	r2, [pc, #296]	; (800762c <xTaskIncrementTick+0x148>)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d120      	bne.n	800754e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800750c:	4b48      	ldr	r3, [pc, #288]	; (8007630 <xTaskIncrementTick+0x14c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <xTaskIncrementTick+0x48>
        __asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	603b      	str	r3, [r7, #0]
    }
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <xTaskIncrementTick+0x46>
 800752c:	4b40      	ldr	r3, [pc, #256]	; (8007630 <xTaskIncrementTick+0x14c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	4b40      	ldr	r3, [pc, #256]	; (8007634 <xTaskIncrementTick+0x150>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a3e      	ldr	r2, [pc, #248]	; (8007630 <xTaskIncrementTick+0x14c>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4a3e      	ldr	r2, [pc, #248]	; (8007634 <xTaskIncrementTick+0x150>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	4b3d      	ldr	r3, [pc, #244]	; (8007638 <xTaskIncrementTick+0x154>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	4a3c      	ldr	r2, [pc, #240]	; (8007638 <xTaskIncrementTick+0x154>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	f000 faaf 	bl	8007aac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800754e:	4b3b      	ldr	r3, [pc, #236]	; (800763c <xTaskIncrementTick+0x158>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d348      	bcc.n	80075ea <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007558:	4b35      	ldr	r3, [pc, #212]	; (8007630 <xTaskIncrementTick+0x14c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <xTaskIncrementTick+0x158>)
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	601a      	str	r2, [r3, #0]
                    break;
 800756a:	e03e      	b.n	80075ea <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756c:	4b30      	ldr	r3, [pc, #192]	; (8007630 <xTaskIncrementTick+0x14c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d203      	bcs.n	800758c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007584:	4a2d      	ldr	r2, [pc, #180]	; (800763c <xTaskIncrementTick+0x158>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800758a:	e02e      	b.n	80075ea <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe ff27 	bl	80063e4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	3318      	adds	r3, #24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe ff1e 	bl	80063e4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	4b23      	ldr	r3, [pc, #140]	; (8007640 <xTaskIncrementTick+0x15c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	4a22      	ldr	r2, [pc, #136]	; (8007640 <xTaskIncrementTick+0x15c>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <xTaskIncrementTick+0x160>)
 80075c8:	441a      	add	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe feaa 	bl	800632a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <xTaskIncrementTick+0x164>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3b9      	bcc.n	8007558 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e8:	e7b6      	b.n	8007558 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <xTaskIncrementTick+0x164>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4914      	ldr	r1, [pc, #80]	; (8007644 <xTaskIncrementTick+0x160>)
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d901      	bls.n	8007606 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8007602:	2301      	movs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <xTaskIncrementTick+0x168>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800760e:	2301      	movs	r3, #1
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	e004      	b.n	800761e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007614:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <xTaskIncrementTick+0x16c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3301      	adds	r3, #1
 800761a:	4a0d      	ldr	r2, [pc, #52]	; (8007650 <xTaskIncrementTick+0x16c>)
 800761c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	2000082c 	.word	0x2000082c
 800762c:	20000808 	.word	0x20000808
 8007630:	200007bc 	.word	0x200007bc
 8007634:	200007c0 	.word	0x200007c0
 8007638:	2000081c 	.word	0x2000081c
 800763c:	20000824 	.word	0x20000824
 8007640:	2000080c 	.word	0x2000080c
 8007644:	20000730 	.word	0x20000730
 8007648:	2000072c 	.word	0x2000072c
 800764c:	20000818 	.word	0x20000818
 8007650:	20000814 	.word	0x20000814

08007654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800765a:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <vTaskSwitchContext+0xa4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007662:	4b26      	ldr	r3, [pc, #152]	; (80076fc <vTaskSwitchContext+0xa8>)
 8007664:	2201      	movs	r2, #1
 8007666:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007668:	e03f      	b.n	80076ea <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <vTaskSwitchContext+0xa8>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007670:	4b23      	ldr	r3, [pc, #140]	; (8007700 <vTaskSwitchContext+0xac>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	fab3 f383 	clz	r3, r3
 800767c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	f1c3 031f 	rsb	r3, r3, #31
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	491f      	ldr	r1, [pc, #124]	; (8007704 <vTaskSwitchContext+0xb0>)
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	607b      	str	r3, [r7, #4]
    }
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vTaskSwitchContext+0x5a>
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4a12      	ldr	r2, [pc, #72]	; (8007704 <vTaskSwitchContext+0xb0>)
 80076bc:	4413      	add	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	3308      	adds	r3, #8
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d104      	bne.n	80076e0 <vTaskSwitchContext+0x8c>
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	605a      	str	r2, [r3, #4]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	4a08      	ldr	r2, [pc, #32]	; (8007708 <vTaskSwitchContext+0xb4>)
 80076e8:	6013      	str	r3, [r2, #0]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	2000082c 	.word	0x2000082c
 80076fc:	20000818 	.word	0x20000818
 8007700:	2000080c 	.word	0x2000080c
 8007704:	20000730 	.word	0x20000730
 8007708:	2000072c 	.word	0x2000072c

0800770c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
    }
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007732:	4b07      	ldr	r3, [pc, #28]	; (8007750 <vTaskPlaceOnEventList+0x44>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3318      	adds	r3, #24
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fe fe19 	bl	8006372 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007740:	2101      	movs	r1, #1
 8007742:	6838      	ldr	r0, [r7, #0]
 8007744:	f000 fb7e 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	2000072c 	.word	0x2000072c

08007754 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	617b      	str	r3, [r7, #20]
    }
 8007778:	bf00      	nop
 800777a:	e7fe      	b.n	800777a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3318      	adds	r3, #24
 8007782:	4619      	mov	r1, r3
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7fe fdd0 	bl	800632a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007790:	f04f 33ff 	mov.w	r3, #4294967295
 8007794:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	68b8      	ldr	r0, [r7, #8]
 800779a:	f000 fb53 	bl	8007e44 <prvAddCurrentTaskToDelayedList>
    }
 800779e:	bf00      	nop
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	2000072c 	.word	0x2000072c

080077ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	60fb      	str	r3, [r7, #12]
    }
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3318      	adds	r3, #24
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe fe01 	bl	80063e4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077e2:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <xTaskRemoveFromEventList+0xac>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11c      	bne.n	8007824 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3304      	adds	r3, #4
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fdf8 	bl	80063e4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	2201      	movs	r2, #1
 80077fa:	409a      	lsls	r2, r3
 80077fc:	4b17      	ldr	r3, [pc, #92]	; (800785c <xTaskRemoveFromEventList+0xb0>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4313      	orrs	r3, r2
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <xTaskRemoveFromEventList+0xb0>)
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4a13      	ldr	r2, [pc, #76]	; (8007860 <xTaskRemoveFromEventList+0xb4>)
 8007814:	441a      	add	r2, r3
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	3304      	adds	r3, #4
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f7fe fd84 	bl	800632a <vListInsertEnd>
 8007822:	e005      	b.n	8007830 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	3318      	adds	r3, #24
 8007828:	4619      	mov	r1, r3
 800782a:	480e      	ldr	r0, [pc, #56]	; (8007864 <xTaskRemoveFromEventList+0xb8>)
 800782c:	f7fe fd7d 	bl	800632a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <xTaskRemoveFromEventList+0xbc>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	429a      	cmp	r2, r3
 800783c:	d905      	bls.n	800784a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800783e:	2301      	movs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007842:	4b0a      	ldr	r3, [pc, #40]	; (800786c <xTaskRemoveFromEventList+0xc0>)
 8007844:	2201      	movs	r2, #1
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e001      	b.n	800784e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800784e:	697b      	ldr	r3, [r7, #20]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	2000082c 	.word	0x2000082c
 800785c:	2000080c 	.word	0x2000080c
 8007860:	20000730 	.word	0x20000730
 8007864:	200007c4 	.word	0x200007c4
 8007868:	2000072c 	.word	0x2000072c
 800786c:	20000818 	.word	0x20000818

08007870 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007878:	4b06      	ldr	r3, [pc, #24]	; (8007894 <vTaskInternalSetTimeOutState+0x24>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <vTaskInternalSetTimeOutState+0x28>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	605a      	str	r2, [r3, #4]
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	2000081c 	.word	0x2000081c
 8007898:	20000808 	.word	0x20000808

0800789c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	613b      	str	r3, [r7, #16]
    }
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
    }
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80078de:	f000 ff5b 	bl	8008798 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80078e2:	4b1f      	ldr	r3, [pc, #124]	; (8007960 <xTaskCheckForTimeOut+0xc4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d102      	bne.n	8007902 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e026      	b.n	8007950 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b17      	ldr	r3, [pc, #92]	; (8007964 <xTaskCheckForTimeOut+0xc8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d00a      	beq.n	8007924 <xTaskCheckForTimeOut+0x88>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	429a      	cmp	r2, r3
 8007916:	d305      	bcc.n	8007924 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e015      	b.n	8007950 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	429a      	cmp	r2, r3
 800792c:	d20b      	bcs.n	8007946 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1ad2      	subs	r2, r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff ff98 	bl	8007870 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007940:	2300      	movs	r3, #0
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e004      	b.n	8007950 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007950:	f000 ff52 	bl	80087f8 <vPortExitCritical>

    return xReturn;
 8007954:	69fb      	ldr	r3, [r7, #28]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000808 	.word	0x20000808
 8007964:	2000081c 	.word	0x2000081c

08007968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800796c:	4b03      	ldr	r3, [pc, #12]	; (800797c <vTaskMissedYield+0x14>)
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
}
 8007972:	bf00      	nop
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	20000818 	.word	0x20000818

08007980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007988:	f000 f852 	bl	8007a30 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <prvIdleTask+0x28>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d9f9      	bls.n	8007988 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <prvIdleTask+0x2c>)
 8007996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80079a4:	e7f0      	b.n	8007988 <prvIdleTask+0x8>
 80079a6:	bf00      	nop
 80079a8:	20000730 	.word	0x20000730
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079b6:	2300      	movs	r3, #0
 80079b8:	607b      	str	r3, [r7, #4]
 80079ba:	e00c      	b.n	80079d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4a12      	ldr	r2, [pc, #72]	; (8007a10 <prvInitialiseTaskLists+0x60>)
 80079c8:	4413      	add	r3, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fc80 	bl	80062d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3301      	adds	r3, #1
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d9ef      	bls.n	80079bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80079dc:	480d      	ldr	r0, [pc, #52]	; (8007a14 <prvInitialiseTaskLists+0x64>)
 80079de:	f7fe fc77 	bl	80062d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80079e2:	480d      	ldr	r0, [pc, #52]	; (8007a18 <prvInitialiseTaskLists+0x68>)
 80079e4:	f7fe fc74 	bl	80062d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80079e8:	480c      	ldr	r0, [pc, #48]	; (8007a1c <prvInitialiseTaskLists+0x6c>)
 80079ea:	f7fe fc71 	bl	80062d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80079ee:	480c      	ldr	r0, [pc, #48]	; (8007a20 <prvInitialiseTaskLists+0x70>)
 80079f0:	f7fe fc6e 	bl	80062d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80079f4:	480b      	ldr	r0, [pc, #44]	; (8007a24 <prvInitialiseTaskLists+0x74>)
 80079f6:	f7fe fc6b 	bl	80062d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80079fa:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <prvInitialiseTaskLists+0x78>)
 80079fc:	4a05      	ldr	r2, [pc, #20]	; (8007a14 <prvInitialiseTaskLists+0x64>)
 80079fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <prvInitialiseTaskLists+0x7c>)
 8007a02:	4a05      	ldr	r2, [pc, #20]	; (8007a18 <prvInitialiseTaskLists+0x68>)
 8007a04:	601a      	str	r2, [r3, #0]
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000730 	.word	0x20000730
 8007a14:	20000794 	.word	0x20000794
 8007a18:	200007a8 	.word	0x200007a8
 8007a1c:	200007c4 	.word	0x200007c4
 8007a20:	200007d8 	.word	0x200007d8
 8007a24:	200007f0 	.word	0x200007f0
 8007a28:	200007bc 	.word	0x200007bc
 8007a2c:	200007c0 	.word	0x200007c0

08007a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a36:	e019      	b.n	8007a6c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007a38:	f000 feae 	bl	8008798 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <prvCheckTasksWaitingTermination+0x50>)
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fccb 	bl	80063e4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <prvCheckTasksWaitingTermination+0x54>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	4a0b      	ldr	r2, [pc, #44]	; (8007a84 <prvCheckTasksWaitingTermination+0x54>)
 8007a56:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007a58:	4b0b      	ldr	r3, [pc, #44]	; (8007a88 <prvCheckTasksWaitingTermination+0x58>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	4a0a      	ldr	r2, [pc, #40]	; (8007a88 <prvCheckTasksWaitingTermination+0x58>)
 8007a60:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007a62:	f000 fec9 	bl	80087f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f810 	bl	8007a8c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <prvCheckTasksWaitingTermination+0x58>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e1      	bne.n	8007a38 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200007d8 	.word	0x200007d8
 8007a84:	20000804 	.word	0x20000804
 8007a88:	200007ec 	.word	0x200007ec

08007a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 f87f 	bl	8008b9c <vPortFree>
                vPortFree( pxTCB );
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f87c 	bl	8008b9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <prvResetNextTaskUnblockTime+0x30>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d104      	bne.n	8007ac4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <prvResetNextTaskUnblockTime+0x34>)
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007ac2:	e005      	b.n	8007ad0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ac4:	4b05      	ldr	r3, [pc, #20]	; (8007adc <prvResetNextTaskUnblockTime+0x30>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a04      	ldr	r2, [pc, #16]	; (8007ae0 <prvResetNextTaskUnblockTime+0x34>)
 8007ace:	6013      	str	r3, [r2, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	200007bc 	.word	0x200007bc
 8007ae0:	20000824 	.word	0x20000824

08007ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <xTaskGetSchedulerState+0x34>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d102      	bne.n	8007af8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007af2:	2301      	movs	r3, #1
 8007af4:	607b      	str	r3, [r7, #4]
 8007af6:	e008      	b.n	8007b0a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af8:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <xTaskGetSchedulerState+0x38>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007b00:	2302      	movs	r3, #2
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	e001      	b.n	8007b0a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007b0a:	687b      	ldr	r3, [r7, #4]
    }
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20000810 	.word	0x20000810
 8007b1c:	2000082c 	.word	0x2000082c

08007b20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d05e      	beq.n	8007bf4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3a:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <xTaskPriorityInherit+0xe0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d24e      	bcs.n	8007be2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db06      	blt.n	8007b5a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4c:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <xTaskPriorityInherit+0xe0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	f1c3 0205 	rsb	r2, r3, #5
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6959      	ldr	r1, [r3, #20]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <xTaskPriorityInherit+0xe4>)
 8007b6c:	4413      	add	r3, r2
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	d12f      	bne.n	8007bd2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fc34 	bl	80063e4 <uxListRemove>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	2201      	movs	r2, #1
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	43da      	mvns	r2, r3
 8007b8e:	4b1e      	ldr	r3, [pc, #120]	; (8007c08 <xTaskPriorityInherit+0xe8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4013      	ands	r3, r2
 8007b94:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <xTaskPriorityInherit+0xe8>)
 8007b96:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b98:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <xTaskPriorityInherit+0xe0>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	409a      	lsls	r2, r3
 8007baa:	4b17      	ldr	r3, [pc, #92]	; (8007c08 <xTaskPriorityInherit+0xe8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	4a15      	ldr	r2, [pc, #84]	; (8007c08 <xTaskPriorityInherit+0xe8>)
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4a10      	ldr	r2, [pc, #64]	; (8007c04 <xTaskPriorityInherit+0xe4>)
 8007bc2:	441a      	add	r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f7fe fbad 	bl	800632a <vListInsertEnd>
 8007bd0:	e004      	b.n	8007bdc <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <xTaskPriorityInherit+0xe0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	e008      	b.n	8007bf4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <xTaskPriorityInherit+0xe0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d201      	bcs.n	8007bf4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
    }
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000072c 	.word	0x2000072c
 8007c04:	20000730 	.word	0x20000730
 8007c08:	2000080c 	.word	0x2000080c

08007c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d063      	beq.n	8007cea <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007c22:	4b34      	ldr	r3, [pc, #208]	; (8007cf4 <xTaskPriorityDisinherit+0xe8>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d00a      	beq.n	8007c42 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60fb      	str	r3, [r7, #12]
    }
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	60bb      	str	r3, [r7, #8]
    }
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c64:	1e5a      	subs	r2, r3, #1
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d039      	beq.n	8007cea <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d135      	bne.n	8007cea <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fbae 	bl	80063e4 <uxListRemove>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	2201      	movs	r2, #1
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	43da      	mvns	r2, r3
 8007c9a:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <xTaskPriorityDisinherit+0xec>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <xTaskPriorityDisinherit+0xec>)
 8007ca2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	f1c3 0205 	rsb	r2, r3, #5
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <xTaskPriorityDisinherit+0xec>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <xTaskPriorityDisinherit+0xec>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4a09      	ldr	r2, [pc, #36]	; (8007cfc <xTaskPriorityDisinherit+0xf0>)
 8007cd8:	441a      	add	r2, r3
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7fe fb22 	bl	800632a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007cea:	697b      	ldr	r3, [r7, #20]
    }
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	2000072c 	.word	0x2000072c
 8007cf8:	2000080c 	.word	0x2000080c
 8007cfc:	20000730 	.word	0x20000730

08007d00 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d077      	beq.n	8007e08 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
    }
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d902      	bls.n	8007d46 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	61fb      	str	r3, [r7, #28]
 8007d44:	e002      	b.n	8007d4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	69fa      	ldr	r2, [r7, #28]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d058      	beq.n	8007e08 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d153      	bne.n	8007e08 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007d60:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d10a      	bne.n	8007d80 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	60bb      	str	r3, [r7, #8]
    }
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	db04      	blt.n	8007d9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f1c3 0205 	rsb	r2, r3, #5
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	6959      	ldr	r1, [r3, #20]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007dae:	4413      	add	r3, r2
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d129      	bne.n	8007e08 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fb13 	bl	80063e4 <uxListRemove>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	2201      	movs	r2, #1
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43da      	mvns	r2, r3
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	4a10      	ldr	r2, [pc, #64]	; (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007dd8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	2201      	movs	r2, #1
 8007de0:	409a      	lsls	r2, r3
 8007de2:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	4a0b      	ldr	r2, [pc, #44]	; (8007e18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4a06      	ldr	r2, [pc, #24]	; (8007e14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007dfa:	441a      	add	r2, r3
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fe fa91 	bl	800632a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007e08:	bf00      	nop
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	2000072c 	.word	0x2000072c
 8007e14:	20000730 	.word	0x20000730
 8007e18:	2000080c 	.word	0x2000080c

08007e1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e2e:	3201      	adds	r2, #1
 8007e30:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8007e32:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e34:	681b      	ldr	r3, [r3, #0]
    }
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	2000072c 	.word	0x2000072c

08007e44 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007e4e:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	4b28      	ldr	r3, [pc, #160]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fac2 	bl	80063e4 <uxListRemove>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e66:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	43da      	mvns	r2, r3
 8007e74:	4b21      	ldr	r3, [pc, #132]	; (8007efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	4a20      	ldr	r2, [pc, #128]	; (8007efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e84:	d10a      	bne.n	8007e9c <prvAddCurrentTaskToDelayedList+0x58>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4619      	mov	r1, r3
 8007e94:	481a      	ldr	r0, [pc, #104]	; (8007f00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e96:	f7fe fa48 	bl	800632a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007e9a:	e026      	b.n	8007eea <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ea4:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d209      	bcs.n	8007ec8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb4:	4b13      	ldr	r3, [pc, #76]	; (8007f04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7fe fa56 	bl	8006372 <vListInsert>
}
 8007ec6:	e010      	b.n	8007eea <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7fe fa4c 	bl	8006372 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d202      	bcs.n	8007eea <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007ee4:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6013      	str	r3, [r2, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000808 	.word	0x20000808
 8007ef8:	2000072c 	.word	0x2000072c
 8007efc:	2000080c 	.word	0x2000080c
 8007f00:	200007f0 	.word	0x200007f0
 8007f04:	200007c0 	.word	0x200007c0
 8007f08:	200007bc 	.word	0x200007bc
 8007f0c:	20000824 	.word	0x20000824

08007f10 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007f1a:	f000 fad5 	bl	80084c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <xTimerCreateTimerTask+0x54>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00b      	beq.n	8007f3e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <xTimerCreateTimerTask+0x58>)
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f34:	490d      	ldr	r1, [pc, #52]	; (8007f6c <xTimerCreateTimerTask+0x5c>)
 8007f36:	480e      	ldr	r0, [pc, #56]	; (8007f70 <xTimerCreateTimerTask+0x60>)
 8007f38:	f7ff f882 	bl	8007040 <xTaskCreate>
 8007f3c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	603b      	str	r3, [r7, #0]
    }
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007f5a:	687b      	ldr	r3, [r7, #4]
    }
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000860 	.word	0x20000860
 8007f68:	20000864 	.word	0x20000864
 8007f6c:	08009a28 	.word	0x08009a28
 8007f70:	080080a9 	.word	0x080080a9

08007f74 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	; 0x28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	623b      	str	r3, [r7, #32]
    }
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	; (800800c <xTimerGenericCommand+0x98>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d02a      	beq.n	8008000 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b05      	cmp	r3, #5
 8007fba:	dc18      	bgt.n	8007fee <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fbc:	f7ff fd92 	bl	8007ae4 <xTaskGetSchedulerState>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d109      	bne.n	8007fda <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <xTimerGenericCommand+0x98>)
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	f107 0114 	add.w	r1, r7, #20
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd2:	f7fe fb1b 	bl	800660c <xQueueGenericSend>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8007fd8:	e012      	b.n	8008000 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <xTimerGenericCommand+0x98>)
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	f107 0114 	add.w	r1, r7, #20
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f7fe fb11 	bl	800660c <xQueueGenericSend>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24
 8007fec:	e008      	b.n	8008000 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <xTimerGenericCommand+0x98>)
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f107 0114 	add.w	r1, r7, #20
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	f7fe fc05 	bl	8006808 <xQueueGenericSendFromISR>
 8007ffe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008002:	4618      	mov	r0, r3
 8008004:	3728      	adds	r7, #40	; 0x28
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20000860 	.word	0x20000860

08008010 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800801a:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <prvProcessExpiredTimer+0x94>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe f9db 	bl	80063e4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d022      	beq.n	8008082 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	699a      	ldr	r2, [r3, #24]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	18d1      	adds	r1, r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	6978      	ldr	r0, [r7, #20]
 800804a:	f000 f8d1 	bl	80081f0 <prvInsertTimerInActiveList>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01f      	beq.n	8008094 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008054:	2300      	movs	r3, #0
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2300      	movs	r3, #0
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	2100      	movs	r1, #0
 800805e:	6978      	ldr	r0, [r7, #20]
 8008060:	f7ff ff88 	bl	8007f74 <xTimerGenericCommand>
 8008064:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d113      	bne.n	8008094 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60fb      	str	r3, [r7, #12]
    }
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	b2da      	uxtb	r2, r3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	6978      	ldr	r0, [r7, #20]
 800809a:	4798      	blx	r3
    }
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000858 	.word	0x20000858

080080a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080b0:	f107 0308 	add.w	r3, r7, #8
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f857 	bl	8008168 <prvGetNextExpireTime>
 80080ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4619      	mov	r1, r3
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f803 	bl	80080cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80080c6:	f000 f8d5 	bl	8008274 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080ca:	e7f1      	b.n	80080b0 <prvTimerTask+0x8>

080080cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80080d6:	f7ff f94b 	bl	8007370 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f866 	bl	80081b0 <prvSampleTimeNow>
 80080e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d130      	bne.n	800814e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <prvProcessTimerOrBlockTask+0x3c>
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d806      	bhi.n	8008108 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80080fa:	f7ff f947 	bl	800738c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ff85 	bl	8008010 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008106:	e024      	b.n	8008152 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <prvProcessTimerOrBlockTask+0x90>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <prvProcessTimerOrBlockTask+0x50>
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <prvProcessTimerOrBlockTask+0x52>
 800811c:	2300      	movs	r3, #0
 800811e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008120:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <prvProcessTimerOrBlockTask+0x94>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	f7fe ff53 	bl	8006fd8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008132:	f7ff f92b 	bl	800738c <xTaskResumeAll>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800813c:	4b09      	ldr	r3, [pc, #36]	; (8008164 <prvProcessTimerOrBlockTask+0x98>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	f3bf 8f6f 	isb	sy
    }
 800814c:	e001      	b.n	8008152 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800814e:	f7ff f91d 	bl	800738c <xTaskResumeAll>
    }
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	2000085c 	.word	0x2000085c
 8008160:	20000860 	.word	0x20000860
 8008164:	e000ed04 	.word	0xe000ed04

08008168 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008170:	4b0e      	ldr	r3, [pc, #56]	; (80081ac <prvGetNextExpireTime+0x44>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <prvGetNextExpireTime+0x16>
 800817a:	2201      	movs	r2, #1
 800817c:	e000      	b.n	8008180 <prvGetNextExpireTime+0x18>
 800817e:	2200      	movs	r2, #0
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <prvGetNextExpireTime+0x44>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	e001      	b.n	800819c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800819c:	68fb      	ldr	r3, [r7, #12]
    }
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000858 	.word	0x20000858

080081b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80081b8:	f7ff f984 	bl	80074c4 <xTaskGetTickCount>
 80081bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <prvSampleTimeNow+0x3c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d205      	bcs.n	80081d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80081c8:	f000 f91a 	bl	8008400 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e002      	b.n	80081da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80081da:	4a04      	ldr	r2, [pc, #16]	; (80081ec <prvSampleTimeNow+0x3c>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80081e0:	68fb      	ldr	r3, [r7, #12]
    }
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000868 	.word	0x20000868

080081f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d812      	bhi.n	800823c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	1ad2      	subs	r2, r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	429a      	cmp	r2, r3
 8008222:	d302      	bcc.n	800822a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e01b      	b.n	8008262 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800822a:	4b10      	ldr	r3, [pc, #64]	; (800826c <prvInsertTimerInActiveList+0x7c>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3304      	adds	r3, #4
 8008232:	4619      	mov	r1, r3
 8008234:	4610      	mov	r0, r2
 8008236:	f7fe f89c 	bl	8006372 <vListInsert>
 800823a:	e012      	b.n	8008262 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d206      	bcs.n	8008252 <prvInsertTimerInActiveList+0x62>
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d302      	bcc.n	8008252 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e007      	b.n	8008262 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <prvInsertTimerInActiveList+0x80>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f7fe f888 	bl	8006372 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008262:	697b      	ldr	r3, [r7, #20]
    }
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	2000085c 	.word	0x2000085c
 8008270:	20000858 	.word	0x20000858

08008274 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008274:	b580      	push	{r7, lr}
 8008276:	b08c      	sub	sp, #48	; 0x30
 8008278:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800827a:	e0ae      	b.n	80083da <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f2c0 80aa 	blt.w	80083d8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe f8a5 	bl	80063e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff ff87 	bl	80081b0 <prvSampleTimeNow>
 80082a2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	f200 8097 	bhi.w	80083da <prvProcessReceivedCommands+0x166>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <prvProcessReceivedCommands+0x40>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	08008351 	.word	0x08008351
 80082c4:	08008365 	.word	0x08008365
 80082c8:	080083af 	.word	0x080083af
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082dd 	.word	0x080082dd
 80082d4:	08008351 	.word	0x08008351
 80082d8:	08008365 	.word	0x08008365
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	18d1      	adds	r1, r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a3a      	ldr	r2, [r7, #32]
 80082fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082fc:	f7ff ff78 	bl	80081f0 <prvInsertTimerInActiveList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d069      	beq.n	80083da <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800830c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d05e      	beq.n	80083da <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	441a      	add	r2, r3
 8008324:	2300      	movs	r3, #0
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	2100      	movs	r1, #0
 800832c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800832e:	f7ff fe21 	bl	8007f74 <xTimerGenericCommand>
 8008332:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d14f      	bne.n	80083da <prvProcessReceivedCommands+0x166>
        __asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	61bb      	str	r3, [r7, #24]
    }
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8008362:	e03a      	b.n	80083da <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	b2da      	uxtb	r2, r3
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	617b      	str	r3, [r7, #20]
    }
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	18d1      	adds	r1, r2, r3
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	6a3a      	ldr	r2, [r7, #32]
 80083a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083a8:	f7ff ff22 	bl	80081f0 <prvInsertTimerInActiveList>
                        break;
 80083ac:	e015      	b.n	80083da <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80083bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083be:	f000 fbed 	bl	8008b9c <vPortFree>
 80083c2:	e00a      	b.n	80083da <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ca:	f023 0301 	bic.w	r3, r3, #1
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80083d6:	e000      	b.n	80083da <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80083d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083da:	4b08      	ldr	r3, [pc, #32]	; (80083fc <prvProcessReceivedCommands+0x188>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f107 0108 	add.w	r1, r7, #8
 80083e2:	2200      	movs	r2, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fab9 	bl	800695c <xQueueReceive>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f47f af45 	bne.w	800827c <prvProcessReceivedCommands+0x8>
        }
    }
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	3728      	adds	r7, #40	; 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000860 	.word	0x20000860

08008400 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008406:	e048      	b.n	800849a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008408:	4b2d      	ldr	r3, [pc, #180]	; (80084c0 <prvSwitchTimerLists+0xc0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008412:	4b2b      	ldr	r3, [pc, #172]	; (80084c0 <prvSwitchTimerLists+0xc0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3304      	adds	r3, #4
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd ffdf 	bl	80063e4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d02e      	beq.n	800849a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d90e      	bls.n	800846c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800845a:	4b19      	ldr	r3, [pc, #100]	; (80084c0 <prvSwitchTimerLists+0xc0>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fd ff84 	bl	8006372 <vListInsert>
 800846a:	e016      	b.n	800849a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800846c:	2300      	movs	r3, #0
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fd7c 	bl	8007f74 <xTimerGenericCommand>
 800847c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	603b      	str	r3, [r7, #0]
    }
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800849a:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <prvSwitchTimerLists+0xc0>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1b1      	bne.n	8008408 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80084a4:	4b06      	ldr	r3, [pc, #24]	; (80084c0 <prvSwitchTimerLists+0xc0>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <prvSwitchTimerLists+0xc4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a04      	ldr	r2, [pc, #16]	; (80084c0 <prvSwitchTimerLists+0xc0>)
 80084b0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80084b2:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <prvSwitchTimerLists+0xc4>)
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6013      	str	r3, [r2, #0]
    }
 80084b8:	bf00      	nop
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000858 	.word	0x20000858
 80084c4:	2000085c 	.word	0x2000085c

080084c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80084cc:	f000 f964 	bl	8008798 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <prvCheckForValidListAndQueue+0x54>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d11d      	bne.n	8008514 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80084d8:	4811      	ldr	r0, [pc, #68]	; (8008520 <prvCheckForValidListAndQueue+0x58>)
 80084da:	f7fd fef9 	bl	80062d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80084de:	4811      	ldr	r0, [pc, #68]	; (8008524 <prvCheckForValidListAndQueue+0x5c>)
 80084e0:	f7fd fef6 	bl	80062d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <prvCheckForValidListAndQueue+0x60>)
 80084e6:	4a0e      	ldr	r2, [pc, #56]	; (8008520 <prvCheckForValidListAndQueue+0x58>)
 80084e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <prvCheckForValidListAndQueue+0x64>)
 80084ec:	4a0d      	ldr	r2, [pc, #52]	; (8008524 <prvCheckForValidListAndQueue+0x5c>)
 80084ee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80084f0:	2200      	movs	r2, #0
 80084f2:	210c      	movs	r1, #12
 80084f4:	200a      	movs	r0, #10
 80084f6:	f7fe f807 	bl	8006508 <xQueueGenericCreate>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4a07      	ldr	r2, [pc, #28]	; (800851c <prvCheckForValidListAndQueue+0x54>)
 80084fe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <prvCheckForValidListAndQueue+0x54>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <prvCheckForValidListAndQueue+0x54>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4908      	ldr	r1, [pc, #32]	; (8008530 <prvCheckForValidListAndQueue+0x68>)
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fd38 	bl	8006f84 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008514:	f000 f970 	bl	80087f8 <vPortExitCritical>
    }
 8008518:	bf00      	nop
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20000860 	.word	0x20000860
 8008520:	20000830 	.word	0x20000830
 8008524:	20000844 	.word	0x20000844
 8008528:	20000858 	.word	0x20000858
 800852c:	2000085c 	.word	0x2000085c
 8008530:	08009a30 	.word	0x08009a30

08008534 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3b04      	subs	r3, #4
 8008544:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800854c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3b04      	subs	r3, #4
 8008552:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f023 0201 	bic.w	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3b04      	subs	r3, #4
 8008562:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008564:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <pxPortInitialiseStack+0x64>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3b14      	subs	r3, #20
 800856e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3b04      	subs	r3, #4
 800857a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f06f 0202 	mvn.w	r2, #2
 8008582:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3b20      	subs	r3, #32
 8008588:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800858a:	68fb      	ldr	r3, [r7, #12]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	0800859d 	.word	0x0800859d

0800859c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80085a6:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <prvTaskExitError+0x54>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ae:	d00a      	beq.n	80085c6 <prvTaskExitError+0x2a>
        __asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60fb      	str	r3, [r7, #12]
    }
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <prvTaskExitError+0x28>
        __asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60bb      	str	r3, [r7, #8]
    }
 80085d8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80085da:	bf00      	nop
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0fc      	beq.n	80085dc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20000024 	.word	0x20000024
	...

08008600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008600:	4b07      	ldr	r3, [pc, #28]	; (8008620 <pxCurrentTCBConst2>)
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	6808      	ldr	r0, [r1, #0]
 8008606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860a:	f380 8809 	msr	PSP, r0
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8811 	msr	BASEPRI, r0
 800861a:	4770      	bx	lr
 800861c:	f3af 8000 	nop.w

08008620 <pxCurrentTCBConst2>:
 8008620:	2000072c 	.word	0x2000072c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop

08008628 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008628:	4808      	ldr	r0, [pc, #32]	; (800864c <prvPortStartFirstTask+0x24>)
 800862a:	6800      	ldr	r0, [r0, #0]
 800862c:	6800      	ldr	r0, [r0, #0]
 800862e:	f380 8808 	msr	MSP, r0
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8814 	msr	CONTROL, r0
 800863a:	b662      	cpsie	i
 800863c:	b661      	cpsie	f
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	df00      	svc	0
 8008648:	bf00      	nop
 800864a:	0000      	.short	0x0000
 800864c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop

08008654 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800865a:	4b46      	ldr	r3, [pc, #280]	; (8008774 <xPortStartScheduler+0x120>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a46      	ldr	r2, [pc, #280]	; (8008778 <xPortStartScheduler+0x124>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10a      	bne.n	800867a <xPortStartScheduler+0x26>
        __asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	613b      	str	r3, [r7, #16]
    }
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800867a:	4b3e      	ldr	r3, [pc, #248]	; (8008774 <xPortStartScheduler+0x120>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a3f      	ldr	r2, [pc, #252]	; (800877c <xPortStartScheduler+0x128>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d10a      	bne.n	800869a <xPortStartScheduler+0x46>
        __asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	60fb      	str	r3, [r7, #12]
    }
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800869a:	4b39      	ldr	r3, [pc, #228]	; (8008780 <xPortStartScheduler+0x12c>)
 800869c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	4b31      	ldr	r3, [pc, #196]	; (8008784 <xPortStartScheduler+0x130>)
 80086c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086c2:	4b31      	ldr	r3, [pc, #196]	; (8008788 <xPortStartScheduler+0x134>)
 80086c4:	2207      	movs	r2, #7
 80086c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086c8:	e009      	b.n	80086de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80086ca:	4b2f      	ldr	r3, [pc, #188]	; (8008788 <xPortStartScheduler+0x134>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	4a2d      	ldr	r2, [pc, #180]	; (8008788 <xPortStartScheduler+0x134>)
 80086d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e6:	2b80      	cmp	r3, #128	; 0x80
 80086e8:	d0ef      	beq.n	80086ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ea:	4b27      	ldr	r3, [pc, #156]	; (8008788 <xPortStartScheduler+0x134>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1c3 0307 	rsb	r3, r3, #7
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d00a      	beq.n	800870c <xPortStartScheduler+0xb8>
        __asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60bb      	str	r3, [r7, #8]
    }
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800870c:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <xPortStartScheduler+0x134>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	4a1d      	ldr	r2, [pc, #116]	; (8008788 <xPortStartScheduler+0x134>)
 8008714:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008716:	4b1c      	ldr	r3, [pc, #112]	; (8008788 <xPortStartScheduler+0x134>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800871e:	4a1a      	ldr	r2, [pc, #104]	; (8008788 <xPortStartScheduler+0x134>)
 8008720:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800872a:	4b18      	ldr	r3, [pc, #96]	; (800878c <xPortStartScheduler+0x138>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a17      	ldr	r2, [pc, #92]	; (800878c <xPortStartScheduler+0x138>)
 8008730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008734:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008736:	4b15      	ldr	r3, [pc, #84]	; (800878c <xPortStartScheduler+0x138>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a14      	ldr	r2, [pc, #80]	; (800878c <xPortStartScheduler+0x138>)
 800873c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008740:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008742:	f000 f8db 	bl	80088fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008746:	4b12      	ldr	r3, [pc, #72]	; (8008790 <xPortStartScheduler+0x13c>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800874c:	f000 f8fa 	bl	8008944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008750:	4b10      	ldr	r3, [pc, #64]	; (8008794 <xPortStartScheduler+0x140>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a0f      	ldr	r2, [pc, #60]	; (8008794 <xPortStartScheduler+0x140>)
 8008756:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800875a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800875c:	f7ff ff64 	bl	8008628 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008760:	f7fe ff78 	bl	8007654 <vTaskSwitchContext>
    prvTaskExitError();
 8008764:	f7ff ff1a 	bl	800859c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	e000ed00 	.word	0xe000ed00
 8008778:	410fc271 	.word	0x410fc271
 800877c:	410fc270 	.word	0x410fc270
 8008780:	e000e400 	.word	0xe000e400
 8008784:	2000086c 	.word	0x2000086c
 8008788:	20000870 	.word	0x20000870
 800878c:	e000ed20 	.word	0xe000ed20
 8008790:	20000024 	.word	0x20000024
 8008794:	e000ef34 	.word	0xe000ef34

08008798 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
        __asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
    }
 80087b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <vPortEnterCritical+0x58>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3301      	adds	r3, #1
 80087b8:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <vPortEnterCritical+0x58>)
 80087ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <vPortEnterCritical+0x58>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d10f      	bne.n	80087e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087c4:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <vPortEnterCritical+0x5c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	603b      	str	r3, [r7, #0]
    }
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <vPortEnterCritical+0x4a>
    }
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000024 	.word	0x20000024
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <vPortExitCritical+0x50>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <vPortExitCritical+0x24>
        __asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	607b      	str	r3, [r7, #4]
    }
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800881c:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <vPortExitCritical+0x50>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3b01      	subs	r3, #1
 8008822:	4a09      	ldr	r2, [pc, #36]	; (8008848 <vPortExitCritical+0x50>)
 8008824:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008826:	4b08      	ldr	r3, [pc, #32]	; (8008848 <vPortExitCritical+0x50>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <vPortExitCritical+0x42>
 800882e:	2300      	movs	r3, #0
 8008830:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	f383 8811 	msr	BASEPRI, r3
    }
 8008838:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	20000024 	.word	0x20000024
 800884c:	00000000 	.word	0x00000000

08008850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008850:	f3ef 8009 	mrs	r0, PSP
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <pxCurrentTCBConst>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	f01e 0f10 	tst.w	lr, #16
 8008860:	bf08      	it	eq
 8008862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886a:	6010      	str	r0, [r2, #0]
 800886c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008874:	f380 8811 	msr	BASEPRI, r0
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f7fe fee8 	bl	8007654 <vTaskSwitchContext>
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	f380 8811 	msr	BASEPRI, r0
 800888c:	bc09      	pop	{r0, r3}
 800888e:	6819      	ldr	r1, [r3, #0]
 8008890:	6808      	ldr	r0, [r1, #0]
 8008892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008896:	f01e 0f10 	tst.w	lr, #16
 800889a:	bf08      	it	eq
 800889c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088a0:	f380 8809 	msr	PSP, r0
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst>:
 80088b0:	2000072c 	.word	0x2000072c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
        __asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
    }
 80088d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80088d2:	f7fe fe07 	bl	80074e4 <xTaskIncrementTick>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088dc:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <SysTick_Handler+0x40>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	2300      	movs	r3, #0
 80088e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	f383 8811 	msr	BASEPRI, r3
    }
 80088ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <vPortSetupTimerInterrupt+0x34>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008906:	4b0b      	ldr	r3, [pc, #44]	; (8008934 <vPortSetupTimerInterrupt+0x38>)
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <vPortSetupTimerInterrupt+0x3c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <vPortSetupTimerInterrupt+0x40>)
 8008912:	fba2 2303 	umull	r2, r3, r2, r3
 8008916:	099b      	lsrs	r3, r3, #6
 8008918:	4a09      	ldr	r2, [pc, #36]	; (8008940 <vPortSetupTimerInterrupt+0x44>)
 800891a:	3b01      	subs	r3, #1
 800891c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800891e:	4b04      	ldr	r3, [pc, #16]	; (8008930 <vPortSetupTimerInterrupt+0x34>)
 8008920:	2207      	movs	r2, #7
 8008922:	601a      	str	r2, [r3, #0]
}
 8008924:	bf00      	nop
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	e000e010 	.word	0xe000e010
 8008934:	e000e018 	.word	0xe000e018
 8008938:	20000014 	.word	0x20000014
 800893c:	10624dd3 	.word	0x10624dd3
 8008940:	e000e014 	.word	0xe000e014

08008944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008954 <vPortEnableVFP+0x10>
 8008948:	6801      	ldr	r1, [r0, #0]
 800894a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800894e:	6001      	str	r1, [r0, #0]
 8008950:	4770      	bx	lr
 8008952:	0000      	.short	0x0000
 8008954:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop

0800895c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008962:	f3ef 8305 	mrs	r3, IPSR
 8008966:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d914      	bls.n	8008998 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800896e:	4a17      	ldr	r2, [pc, #92]	; (80089cc <vPortValidateInterruptPriority+0x70>)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <vPortValidateInterruptPriority+0x74>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	7afa      	ldrb	r2, [r7, #11]
 800897e:	429a      	cmp	r2, r3
 8008980:	d20a      	bcs.n	8008998 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	607b      	str	r3, [r7, #4]
    }
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008998:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <vPortValidateInterruptPriority+0x78>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <vPortValidateInterruptPriority+0x7c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d90a      	bls.n	80089be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	603b      	str	r3, [r7, #0]
    }
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <vPortValidateInterruptPriority+0x60>
    }
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	e000e3f0 	.word	0xe000e3f0
 80089d0:	2000086c 	.word	0x2000086c
 80089d4:	e000ed0c 	.word	0xe000ed0c
 80089d8:	20000870 	.word	0x20000870

080089dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80089e8:	f7fe fcc2 	bl	8007370 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80089ec:	4b65      	ldr	r3, [pc, #404]	; (8008b84 <pvPortMalloc+0x1a8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80089f4:	f000 f934 	bl	8008c60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089f8:	4b63      	ldr	r3, [pc, #396]	; (8008b88 <pvPortMalloc+0x1ac>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 80a7 	bne.w	8008b54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d02d      	beq.n	8008a68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d227      	bcs.n	8008a68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008a18:	2208      	movs	r2, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d021      	beq.n	8008a6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f023 0307 	bic.w	r3, r3, #7
 8008a30:	3308      	adds	r3, #8
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d214      	bcs.n	8008a62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f023 0307 	bic.w	r3, r3, #7
 8008a3e:	3308      	adds	r3, #8
 8008a40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d010      	beq.n	8008a6e <pvPortMalloc+0x92>
        __asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	617b      	str	r3, [r7, #20]
    }
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a66:	e002      	b.n	8008a6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	e000      	b.n	8008a70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d06e      	beq.n	8008b54 <pvPortMalloc+0x178>
 8008a76:	4b45      	ldr	r3, [pc, #276]	; (8008b8c <pvPortMalloc+0x1b0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d869      	bhi.n	8008b54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008a80:	4b43      	ldr	r3, [pc, #268]	; (8008b90 <pvPortMalloc+0x1b4>)
 8008a82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008a84:	4b42      	ldr	r3, [pc, #264]	; (8008b90 <pvPortMalloc+0x1b4>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8a:	e004      	b.n	8008a96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d903      	bls.n	8008aa8 <pvPortMalloc+0xcc>
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f1      	bne.n	8008a8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008aa8:	4b36      	ldr	r3, [pc, #216]	; (8008b84 <pvPortMalloc+0x1a8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d050      	beq.n	8008b54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2208      	movs	r2, #8
 8008ab8:	4413      	add	r3, r2
 8008aba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	1ad2      	subs	r2, r2, r3
 8008acc:	2308      	movs	r3, #8
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d91f      	bls.n	8008b14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <pvPortMalloc+0x120>
        __asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	613b      	str	r3, [r7, #16]
    }
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	1ad2      	subs	r2, r2, r3
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b0e:	69b8      	ldr	r0, [r7, #24]
 8008b10:	f000 f908 	bl	8008d24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b14:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <pvPortMalloc+0x1b0>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <pvPortMalloc+0x1b0>)
 8008b20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <pvPortMalloc+0x1b0>)
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <pvPortMalloc+0x1b8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d203      	bcs.n	8008b36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b2e:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <pvPortMalloc+0x1b0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <pvPortMalloc+0x1b8>)
 8008b34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <pvPortMalloc+0x1ac>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008b4a:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <pvPortMalloc+0x1bc>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <pvPortMalloc+0x1bc>)
 8008b52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008b54:	f7fe fc1a 	bl	800738c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <pvPortMalloc+0x19c>
        __asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60fb      	str	r3, [r7, #12]
    }
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <pvPortMalloc+0x19a>
    return pvReturn;
 8008b78:	69fb      	ldr	r3, [r7, #28]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3728      	adds	r7, #40	; 0x28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	2001347c 	.word	0x2001347c
 8008b88:	20013490 	.word	0x20013490
 8008b8c:	20013480 	.word	0x20013480
 8008b90:	20013474 	.word	0x20013474
 8008b94:	20013484 	.word	0x20013484
 8008b98:	20013488 	.word	0x20013488

08008b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d04d      	beq.n	8008c4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008bae:	2308      	movs	r3, #8
 8008bb0:	425b      	negs	r3, r3
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	4b24      	ldr	r3, [pc, #144]	; (8008c54 <vPortFree+0xb8>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <vPortFree+0x44>
        __asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	60fb      	str	r3, [r7, #12]
    }
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <vPortFree+0x62>
        __asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	60bb      	str	r3, [r7, #8]
    }
 8008bfa:	bf00      	nop
 8008bfc:	e7fe      	b.n	8008bfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <vPortFree+0xb8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4013      	ands	r3, r2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01e      	beq.n	8008c4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11a      	bne.n	8008c4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <vPortFree+0xb8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	401a      	ands	r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008c24:	f7fe fba4 	bl	8007370 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <vPortFree+0xbc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4413      	add	r3, r2
 8008c32:	4a09      	ldr	r2, [pc, #36]	; (8008c58 <vPortFree+0xbc>)
 8008c34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f000 f874 	bl	8008d24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008c3c:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <vPortFree+0xc0>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	4a06      	ldr	r2, [pc, #24]	; (8008c5c <vPortFree+0xc0>)
 8008c44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008c46:	f7fe fba1 	bl	800738c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20013490 	.word	0x20013490
 8008c58:	20013480 	.word	0x20013480
 8008c5c:	2001348c 	.word	0x2001348c

08008c60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008c6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008c6c:	4b27      	ldr	r3, [pc, #156]	; (8008d0c <prvHeapInit+0xac>)
 8008c6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00c      	beq.n	8008c94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0307 	bic.w	r3, r3, #7
 8008c86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	4a1f      	ldr	r2, [pc, #124]	; (8008d0c <prvHeapInit+0xac>)
 8008c90:	4413      	add	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c98:	4a1d      	ldr	r2, [pc, #116]	; (8008d10 <prvHeapInit+0xb0>)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008c9e:	4b1c      	ldr	r3, [pc, #112]	; (8008d10 <prvHeapInit+0xb0>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008cac:	2208      	movs	r2, #8
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <prvHeapInit+0xb4>)
 8008cc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008cc2:	4b14      	ldr	r3, [pc, #80]	; (8008d14 <prvHeapInit+0xb4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <prvHeapInit+0xb4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	1ad2      	subs	r2, r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <prvHeapInit+0xb4>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4a0a      	ldr	r2, [pc, #40]	; (8008d18 <prvHeapInit+0xb8>)
 8008cee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <prvHeapInit+0xbc>)
 8008cf6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <prvHeapInit+0xc0>)
 8008cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cfe:	601a      	str	r2, [r3, #0]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000874 	.word	0x20000874
 8008d10:	20013474 	.word	0x20013474
 8008d14:	2001347c 	.word	0x2001347c
 8008d18:	20013484 	.word	0x20013484
 8008d1c:	20013480 	.word	0x20013480
 8008d20:	20013490 	.word	0x20013490

08008d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d2c:	4b28      	ldr	r3, [pc, #160]	; (8008dd0 <prvInsertBlockIntoFreeList+0xac>)
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e002      	b.n	8008d38 <prvInsertBlockIntoFreeList+0x14>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d8f7      	bhi.n	8008d32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d108      	bne.n	8008d66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	441a      	add	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	441a      	add	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d118      	bne.n	8008dac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d00d      	beq.n	8008da2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	e008      	b.n	8008db4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008da2:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e003      	b.n	8008db4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d002      	beq.n	8008dc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20013474 	.word	0x20013474
 8008dd4:	2001347c 	.word	0x2001347c

08008dd8 <__errno>:
 8008dd8:	4b01      	ldr	r3, [pc, #4]	; (8008de0 <__errno+0x8>)
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000028 	.word	0x20000028

08008de4 <__libc_init_array>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	4d0d      	ldr	r5, [pc, #52]	; (8008e1c <__libc_init_array+0x38>)
 8008de8:	4c0d      	ldr	r4, [pc, #52]	; (8008e20 <__libc_init_array+0x3c>)
 8008dea:	1b64      	subs	r4, r4, r5
 8008dec:	10a4      	asrs	r4, r4, #2
 8008dee:	2600      	movs	r6, #0
 8008df0:	42a6      	cmp	r6, r4
 8008df2:	d109      	bne.n	8008e08 <__libc_init_array+0x24>
 8008df4:	4d0b      	ldr	r5, [pc, #44]	; (8008e24 <__libc_init_array+0x40>)
 8008df6:	4c0c      	ldr	r4, [pc, #48]	; (8008e28 <__libc_init_array+0x44>)
 8008df8:	f000 fc60 	bl	80096bc <_init>
 8008dfc:	1b64      	subs	r4, r4, r5
 8008dfe:	10a4      	asrs	r4, r4, #2
 8008e00:	2600      	movs	r6, #0
 8008e02:	42a6      	cmp	r6, r4
 8008e04:	d105      	bne.n	8008e12 <__libc_init_array+0x2e>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0c:	4798      	blx	r3
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7ee      	b.n	8008df0 <__libc_init_array+0xc>
 8008e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e16:	4798      	blx	r3
 8008e18:	3601      	adds	r6, #1
 8008e1a:	e7f2      	b.n	8008e02 <__libc_init_array+0x1e>
 8008e1c:	08009a8c 	.word	0x08009a8c
 8008e20:	08009a8c 	.word	0x08009a8c
 8008e24:	08009a8c 	.word	0x08009a8c
 8008e28:	08009a90 	.word	0x08009a90

08008e2c <memcpy>:
 8008e2c:	440a      	add	r2, r1
 8008e2e:	4291      	cmp	r1, r2
 8008e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e34:	d100      	bne.n	8008e38 <memcpy+0xc>
 8008e36:	4770      	bx	lr
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e42:	4291      	cmp	r1, r2
 8008e44:	d1f9      	bne.n	8008e3a <memcpy+0xe>
 8008e46:	bd10      	pop	{r4, pc}

08008e48 <memset>:
 8008e48:	4402      	add	r2, r0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d100      	bne.n	8008e52 <memset+0xa>
 8008e50:	4770      	bx	lr
 8008e52:	f803 1b01 	strb.w	r1, [r3], #1
 8008e56:	e7f9      	b.n	8008e4c <memset+0x4>

08008e58 <siprintf>:
 8008e58:	b40e      	push	{r1, r2, r3}
 8008e5a:	b500      	push	{lr}
 8008e5c:	b09c      	sub	sp, #112	; 0x70
 8008e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e60:	9002      	str	r0, [sp, #8]
 8008e62:	9006      	str	r0, [sp, #24]
 8008e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e68:	4809      	ldr	r0, [pc, #36]	; (8008e90 <siprintf+0x38>)
 8008e6a:	9107      	str	r1, [sp, #28]
 8008e6c:	9104      	str	r1, [sp, #16]
 8008e6e:	4909      	ldr	r1, [pc, #36]	; (8008e94 <siprintf+0x3c>)
 8008e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	6800      	ldr	r0, [r0, #0]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	a902      	add	r1, sp, #8
 8008e7c:	f000 f87a 	bl	8008f74 <_svfiprintf_r>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	b01c      	add	sp, #112	; 0x70
 8008e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e8c:	b003      	add	sp, #12
 8008e8e:	4770      	bx	lr
 8008e90:	20000028 	.word	0x20000028
 8008e94:	ffff0208 	.word	0xffff0208

08008e98 <strncmp>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	b16a      	cbz	r2, 8008eb8 <strncmp+0x20>
 8008e9c:	3901      	subs	r1, #1
 8008e9e:	1884      	adds	r4, r0, r2
 8008ea0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ea4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d103      	bne.n	8008eb4 <strncmp+0x1c>
 8008eac:	42a0      	cmp	r0, r4
 8008eae:	d001      	beq.n	8008eb4 <strncmp+0x1c>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f5      	bne.n	8008ea0 <strncmp+0x8>
 8008eb4:	1a98      	subs	r0, r3, r2
 8008eb6:	bd10      	pop	{r4, pc}
 8008eb8:	4610      	mov	r0, r2
 8008eba:	e7fc      	b.n	8008eb6 <strncmp+0x1e>

08008ebc <__ssputs_r>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	688e      	ldr	r6, [r1, #8]
 8008ec2:	429e      	cmp	r6, r3
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4690      	mov	r8, r2
 8008eca:	461f      	mov	r7, r3
 8008ecc:	d838      	bhi.n	8008f40 <__ssputs_r+0x84>
 8008ece:	898a      	ldrh	r2, [r1, #12]
 8008ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ed4:	d032      	beq.n	8008f3c <__ssputs_r+0x80>
 8008ed6:	6825      	ldr	r5, [r4, #0]
 8008ed8:	6909      	ldr	r1, [r1, #16]
 8008eda:	eba5 0901 	sub.w	r9, r5, r1
 8008ede:	6965      	ldr	r5, [r4, #20]
 8008ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ee8:	3301      	adds	r3, #1
 8008eea:	444b      	add	r3, r9
 8008eec:	106d      	asrs	r5, r5, #1
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	bf38      	it	cc
 8008ef2:	461d      	movcc	r5, r3
 8008ef4:	0553      	lsls	r3, r2, #21
 8008ef6:	d531      	bpl.n	8008f5c <__ssputs_r+0xa0>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f000 fb39 	bl	8009570 <_malloc_r>
 8008efe:	4606      	mov	r6, r0
 8008f00:	b950      	cbnz	r0, 8008f18 <__ssputs_r+0x5c>
 8008f02:	230c      	movs	r3, #12
 8008f04:	f8ca 3000 	str.w	r3, [sl]
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	6921      	ldr	r1, [r4, #16]
 8008f1a:	464a      	mov	r2, r9
 8008f1c:	f7ff ff86 	bl	8008e2c <memcpy>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	6126      	str	r6, [r4, #16]
 8008f2e:	6165      	str	r5, [r4, #20]
 8008f30:	444e      	add	r6, r9
 8008f32:	eba5 0509 	sub.w	r5, r5, r9
 8008f36:	6026      	str	r6, [r4, #0]
 8008f38:	60a5      	str	r5, [r4, #8]
 8008f3a:	463e      	mov	r6, r7
 8008f3c:	42be      	cmp	r6, r7
 8008f3e:	d900      	bls.n	8008f42 <__ssputs_r+0x86>
 8008f40:	463e      	mov	r6, r7
 8008f42:	4632      	mov	r2, r6
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	4641      	mov	r1, r8
 8008f48:	f000 faa8 	bl	800949c <memmove>
 8008f4c:	68a3      	ldr	r3, [r4, #8]
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	1b9b      	subs	r3, r3, r6
 8008f52:	4432      	add	r2, r6
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e7db      	b.n	8008f14 <__ssputs_r+0x58>
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	f000 fb61 	bl	8009624 <_realloc_r>
 8008f62:	4606      	mov	r6, r0
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d1e1      	bne.n	8008f2c <__ssputs_r+0x70>
 8008f68:	6921      	ldr	r1, [r4, #16]
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	f000 fab0 	bl	80094d0 <_free_r>
 8008f70:	e7c7      	b.n	8008f02 <__ssputs_r+0x46>
	...

08008f74 <_svfiprintf_r>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	4698      	mov	r8, r3
 8008f7a:	898b      	ldrh	r3, [r1, #12]
 8008f7c:	061b      	lsls	r3, r3, #24
 8008f7e:	b09d      	sub	sp, #116	; 0x74
 8008f80:	4607      	mov	r7, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	4614      	mov	r4, r2
 8008f86:	d50e      	bpl.n	8008fa6 <_svfiprintf_r+0x32>
 8008f88:	690b      	ldr	r3, [r1, #16]
 8008f8a:	b963      	cbnz	r3, 8008fa6 <_svfiprintf_r+0x32>
 8008f8c:	2140      	movs	r1, #64	; 0x40
 8008f8e:	f000 faef 	bl	8009570 <_malloc_r>
 8008f92:	6028      	str	r0, [r5, #0]
 8008f94:	6128      	str	r0, [r5, #16]
 8008f96:	b920      	cbnz	r0, 8008fa2 <_svfiprintf_r+0x2e>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	e0d1      	b.n	8009146 <_svfiprintf_r+0x1d2>
 8008fa2:	2340      	movs	r3, #64	; 0x40
 8008fa4:	616b      	str	r3, [r5, #20]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008faa:	2320      	movs	r3, #32
 8008fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fb4:	2330      	movs	r3, #48	; 0x30
 8008fb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009160 <_svfiprintf_r+0x1ec>
 8008fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fbe:	f04f 0901 	mov.w	r9, #1
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	469a      	mov	sl, r3
 8008fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fca:	b10a      	cbz	r2, 8008fd0 <_svfiprintf_r+0x5c>
 8008fcc:	2a25      	cmp	r2, #37	; 0x25
 8008fce:	d1f9      	bne.n	8008fc4 <_svfiprintf_r+0x50>
 8008fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd4:	d00b      	beq.n	8008fee <_svfiprintf_r+0x7a>
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff ff6d 	bl	8008ebc <__ssputs_r>
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	f000 80aa 	beq.w	800913c <_svfiprintf_r+0x1c8>
 8008fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fea:	445a      	add	r2, fp
 8008fec:	9209      	str	r2, [sp, #36]	; 0x24
 8008fee:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 80a2 	beq.w	800913c <_svfiprintf_r+0x1c8>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009002:	f10a 0a01 	add.w	sl, sl, #1
 8009006:	9304      	str	r3, [sp, #16]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800900e:	931a      	str	r3, [sp, #104]	; 0x68
 8009010:	4654      	mov	r4, sl
 8009012:	2205      	movs	r2, #5
 8009014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009018:	4851      	ldr	r0, [pc, #324]	; (8009160 <_svfiprintf_r+0x1ec>)
 800901a:	f7f7 f8f1 	bl	8000200 <memchr>
 800901e:	9a04      	ldr	r2, [sp, #16]
 8009020:	b9d8      	cbnz	r0, 800905a <_svfiprintf_r+0xe6>
 8009022:	06d0      	lsls	r0, r2, #27
 8009024:	bf44      	itt	mi
 8009026:	2320      	movmi	r3, #32
 8009028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902c:	0711      	lsls	r1, r2, #28
 800902e:	bf44      	itt	mi
 8009030:	232b      	movmi	r3, #43	; 0x2b
 8009032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009036:	f89a 3000 	ldrb.w	r3, [sl]
 800903a:	2b2a      	cmp	r3, #42	; 0x2a
 800903c:	d015      	beq.n	800906a <_svfiprintf_r+0xf6>
 800903e:	9a07      	ldr	r2, [sp, #28]
 8009040:	4654      	mov	r4, sl
 8009042:	2000      	movs	r0, #0
 8009044:	f04f 0c0a 	mov.w	ip, #10
 8009048:	4621      	mov	r1, r4
 800904a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800904e:	3b30      	subs	r3, #48	; 0x30
 8009050:	2b09      	cmp	r3, #9
 8009052:	d94e      	bls.n	80090f2 <_svfiprintf_r+0x17e>
 8009054:	b1b0      	cbz	r0, 8009084 <_svfiprintf_r+0x110>
 8009056:	9207      	str	r2, [sp, #28]
 8009058:	e014      	b.n	8009084 <_svfiprintf_r+0x110>
 800905a:	eba0 0308 	sub.w	r3, r0, r8
 800905e:	fa09 f303 	lsl.w	r3, r9, r3
 8009062:	4313      	orrs	r3, r2
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	46a2      	mov	sl, r4
 8009068:	e7d2      	b.n	8009010 <_svfiprintf_r+0x9c>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	1d19      	adds	r1, r3, #4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	9103      	str	r1, [sp, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfbb      	ittet	lt
 8009076:	425b      	neglt	r3, r3
 8009078:	f042 0202 	orrlt.w	r2, r2, #2
 800907c:	9307      	strge	r3, [sp, #28]
 800907e:	9307      	strlt	r3, [sp, #28]
 8009080:	bfb8      	it	lt
 8009082:	9204      	strlt	r2, [sp, #16]
 8009084:	7823      	ldrb	r3, [r4, #0]
 8009086:	2b2e      	cmp	r3, #46	; 0x2e
 8009088:	d10c      	bne.n	80090a4 <_svfiprintf_r+0x130>
 800908a:	7863      	ldrb	r3, [r4, #1]
 800908c:	2b2a      	cmp	r3, #42	; 0x2a
 800908e:	d135      	bne.n	80090fc <_svfiprintf_r+0x188>
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	9203      	str	r2, [sp, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfb8      	it	lt
 800909c:	f04f 33ff 	movlt.w	r3, #4294967295
 80090a0:	3402      	adds	r4, #2
 80090a2:	9305      	str	r3, [sp, #20]
 80090a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009170 <_svfiprintf_r+0x1fc>
 80090a8:	7821      	ldrb	r1, [r4, #0]
 80090aa:	2203      	movs	r2, #3
 80090ac:	4650      	mov	r0, sl
 80090ae:	f7f7 f8a7 	bl	8000200 <memchr>
 80090b2:	b140      	cbz	r0, 80090c6 <_svfiprintf_r+0x152>
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	eba0 000a 	sub.w	r0, r0, sl
 80090ba:	fa03 f000 	lsl.w	r0, r3, r0
 80090be:	9b04      	ldr	r3, [sp, #16]
 80090c0:	4303      	orrs	r3, r0
 80090c2:	3401      	adds	r4, #1
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ca:	4826      	ldr	r0, [pc, #152]	; (8009164 <_svfiprintf_r+0x1f0>)
 80090cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090d0:	2206      	movs	r2, #6
 80090d2:	f7f7 f895 	bl	8000200 <memchr>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d038      	beq.n	800914c <_svfiprintf_r+0x1d8>
 80090da:	4b23      	ldr	r3, [pc, #140]	; (8009168 <_svfiprintf_r+0x1f4>)
 80090dc:	bb1b      	cbnz	r3, 8009126 <_svfiprintf_r+0x1b2>
 80090de:	9b03      	ldr	r3, [sp, #12]
 80090e0:	3307      	adds	r3, #7
 80090e2:	f023 0307 	bic.w	r3, r3, #7
 80090e6:	3308      	adds	r3, #8
 80090e8:	9303      	str	r3, [sp, #12]
 80090ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ec:	4433      	add	r3, r6
 80090ee:	9309      	str	r3, [sp, #36]	; 0x24
 80090f0:	e767      	b.n	8008fc2 <_svfiprintf_r+0x4e>
 80090f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090f6:	460c      	mov	r4, r1
 80090f8:	2001      	movs	r0, #1
 80090fa:	e7a5      	b.n	8009048 <_svfiprintf_r+0xd4>
 80090fc:	2300      	movs	r3, #0
 80090fe:	3401      	adds	r4, #1
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	4619      	mov	r1, r3
 8009104:	f04f 0c0a 	mov.w	ip, #10
 8009108:	4620      	mov	r0, r4
 800910a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800910e:	3a30      	subs	r2, #48	; 0x30
 8009110:	2a09      	cmp	r2, #9
 8009112:	d903      	bls.n	800911c <_svfiprintf_r+0x1a8>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0c5      	beq.n	80090a4 <_svfiprintf_r+0x130>
 8009118:	9105      	str	r1, [sp, #20]
 800911a:	e7c3      	b.n	80090a4 <_svfiprintf_r+0x130>
 800911c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009120:	4604      	mov	r4, r0
 8009122:	2301      	movs	r3, #1
 8009124:	e7f0      	b.n	8009108 <_svfiprintf_r+0x194>
 8009126:	ab03      	add	r3, sp, #12
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	462a      	mov	r2, r5
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <_svfiprintf_r+0x1f8>)
 800912e:	a904      	add	r1, sp, #16
 8009130:	4638      	mov	r0, r7
 8009132:	f3af 8000 	nop.w
 8009136:	1c42      	adds	r2, r0, #1
 8009138:	4606      	mov	r6, r0
 800913a:	d1d6      	bne.n	80090ea <_svfiprintf_r+0x176>
 800913c:	89ab      	ldrh	r3, [r5, #12]
 800913e:	065b      	lsls	r3, r3, #25
 8009140:	f53f af2c 	bmi.w	8008f9c <_svfiprintf_r+0x28>
 8009144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009146:	b01d      	add	sp, #116	; 0x74
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	ab03      	add	r3, sp, #12
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	462a      	mov	r2, r5
 8009152:	4b06      	ldr	r3, [pc, #24]	; (800916c <_svfiprintf_r+0x1f8>)
 8009154:	a904      	add	r1, sp, #16
 8009156:	4638      	mov	r0, r7
 8009158:	f000 f87a 	bl	8009250 <_printf_i>
 800915c:	e7eb      	b.n	8009136 <_svfiprintf_r+0x1c2>
 800915e:	bf00      	nop
 8009160:	08009a50 	.word	0x08009a50
 8009164:	08009a5a 	.word	0x08009a5a
 8009168:	00000000 	.word	0x00000000
 800916c:	08008ebd 	.word	0x08008ebd
 8009170:	08009a56 	.word	0x08009a56

08009174 <_printf_common>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	4616      	mov	r6, r2
 800917a:	4699      	mov	r9, r3
 800917c:	688a      	ldr	r2, [r1, #8]
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009184:	4293      	cmp	r3, r2
 8009186:	bfb8      	it	lt
 8009188:	4613      	movlt	r3, r2
 800918a:	6033      	str	r3, [r6, #0]
 800918c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009190:	4607      	mov	r7, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b10a      	cbz	r2, 800919a <_printf_common+0x26>
 8009196:	3301      	adds	r3, #1
 8009198:	6033      	str	r3, [r6, #0]
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	0699      	lsls	r1, r3, #26
 800919e:	bf42      	ittt	mi
 80091a0:	6833      	ldrmi	r3, [r6, #0]
 80091a2:	3302      	addmi	r3, #2
 80091a4:	6033      	strmi	r3, [r6, #0]
 80091a6:	6825      	ldr	r5, [r4, #0]
 80091a8:	f015 0506 	ands.w	r5, r5, #6
 80091ac:	d106      	bne.n	80091bc <_printf_common+0x48>
 80091ae:	f104 0a19 	add.w	sl, r4, #25
 80091b2:	68e3      	ldr	r3, [r4, #12]
 80091b4:	6832      	ldr	r2, [r6, #0]
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	42ab      	cmp	r3, r5
 80091ba:	dc26      	bgt.n	800920a <_printf_common+0x96>
 80091bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c0:	1e13      	subs	r3, r2, #0
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	bf18      	it	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	0692      	lsls	r2, r2, #26
 80091ca:	d42b      	bmi.n	8009224 <_printf_common+0xb0>
 80091cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091d0:	4649      	mov	r1, r9
 80091d2:	4638      	mov	r0, r7
 80091d4:	47c0      	blx	r8
 80091d6:	3001      	adds	r0, #1
 80091d8:	d01e      	beq.n	8009218 <_printf_common+0xa4>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	68e5      	ldr	r5, [r4, #12]
 80091de:	6832      	ldr	r2, [r6, #0]
 80091e0:	f003 0306 	and.w	r3, r3, #6
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	bf08      	it	eq
 80091e8:	1aad      	subeq	r5, r5, r2
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	bf0c      	ite	eq
 80091f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f4:	2500      	movne	r5, #0
 80091f6:	4293      	cmp	r3, r2
 80091f8:	bfc4      	itt	gt
 80091fa:	1a9b      	subgt	r3, r3, r2
 80091fc:	18ed      	addgt	r5, r5, r3
 80091fe:	2600      	movs	r6, #0
 8009200:	341a      	adds	r4, #26
 8009202:	42b5      	cmp	r5, r6
 8009204:	d11a      	bne.n	800923c <_printf_common+0xc8>
 8009206:	2000      	movs	r0, #0
 8009208:	e008      	b.n	800921c <_printf_common+0xa8>
 800920a:	2301      	movs	r3, #1
 800920c:	4652      	mov	r2, sl
 800920e:	4649      	mov	r1, r9
 8009210:	4638      	mov	r0, r7
 8009212:	47c0      	blx	r8
 8009214:	3001      	adds	r0, #1
 8009216:	d103      	bne.n	8009220 <_printf_common+0xac>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009220:	3501      	adds	r5, #1
 8009222:	e7c6      	b.n	80091b2 <_printf_common+0x3e>
 8009224:	18e1      	adds	r1, r4, r3
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	2030      	movs	r0, #48	; 0x30
 800922a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800922e:	4422      	add	r2, r4
 8009230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009238:	3302      	adds	r3, #2
 800923a:	e7c7      	b.n	80091cc <_printf_common+0x58>
 800923c:	2301      	movs	r3, #1
 800923e:	4622      	mov	r2, r4
 8009240:	4649      	mov	r1, r9
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	3001      	adds	r0, #1
 8009248:	d0e6      	beq.n	8009218 <_printf_common+0xa4>
 800924a:	3601      	adds	r6, #1
 800924c:	e7d9      	b.n	8009202 <_printf_common+0x8e>
	...

08009250 <_printf_i>:
 8009250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	4691      	mov	r9, r2
 8009258:	7e27      	ldrb	r7, [r4, #24]
 800925a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800925c:	2f78      	cmp	r7, #120	; 0x78
 800925e:	4680      	mov	r8, r0
 8009260:	469a      	mov	sl, r3
 8009262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009266:	d807      	bhi.n	8009278 <_printf_i+0x28>
 8009268:	2f62      	cmp	r7, #98	; 0x62
 800926a:	d80a      	bhi.n	8009282 <_printf_i+0x32>
 800926c:	2f00      	cmp	r7, #0
 800926e:	f000 80d8 	beq.w	8009422 <_printf_i+0x1d2>
 8009272:	2f58      	cmp	r7, #88	; 0x58
 8009274:	f000 80a3 	beq.w	80093be <_printf_i+0x16e>
 8009278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800927c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009280:	e03a      	b.n	80092f8 <_printf_i+0xa8>
 8009282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009286:	2b15      	cmp	r3, #21
 8009288:	d8f6      	bhi.n	8009278 <_printf_i+0x28>
 800928a:	a001      	add	r0, pc, #4	; (adr r0, 8009290 <_printf_i+0x40>)
 800928c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009290:	080092e9 	.word	0x080092e9
 8009294:	080092fd 	.word	0x080092fd
 8009298:	08009279 	.word	0x08009279
 800929c:	08009279 	.word	0x08009279
 80092a0:	08009279 	.word	0x08009279
 80092a4:	08009279 	.word	0x08009279
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009279 	.word	0x08009279
 80092b0:	08009279 	.word	0x08009279
 80092b4:	08009279 	.word	0x08009279
 80092b8:	08009279 	.word	0x08009279
 80092bc:	08009409 	.word	0x08009409
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	080093eb 	.word	0x080093eb
 80092c8:	08009279 	.word	0x08009279
 80092cc:	08009279 	.word	0x08009279
 80092d0:	0800942b 	.word	0x0800942b
 80092d4:	08009279 	.word	0x08009279
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	08009279 	.word	0x08009279
 80092e0:	08009279 	.word	0x08009279
 80092e4:	080093f3 	.word	0x080093f3
 80092e8:	680b      	ldr	r3, [r1, #0]
 80092ea:	1d1a      	adds	r2, r3, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	600a      	str	r2, [r1, #0]
 80092f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0a3      	b.n	8009444 <_printf_i+0x1f4>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	6808      	ldr	r0, [r1, #0]
 8009300:	062e      	lsls	r6, r5, #24
 8009302:	f100 0304 	add.w	r3, r0, #4
 8009306:	d50a      	bpl.n	800931e <_printf_i+0xce>
 8009308:	6805      	ldr	r5, [r0, #0]
 800930a:	600b      	str	r3, [r1, #0]
 800930c:	2d00      	cmp	r5, #0
 800930e:	da03      	bge.n	8009318 <_printf_i+0xc8>
 8009310:	232d      	movs	r3, #45	; 0x2d
 8009312:	426d      	negs	r5, r5
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009318:	485e      	ldr	r0, [pc, #376]	; (8009494 <_printf_i+0x244>)
 800931a:	230a      	movs	r3, #10
 800931c:	e019      	b.n	8009352 <_printf_i+0x102>
 800931e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009322:	6805      	ldr	r5, [r0, #0]
 8009324:	600b      	str	r3, [r1, #0]
 8009326:	bf18      	it	ne
 8009328:	b22d      	sxthne	r5, r5
 800932a:	e7ef      	b.n	800930c <_printf_i+0xbc>
 800932c:	680b      	ldr	r3, [r1, #0]
 800932e:	6825      	ldr	r5, [r4, #0]
 8009330:	1d18      	adds	r0, r3, #4
 8009332:	6008      	str	r0, [r1, #0]
 8009334:	0628      	lsls	r0, r5, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xec>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e002      	b.n	8009342 <_printf_i+0xf2>
 800933c:	0669      	lsls	r1, r5, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xe8>
 8009340:	881d      	ldrh	r5, [r3, #0]
 8009342:	4854      	ldr	r0, [pc, #336]	; (8009494 <_printf_i+0x244>)
 8009344:	2f6f      	cmp	r7, #111	; 0x6f
 8009346:	bf0c      	ite	eq
 8009348:	2308      	moveq	r3, #8
 800934a:	230a      	movne	r3, #10
 800934c:	2100      	movs	r1, #0
 800934e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009352:	6866      	ldr	r6, [r4, #4]
 8009354:	60a6      	str	r6, [r4, #8]
 8009356:	2e00      	cmp	r6, #0
 8009358:	bfa2      	ittt	ge
 800935a:	6821      	ldrge	r1, [r4, #0]
 800935c:	f021 0104 	bicge.w	r1, r1, #4
 8009360:	6021      	strge	r1, [r4, #0]
 8009362:	b90d      	cbnz	r5, 8009368 <_printf_i+0x118>
 8009364:	2e00      	cmp	r6, #0
 8009366:	d04d      	beq.n	8009404 <_printf_i+0x1b4>
 8009368:	4616      	mov	r6, r2
 800936a:	fbb5 f1f3 	udiv	r1, r5, r3
 800936e:	fb03 5711 	mls	r7, r3, r1, r5
 8009372:	5dc7      	ldrb	r7, [r0, r7]
 8009374:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009378:	462f      	mov	r7, r5
 800937a:	42bb      	cmp	r3, r7
 800937c:	460d      	mov	r5, r1
 800937e:	d9f4      	bls.n	800936a <_printf_i+0x11a>
 8009380:	2b08      	cmp	r3, #8
 8009382:	d10b      	bne.n	800939c <_printf_i+0x14c>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	07df      	lsls	r7, r3, #31
 8009388:	d508      	bpl.n	800939c <_printf_i+0x14c>
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	6861      	ldr	r1, [r4, #4]
 800938e:	4299      	cmp	r1, r3
 8009390:	bfde      	ittt	le
 8009392:	2330      	movle	r3, #48	; 0x30
 8009394:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009398:	f106 36ff 	addle.w	r6, r6, #4294967295
 800939c:	1b92      	subs	r2, r2, r6
 800939e:	6122      	str	r2, [r4, #16]
 80093a0:	f8cd a000 	str.w	sl, [sp]
 80093a4:	464b      	mov	r3, r9
 80093a6:	aa03      	add	r2, sp, #12
 80093a8:	4621      	mov	r1, r4
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7ff fee2 	bl	8009174 <_printf_common>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d14c      	bne.n	800944e <_printf_i+0x1fe>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b004      	add	sp, #16
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	4835      	ldr	r0, [pc, #212]	; (8009494 <_printf_i+0x244>)
 80093c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	680e      	ldr	r6, [r1, #0]
 80093c8:	061f      	lsls	r7, r3, #24
 80093ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80093ce:	600e      	str	r6, [r1, #0]
 80093d0:	d514      	bpl.n	80093fc <_printf_i+0x1ac>
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	bf44      	itt	mi
 80093d6:	f043 0320 	orrmi.w	r3, r3, #32
 80093da:	6023      	strmi	r3, [r4, #0]
 80093dc:	b91d      	cbnz	r5, 80093e6 <_printf_i+0x196>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f023 0320 	bic.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2310      	movs	r3, #16
 80093e8:	e7b0      	b.n	800934c <_printf_i+0xfc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	f043 0320 	orr.w	r3, r3, #32
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	2378      	movs	r3, #120	; 0x78
 80093f4:	4828      	ldr	r0, [pc, #160]	; (8009498 <_printf_i+0x248>)
 80093f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093fa:	e7e3      	b.n	80093c4 <_printf_i+0x174>
 80093fc:	065e      	lsls	r6, r3, #25
 80093fe:	bf48      	it	mi
 8009400:	b2ad      	uxthmi	r5, r5
 8009402:	e7e6      	b.n	80093d2 <_printf_i+0x182>
 8009404:	4616      	mov	r6, r2
 8009406:	e7bb      	b.n	8009380 <_printf_i+0x130>
 8009408:	680b      	ldr	r3, [r1, #0]
 800940a:	6826      	ldr	r6, [r4, #0]
 800940c:	6960      	ldr	r0, [r4, #20]
 800940e:	1d1d      	adds	r5, r3, #4
 8009410:	600d      	str	r5, [r1, #0]
 8009412:	0635      	lsls	r5, r6, #24
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	d501      	bpl.n	800941c <_printf_i+0x1cc>
 8009418:	6018      	str	r0, [r3, #0]
 800941a:	e002      	b.n	8009422 <_printf_i+0x1d2>
 800941c:	0671      	lsls	r1, r6, #25
 800941e:	d5fb      	bpl.n	8009418 <_printf_i+0x1c8>
 8009420:	8018      	strh	r0, [r3, #0]
 8009422:	2300      	movs	r3, #0
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	4616      	mov	r6, r2
 8009428:	e7ba      	b.n	80093a0 <_printf_i+0x150>
 800942a:	680b      	ldr	r3, [r1, #0]
 800942c:	1d1a      	adds	r2, r3, #4
 800942e:	600a      	str	r2, [r1, #0]
 8009430:	681e      	ldr	r6, [r3, #0]
 8009432:	6862      	ldr	r2, [r4, #4]
 8009434:	2100      	movs	r1, #0
 8009436:	4630      	mov	r0, r6
 8009438:	f7f6 fee2 	bl	8000200 <memchr>
 800943c:	b108      	cbz	r0, 8009442 <_printf_i+0x1f2>
 800943e:	1b80      	subs	r0, r0, r6
 8009440:	6060      	str	r0, [r4, #4]
 8009442:	6863      	ldr	r3, [r4, #4]
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	2300      	movs	r3, #0
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	e7a8      	b.n	80093a0 <_printf_i+0x150>
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	4632      	mov	r2, r6
 8009452:	4649      	mov	r1, r9
 8009454:	4640      	mov	r0, r8
 8009456:	47d0      	blx	sl
 8009458:	3001      	adds	r0, #1
 800945a:	d0ab      	beq.n	80093b4 <_printf_i+0x164>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	d413      	bmi.n	800948a <_printf_i+0x23a>
 8009462:	68e0      	ldr	r0, [r4, #12]
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	4298      	cmp	r0, r3
 8009468:	bfb8      	it	lt
 800946a:	4618      	movlt	r0, r3
 800946c:	e7a4      	b.n	80093b8 <_printf_i+0x168>
 800946e:	2301      	movs	r3, #1
 8009470:	4632      	mov	r2, r6
 8009472:	4649      	mov	r1, r9
 8009474:	4640      	mov	r0, r8
 8009476:	47d0      	blx	sl
 8009478:	3001      	adds	r0, #1
 800947a:	d09b      	beq.n	80093b4 <_printf_i+0x164>
 800947c:	3501      	adds	r5, #1
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	9903      	ldr	r1, [sp, #12]
 8009482:	1a5b      	subs	r3, r3, r1
 8009484:	42ab      	cmp	r3, r5
 8009486:	dcf2      	bgt.n	800946e <_printf_i+0x21e>
 8009488:	e7eb      	b.n	8009462 <_printf_i+0x212>
 800948a:	2500      	movs	r5, #0
 800948c:	f104 0619 	add.w	r6, r4, #25
 8009490:	e7f5      	b.n	800947e <_printf_i+0x22e>
 8009492:	bf00      	nop
 8009494:	08009a61 	.word	0x08009a61
 8009498:	08009a72 	.word	0x08009a72

0800949c <memmove>:
 800949c:	4288      	cmp	r0, r1
 800949e:	b510      	push	{r4, lr}
 80094a0:	eb01 0402 	add.w	r4, r1, r2
 80094a4:	d902      	bls.n	80094ac <memmove+0x10>
 80094a6:	4284      	cmp	r4, r0
 80094a8:	4623      	mov	r3, r4
 80094aa:	d807      	bhi.n	80094bc <memmove+0x20>
 80094ac:	1e43      	subs	r3, r0, #1
 80094ae:	42a1      	cmp	r1, r4
 80094b0:	d008      	beq.n	80094c4 <memmove+0x28>
 80094b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ba:	e7f8      	b.n	80094ae <memmove+0x12>
 80094bc:	4402      	add	r2, r0
 80094be:	4601      	mov	r1, r0
 80094c0:	428a      	cmp	r2, r1
 80094c2:	d100      	bne.n	80094c6 <memmove+0x2a>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ce:	e7f7      	b.n	80094c0 <memmove+0x24>

080094d0 <_free_r>:
 80094d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094d2:	2900      	cmp	r1, #0
 80094d4:	d048      	beq.n	8009568 <_free_r+0x98>
 80094d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094da:	9001      	str	r0, [sp, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f1a1 0404 	sub.w	r4, r1, #4
 80094e2:	bfb8      	it	lt
 80094e4:	18e4      	addlt	r4, r4, r3
 80094e6:	f000 f8d3 	bl	8009690 <__malloc_lock>
 80094ea:	4a20      	ldr	r2, [pc, #128]	; (800956c <_free_r+0x9c>)
 80094ec:	9801      	ldr	r0, [sp, #4]
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	4615      	mov	r5, r2
 80094f2:	b933      	cbnz	r3, 8009502 <_free_r+0x32>
 80094f4:	6063      	str	r3, [r4, #4]
 80094f6:	6014      	str	r4, [r2, #0]
 80094f8:	b003      	add	sp, #12
 80094fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094fe:	f000 b8cd 	b.w	800969c <__malloc_unlock>
 8009502:	42a3      	cmp	r3, r4
 8009504:	d90b      	bls.n	800951e <_free_r+0x4e>
 8009506:	6821      	ldr	r1, [r4, #0]
 8009508:	1862      	adds	r2, r4, r1
 800950a:	4293      	cmp	r3, r2
 800950c:	bf04      	itt	eq
 800950e:	681a      	ldreq	r2, [r3, #0]
 8009510:	685b      	ldreq	r3, [r3, #4]
 8009512:	6063      	str	r3, [r4, #4]
 8009514:	bf04      	itt	eq
 8009516:	1852      	addeq	r2, r2, r1
 8009518:	6022      	streq	r2, [r4, #0]
 800951a:	602c      	str	r4, [r5, #0]
 800951c:	e7ec      	b.n	80094f8 <_free_r+0x28>
 800951e:	461a      	mov	r2, r3
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	b10b      	cbz	r3, 8009528 <_free_r+0x58>
 8009524:	42a3      	cmp	r3, r4
 8009526:	d9fa      	bls.n	800951e <_free_r+0x4e>
 8009528:	6811      	ldr	r1, [r2, #0]
 800952a:	1855      	adds	r5, r2, r1
 800952c:	42a5      	cmp	r5, r4
 800952e:	d10b      	bne.n	8009548 <_free_r+0x78>
 8009530:	6824      	ldr	r4, [r4, #0]
 8009532:	4421      	add	r1, r4
 8009534:	1854      	adds	r4, r2, r1
 8009536:	42a3      	cmp	r3, r4
 8009538:	6011      	str	r1, [r2, #0]
 800953a:	d1dd      	bne.n	80094f8 <_free_r+0x28>
 800953c:	681c      	ldr	r4, [r3, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	6053      	str	r3, [r2, #4]
 8009542:	4421      	add	r1, r4
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	e7d7      	b.n	80094f8 <_free_r+0x28>
 8009548:	d902      	bls.n	8009550 <_free_r+0x80>
 800954a:	230c      	movs	r3, #12
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	e7d3      	b.n	80094f8 <_free_r+0x28>
 8009550:	6825      	ldr	r5, [r4, #0]
 8009552:	1961      	adds	r1, r4, r5
 8009554:	428b      	cmp	r3, r1
 8009556:	bf04      	itt	eq
 8009558:	6819      	ldreq	r1, [r3, #0]
 800955a:	685b      	ldreq	r3, [r3, #4]
 800955c:	6063      	str	r3, [r4, #4]
 800955e:	bf04      	itt	eq
 8009560:	1949      	addeq	r1, r1, r5
 8009562:	6021      	streq	r1, [r4, #0]
 8009564:	6054      	str	r4, [r2, #4]
 8009566:	e7c7      	b.n	80094f8 <_free_r+0x28>
 8009568:	b003      	add	sp, #12
 800956a:	bd30      	pop	{r4, r5, pc}
 800956c:	20013494 	.word	0x20013494

08009570 <_malloc_r>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	1ccd      	adds	r5, r1, #3
 8009574:	f025 0503 	bic.w	r5, r5, #3
 8009578:	3508      	adds	r5, #8
 800957a:	2d0c      	cmp	r5, #12
 800957c:	bf38      	it	cc
 800957e:	250c      	movcc	r5, #12
 8009580:	2d00      	cmp	r5, #0
 8009582:	4606      	mov	r6, r0
 8009584:	db01      	blt.n	800958a <_malloc_r+0x1a>
 8009586:	42a9      	cmp	r1, r5
 8009588:	d903      	bls.n	8009592 <_malloc_r+0x22>
 800958a:	230c      	movs	r3, #12
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	2000      	movs	r0, #0
 8009590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009592:	f000 f87d 	bl	8009690 <__malloc_lock>
 8009596:	4921      	ldr	r1, [pc, #132]	; (800961c <_malloc_r+0xac>)
 8009598:	680a      	ldr	r2, [r1, #0]
 800959a:	4614      	mov	r4, r2
 800959c:	b99c      	cbnz	r4, 80095c6 <_malloc_r+0x56>
 800959e:	4f20      	ldr	r7, [pc, #128]	; (8009620 <_malloc_r+0xb0>)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	b923      	cbnz	r3, 80095ae <_malloc_r+0x3e>
 80095a4:	4621      	mov	r1, r4
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f862 	bl	8009670 <_sbrk_r>
 80095ac:	6038      	str	r0, [r7, #0]
 80095ae:	4629      	mov	r1, r5
 80095b0:	4630      	mov	r0, r6
 80095b2:	f000 f85d 	bl	8009670 <_sbrk_r>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d123      	bne.n	8009602 <_malloc_r+0x92>
 80095ba:	230c      	movs	r3, #12
 80095bc:	6033      	str	r3, [r6, #0]
 80095be:	4630      	mov	r0, r6
 80095c0:	f000 f86c 	bl	800969c <__malloc_unlock>
 80095c4:	e7e3      	b.n	800958e <_malloc_r+0x1e>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	1b5b      	subs	r3, r3, r5
 80095ca:	d417      	bmi.n	80095fc <_malloc_r+0x8c>
 80095cc:	2b0b      	cmp	r3, #11
 80095ce:	d903      	bls.n	80095d8 <_malloc_r+0x68>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	441c      	add	r4, r3
 80095d4:	6025      	str	r5, [r4, #0]
 80095d6:	e004      	b.n	80095e2 <_malloc_r+0x72>
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	42a2      	cmp	r2, r4
 80095dc:	bf0c      	ite	eq
 80095de:	600b      	streq	r3, [r1, #0]
 80095e0:	6053      	strne	r3, [r2, #4]
 80095e2:	4630      	mov	r0, r6
 80095e4:	f000 f85a 	bl	800969c <__malloc_unlock>
 80095e8:	f104 000b 	add.w	r0, r4, #11
 80095ec:	1d23      	adds	r3, r4, #4
 80095ee:	f020 0007 	bic.w	r0, r0, #7
 80095f2:	1ac2      	subs	r2, r0, r3
 80095f4:	d0cc      	beq.n	8009590 <_malloc_r+0x20>
 80095f6:	1a1b      	subs	r3, r3, r0
 80095f8:	50a3      	str	r3, [r4, r2]
 80095fa:	e7c9      	b.n	8009590 <_malloc_r+0x20>
 80095fc:	4622      	mov	r2, r4
 80095fe:	6864      	ldr	r4, [r4, #4]
 8009600:	e7cc      	b.n	800959c <_malloc_r+0x2c>
 8009602:	1cc4      	adds	r4, r0, #3
 8009604:	f024 0403 	bic.w	r4, r4, #3
 8009608:	42a0      	cmp	r0, r4
 800960a:	d0e3      	beq.n	80095d4 <_malloc_r+0x64>
 800960c:	1a21      	subs	r1, r4, r0
 800960e:	4630      	mov	r0, r6
 8009610:	f000 f82e 	bl	8009670 <_sbrk_r>
 8009614:	3001      	adds	r0, #1
 8009616:	d1dd      	bne.n	80095d4 <_malloc_r+0x64>
 8009618:	e7cf      	b.n	80095ba <_malloc_r+0x4a>
 800961a:	bf00      	nop
 800961c:	20013494 	.word	0x20013494
 8009620:	20013498 	.word	0x20013498

08009624 <_realloc_r>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	4607      	mov	r7, r0
 8009628:	4614      	mov	r4, r2
 800962a:	460e      	mov	r6, r1
 800962c:	b921      	cbnz	r1, 8009638 <_realloc_r+0x14>
 800962e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009632:	4611      	mov	r1, r2
 8009634:	f7ff bf9c 	b.w	8009570 <_malloc_r>
 8009638:	b922      	cbnz	r2, 8009644 <_realloc_r+0x20>
 800963a:	f7ff ff49 	bl	80094d0 <_free_r>
 800963e:	4625      	mov	r5, r4
 8009640:	4628      	mov	r0, r5
 8009642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009644:	f000 f830 	bl	80096a8 <_malloc_usable_size_r>
 8009648:	42a0      	cmp	r0, r4
 800964a:	d20f      	bcs.n	800966c <_realloc_r+0x48>
 800964c:	4621      	mov	r1, r4
 800964e:	4638      	mov	r0, r7
 8009650:	f7ff ff8e 	bl	8009570 <_malloc_r>
 8009654:	4605      	mov	r5, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	d0f2      	beq.n	8009640 <_realloc_r+0x1c>
 800965a:	4631      	mov	r1, r6
 800965c:	4622      	mov	r2, r4
 800965e:	f7ff fbe5 	bl	8008e2c <memcpy>
 8009662:	4631      	mov	r1, r6
 8009664:	4638      	mov	r0, r7
 8009666:	f7ff ff33 	bl	80094d0 <_free_r>
 800966a:	e7e9      	b.n	8009640 <_realloc_r+0x1c>
 800966c:	4635      	mov	r5, r6
 800966e:	e7e7      	b.n	8009640 <_realloc_r+0x1c>

08009670 <_sbrk_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d06      	ldr	r5, [pc, #24]	; (800968c <_sbrk_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f8 fec6 	bl	800240c <_sbrk>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_sbrk_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_sbrk_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20013c58 	.word	0x20013c58

08009690 <__malloc_lock>:
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <__malloc_lock+0x8>)
 8009692:	f000 b811 	b.w	80096b8 <__retarget_lock_acquire_recursive>
 8009696:	bf00      	nop
 8009698:	20013c60 	.word	0x20013c60

0800969c <__malloc_unlock>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__malloc_unlock+0x8>)
 800969e:	f000 b80c 	b.w	80096ba <__retarget_lock_release_recursive>
 80096a2:	bf00      	nop
 80096a4:	20013c60 	.word	0x20013c60

080096a8 <_malloc_usable_size_r>:
 80096a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ac:	1f18      	subs	r0, r3, #4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfbc      	itt	lt
 80096b2:	580b      	ldrlt	r3, [r1, r0]
 80096b4:	18c0      	addlt	r0, r0, r3
 80096b6:	4770      	bx	lr

080096b8 <__retarget_lock_acquire_recursive>:
 80096b8:	4770      	bx	lr

080096ba <__retarget_lock_release_recursive>:
 80096ba:	4770      	bx	lr

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	bf00      	nop
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
